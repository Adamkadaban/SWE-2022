{"version":3,"sources":["lib/firebase.js","components/add-new-post.js","components/navbar.js","components/vote-buttons.js","components/post.js","app.js","index.js"],"names":["db","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","AddNewPost","useDisclosure","isOpen","onOpen","onClose","useState","title","setTitle","content","setContent","isSaving","setSaving","handleSubmit","a","date","Date","collection","add","upVotesCount","downVotesCount","createdAt","toUTCString","updatedAt","onClick","colorScheme","isCentered","id","type","value","onChange","e","target","spacing","disabled","trim","isLoading","Navbar","position","top","p","bg","zIndex","maxW","centerContent","justifyContent","w","VoteButtons","post","isVoting","setVoting","votedPosts","setVotedPosts","useEffect","votesFromLocalStorage","localStorage","getItem","previousVotes","JSON","parse","error","console","handleDisablingOfVoting","postId","push","setItem","stringify","handleClick","doc","set","checkIfPostIsAlreadyVoted","indexOf","size","aria-label","icon","isDisabled","rounded","Post","key","alignItems","fontSize","App","posts","setPosts","setLoading","orderBy","get","then","querySnapshot","data","docs","map","onSnapshot","_posts","forEach","minH","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f326df0.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\nconst initFirebase = firebase.initializeApp(firebaseConfig);\nconst db = initFirebase.firestore();\n\nexport default db;\n","import {\n  Button,\n  FormControl,\n  FormLabel,\n  Textarea,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  HStack,\n  useDisclosure,\n} from \"@chakra-ui/core\";\nimport React, { useState } from \"react\";\nimport db from \"../lib/firebase\";\n\nconst AddNewPost = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [isSaving, setSaving] = useState(false);\n\n  const handleSubmit = async () => {\n    setSaving(true);\n\n    const date = new Date();\n\n    await db.collection(\"posts\").add({\n      title,\n\t  content,\n      upVotesCount: 0,\n      downVotesCount: 0,\n      createdAt: date.toUTCString(),\n      updatedAt: date.toUTCString(),\n    });\n\n    onClose();\n    setTitle(\"\");\n\tsetContent(\"\");\n    setSaving(false);\n  };\n\n  return (\n    <>\n      <Button onClick={onOpen} colorScheme=\"blue\">\n        Add new post\n      </Button>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay>\n          <ModalContent>\n            <ModalHeader>Add new post</ModalHeader>\n            <ModalCloseButton /\n>            <ModalBody>\n              <FormControl id=\"post-title\">\n                <FormLabel>Post title</FormLabel>\n                <Textarea\n                  type=\"post-title\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                />\n              </FormControl>\n            </ModalBody>\n\n          <ModalContent>\n            <ModalBody>\n              <FormControl id=\"post-content\">\n                <FormLabel>Post content</FormLabel>\n                <Textarea\n                type=\"post-content\"\n                value={content}\n                onChange={(e) => setContent(e.target.value)}\n                />\n              </FormControl>\n            </ModalBody>\n            </ModalContent>\n\n            <ModalFooter>\n              <HStack spacing={2}>\n                <Button onClick={onClose}>Close</Button>\n                <Button\n                  onClick={handleSubmit}\n                  colorScheme=\"blue\"\n                  disabled={!title.trim()}\n                  isLoading={isSaving}\n                >\n                  Save\n                </Button>\n              </HStack>\n            </ModalFooter>\n          </ModalContent>\n        </ModalOverlay>\n      </Modal>\n    </>\n  );\n};\n\nexport default AddNewPost;\n","import { Box, Container, Flex } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AddNewPost from \"./add-new-post\";\n\nconst Navbar = () => {\n  return (\n    <>\n      <Box position=\"sticky\" top={0} p={4} bg=\"gray.100\" zIndex={1}>\n        <Container maxW=\"md\" centerContent>\n          <Flex justifyContent=\"flex-end\" w=\"100%\" position=\"sticky\" top={0}>\n            <AddNewPost />\n          </Flex>\n        </Container>\n      </Box>\n    </>\n  );\n};\n\nexport default Navbar;\n","import { IconButton, Text, VStack } from \"@chakra-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { FiArrowDown, FiArrowUp } from \"react-icons/fi\";\nimport db from \"../lib/firebase\";\n\nconst VoteButtons = ({ post }) => {\n  const [isVoting, setVoting] = useState(false);\n  const [votedPosts, setVotedPosts] = useState([]);\n\n  useEffect(() => {\n    // Fetch the previously voted items from localStorage. See https://stackoverflow.com/a/52607524/1928724 on why we need \"JSON.parse\" and update the item on localStorage. Return \"true\" if the user has already voted the post.\n    const votesFromLocalStorage = localStorage.getItem(\"votes\") || [];\n    let previousVotes = [];\n\n    try {\n      // Parse the value of the item from localStorage. If the value of the\n      // items isn't an array, then JS will throw an error.\n      previousVotes = JSON.parse(votesFromLocalStorage);\n    } catch (error) {\n      console.error(error);\n    }\n\n    setVotedPosts(previousVotes);\n  }, []);\n\n  const handleDisablingOfVoting = (postId) => {\n    // This function is responsible for disabling the voting button after a\n    // user has voted. Fetch the previously voted items from localStorage. See\n    // https://stackoverflow.com/a/52607524/1928724 on why we need \"JSON.parse\"\n    // and update the item on localStorage.\n    const previousVotes = votedPosts;\n    previousVotes.push(postId);\n\n    setVotedPosts(previousVotes);\n\n    // Update the voted items from localStorage. See https://stackoverflow.com/a/52607524/1928724 on why we need \"JSON.stringify\" and update the item on localStorage.\n    localStorage.setItem(\"votes\", JSON.stringify(votedPosts));\n  };\n\n  const handleClick = async (type) => {\n    setVoting(true);\n\n    // Do calculation to save the vote.\n    let upVotesCount = post.upVotesCount;\n    let downVotesCount = post.downVotesCount;\n\n    const date = new Date();\n\n    if (type === \"upvote\") {\n      upVotesCount = upVotesCount + 1;\n    } else {\n      downVotesCount = downVotesCount + 1;\n    }\n\n    await db.collection(\"posts\").doc(post.id).set({\n      title: post.title,\n\t    content: post.content,\n      upVotesCount,\n      downVotesCount,\n      createdAt: post.createdAt,\n      updatedAt: date.toUTCString(),\n    });\n\n    // Disable the voting button once the voting is successful.\n    handleDisablingOfVoting(post.id);\n\n    setVoting(false);\n  };\n\n  const checkIfPostIsAlreadyVoted = () => {\n    if (votedPosts.indexOf(post.id) > -1) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return (\n    <>\n      <VStack>\n        <IconButton\n          size=\"lg\"\n          colorScheme=\"orange\"\n          aria-label=\"Upvote\"\n          icon={<FiArrowUp />}\n          onClick={() => handleClick(\"upvote\")}\n          isLoading={isVoting}\n          isDisabled={checkIfPostIsAlreadyVoted()}\n        />\n        <Text bg=\"gray.100\" rounded=\"md\" w=\"100%\" p={1}>\n          {post.upVotesCount}\n        </Text>\n      </VStack>\n      <VStack>\n        <IconButton\n          size=\"lg\"\n          colorScheme=\"green\"\n          aria-label=\"Downvote\"\n          icon={<FiArrowDown />}\n          onClick={() => handleClick(\"downvote\")}\n          isLoading={isVoting}\n          isDisabled={checkIfPostIsAlreadyVoted()}\n        />\n        <Text bg=\"gray.100\" rounded=\"md\" w=\"100%\" p={1}>\n          {post.downVotesCount}\n        </Text>\n      </VStack>\n    </>\n  );\n};\n\nexport default VoteButtons;\n","import { Box, HStack, Text, Heading} from \"@chakra-ui/core\";\nimport React from \"react\";\nimport VoteButtons from \"./vote-buttons\";\n\nconst Post = ({ post }) => {\n  return (\n    <HStack key={post.id} w=\"100%\" alignItems=\"flex-start\">\n      <VoteButtons post={post} />\n      <Box bg=\"gray.100\" p={4} rounded=\"md\" w=\"100%\">\n        <Heading fontSize=\"25px\">{post.title}</Heading>\n\t\t<Text fontSize=\"15px\">{post.content}</Text>\n      </Box>\n    </HStack>\n  );\n};\n\nexport default Post;\n","import { Container, Flex, Spinner, VStack } from \"@chakra-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport Navbar from \"./components/navbar\";\nimport Post from \"./components/post\";\nimport db from \"./lib/firebase\";\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Hook to handle the initial fetching of posts\n\n    db.collection(\"posts\")\n      .orderBy(\"createdAt\", \"desc\")\n      .get()\n      .then((querySnapshot) => {\n        const data = querySnapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n\n        setPosts(data);\n        setLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    // Hook to handle the real-time updating of posts whenever there is a\n    // change in the datastore (https://firebase.google.com/docs/firestore/query-data/listen#view_changes_between_snapshots)\n\n    db.collection(\"posts\")\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((querySnapshot) => {\n        const _posts = [];\n\n        querySnapshot.forEach((doc) => {\n          _posts.push({\n            id: doc.id,\n            ...doc.data(),\n          });\n        });\n\n        setPosts(_posts);\n      });\n  }, []);\n\n  if (isLoading) {\n    return (\n      <Flex minH=\"100vh\" justifyContent=\"center\" alignItems=\"center\">\n        <Spinner />\n      </Flex>\n    );\n  }\n\n  return (\n    <>\n      <Navbar />\n      <Container maxW=\"md\" centerContent p={8}>\n        <VStack spacing={8} w=\"100%\">\n          {posts.map((post) => (\n            <Post post={post} key={post.id} />\n          ))}\n        </VStack>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import { ChakraProvider } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}