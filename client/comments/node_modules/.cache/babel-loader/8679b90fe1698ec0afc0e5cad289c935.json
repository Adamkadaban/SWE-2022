{"ast":null,"code":"import _regeneratorRuntime from\"/opt/reddit-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/opt/reddit-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/opt/reddit-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Button,FormControl,FormLabel,Textarea,Modal,ModalBody,ModalCloseButton,ModalContent,ModalFooter,ModalHeader,ModalOverlay,HStack,useDisclosure}from\"@chakra-ui/core\";import React,{useState}from\"react\";import db from\"../lib/firebase\";var AddNewPost=function AddNewPost(){var _useDisclosure=useDisclosure(),isOpen=_useDisclosure.isOpen,onOpen=_useDisclosure.onOpen,onClose=_useDisclosure.onClose;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),title=_useState2[0],setTitle=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),content=_useState4[0],setContent=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isSaving=_useState6[0],setSaving=_useState6[1];var handleSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var date;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setSaving(true);date=new Date();_context.next=4;return db.collection(\"posts\").add({title:title,content:content,upVotesCount:0,downVotesCount:0,createdAt:date.toUTCString(),updatedAt:date.toUTCString()});case 4:onClose();setTitle(\"\");setContent(\"\");setSaving(false);case 8:case\"end\":return _context.stop();}}},_callee);}));return function handleSubmit(){return _ref.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Button,{onClick:onOpen,colorScheme:\"blue\"},\"Add new post\"),/*#__PURE__*/React.createElement(Modal,{onClose:onClose,isOpen:isOpen,isCentered:true},/*#__PURE__*/React.createElement(ModalOverlay,null,/*#__PURE__*/React.createElement(ModalContent,null,/*#__PURE__*/React.createElement(ModalHeader,null,\"Add new post\"),/*#__PURE__*/React.createElement(ModalCloseButton,null),/*#__PURE__*/React.createElement(ModalBody,null,/*#__PURE__*/React.createElement(FormControl,{id:\"post-title\"},/*#__PURE__*/React.createElement(FormLabel,null,\"Post title\"),/*#__PURE__*/React.createElement(Textarea,{type:\"post-title\",value:title,onChange:function onChange(e){return setTitle(e.target.value);}}))),/*#__PURE__*/React.createElement(ModalContent,null,/*#__PURE__*/React.createElement(ModalBody,null,/*#__PURE__*/React.createElement(FormControl,{id:\"post-content\"},/*#__PURE__*/React.createElement(FormLabel,null,\"Post content\"),/*#__PURE__*/React.createElement(Textarea,{type:\"post-content\",value:content,onChange:function onChange(e){return setContent(e.target.value);}})))),/*#__PURE__*/React.createElement(ModalFooter,null,/*#__PURE__*/React.createElement(HStack,{spacing:2},/*#__PURE__*/React.createElement(Button,{onClick:onClose},\"Close\"),/*#__PURE__*/React.createElement(Button,{onClick:handleSubmit,colorScheme:\"blue\",disabled:!title.trim(),isLoading:isSaving},\"Save\")))))));};export default AddNewPost;","map":{"version":3,"sources":["/opt/reddit-clone/src/components/add-new-post.js"],"names":["Button","FormControl","FormLabel","Textarea","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","HStack","useDisclosure","React","useState","db","AddNewPost","isOpen","onOpen","onClose","title","setTitle","content","setContent","isSaving","setSaving","handleSubmit","date","Date","collection","add","upVotesCount","downVotesCount","createdAt","toUTCString","updatedAt","e","target","value","trim"],"mappings":"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","sourcesContent":["import {\n  Button,\n  FormControl,\n  FormLabel,\n  Textarea,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  HStack,\n  useDisclosure,\n} from \"@chakra-ui/core\";\nimport React, { useState } from \"react\";\nimport db from \"../lib/firebase\";\n\nconst AddNewPost = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [isSaving, setSaving] = useState(false);\n\n  const handleSubmit = async () => {\n    setSaving(true);\n\n    const date = new Date();\n\n    await db.collection(\"posts\").add({\n      title,\n\t  content,\n      upVotesCount: 0,\n      downVotesCount: 0,\n      createdAt: date.toUTCString(),\n      updatedAt: date.toUTCString(),\n    });\n\n    onClose();\n    setTitle(\"\");\n\tsetContent(\"\");\n    setSaving(false);\n  };\n\n  return (\n    <>\n      <Button onClick={onOpen} colorScheme=\"blue\">\n        Add new post\n      </Button>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay>\n          <ModalContent>\n            <ModalHeader>Add new post</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n              <FormControl id=\"post-title\">\n                <FormLabel>Post title</FormLabel>\n                <Textarea\n                  type=\"post-title\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                />\n              </FormControl>\n            </ModalBody>\n\n          <ModalContent>\n            <ModalBody>\n              <FormControl id=\"post-content\">\n                <FormLabel>Post content</FormLabel>\n                <Textarea\n                type=\"post-content\"\n                value={content}\n                onChange={(e) => setContent(e.target.value)}\n                />\n              </FormControl>\n            </ModalBody>\n            </ModalContent>\n\n            <ModalFooter>\n              <HStack spacing={2}>\n                <Button onClick={onClose}>Close</Button>\n                <Button\n                  onClick={handleSubmit}\n                  colorScheme=\"blue\"\n                  disabled={!title.trim()}\n                  isLoading={isSaving}\n                >\n                  Save\n                </Button>\n              </HStack>\n            </ModalFooter>\n          </ModalContent>\n        </ModalOverlay>\n      </Modal>\n    </>\n  );\n};\n\nexport default AddNewPost;\n"]},"metadata":{},"sourceType":"module"}