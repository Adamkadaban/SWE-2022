{"ast":null,"code":"// Number assertions\nexport function isNumber(value) {\n  return typeof value === \"number\";\n}\nexport var isNotNumber = function isNotNumber(value) {\n  return typeof value !== \"number\" || isNaN(value) || !isFinite(value);\n};\nexport function isNumeric(value) {\n  return value != null && value - parseFloat(value) + 1 >= 0;\n} // Array assertions\n\nexport function isArray(value) {\n  return Array.isArray(value);\n}\nexport var isEmptyArray = function isEmptyArray(value) {\n  return isArray(value) && value.length === 0;\n}; // Function assertions\n\nexport function isFunction(value) {\n  return typeof value === \"function\";\n} // Generic assertions\n\nexport var isDefined = function isDefined(value) {\n  return typeof value !== \"undefined\" && value !== undefined;\n};\nexport var isUndefined = function isUndefined(value) {\n  return typeof value === \"undefined\" || value === undefined;\n}; // Object assertions\n\nexport var isObject = function isObject(value) {\n  var type = typeof value;\n  return value != null && (type === \"object\" || type === \"function\") && !isArray(value);\n};\nexport var isEmptyObject = function isEmptyObject(value) {\n  return isObject(value) && Object.keys(value).length === 0;\n};\nexport function isNotEmptyObject(value) {\n  return value && !isEmptyObject(value);\n}\nexport var isNull = function isNull(value) {\n  return value == null;\n}; // String assertions\n\nexport function isString(value) {\n  return Object.prototype.toString.call(value) === \"[object String]\";\n} // Event assertions\n\nexport function isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n} // Empty assertions\n\nexport var isEmpty = function isEmpty(value) {\n  if (isArray(value)) return isEmptyArray(value);\n  if (isObject(value)) return isEmptyObject(value);\n  if (value == null || value === \"\") return true;\n  return false;\n};\nexport var __DEV__ = process.env.NODE_ENV !== \"production\";","map":{"version":3,"sources":["../../src/assertion.ts"],"names":["isNotNumber","value","isNaN","isFinite","parseFloat","Array","isEmptyArray","isArray","isDefined","isUndefined","isObject","type","isEmptyObject","Object","isNull","isEmpty","__DEV__","process"],"mappings":"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","sourcesContent":["import { ChangeEvent } from \"react\"\nimport { Dict } from \"./types\"\n\n// Number assertions\nexport function isNumber(value: any): value is number {\n  return typeof value === \"number\"\n}\n\nexport const isNotNumber = (value: any) =>\n  typeof value !== \"number\" || isNaN(value) || !isFinite(value)\n\nexport function isNumeric(value: any) {\n  return value != null && value - parseFloat(value) + 1 >= 0\n}\n\n// Array assertions\nexport function isArray<T>(value: any): value is Array<T> {\n  return Array.isArray(value)\n}\n\nexport const isEmptyArray = (value: any) => isArray(value) && value.length === 0\n\n// Function assertions\nexport function isFunction(value: any): value is Function {\n  return typeof value === \"function\"\n}\n\n// Generic assertions\nexport const isDefined = (value: any) =>\n  typeof value !== \"undefined\" && value !== undefined\n\nexport const isUndefined = (value: any): value is undefined =>\n  typeof value === \"undefined\" || value === undefined\n\n// Object assertions\nexport const isObject = (value: any): value is Dict => {\n  const type = typeof value\n  return (\n    value != null &&\n    (type === \"object\" || type === \"function\") &&\n    !isArray(value)\n  )\n}\n\nexport const isEmptyObject = (value: any) =>\n  isObject(value) && Object.keys(value).length === 0\n\nexport function isNotEmptyObject(value: any): value is object {\n  return value && !isEmptyObject(value)\n}\n\nexport const isNull = (value: any): value is null => value == null\n\n// String assertions\nexport function isString(value: any): value is string {\n  return Object.prototype.toString.call(value) === \"[object String]\"\n}\n\n// Event assertions\nexport function isInputEvent(value: any): value is ChangeEvent {\n  return value && isObject(value) && isObject(value.target)\n}\n\n// Empty assertions\nexport const isEmpty = (value: any) => {\n  if (isArray(value)) return isEmptyArray(value)\n  if (isObject(value)) return isEmptyObject(value)\n  if (value == null || value === \"\") return true\n  return false\n}\n\nexport const __DEV__ = process.env.NODE_ENV !== \"production\"\n"]},"metadata":{},"sourceType":"module"}