{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useRef, useEffect } from \"react\";\nexport function useWhyDidYouUpdate(name, props) {\n  // Get a mutable ref object where we can store props ...\n  // ... for comparison next time this hook runs.\n  var previousProps = useRef();\n  useEffect(function () {\n    if (previousProps.current) {\n      // Get all keys from previous and current props\n      var allKeys = Object.keys(_extends({}, previousProps.current, props)); // Use this object to keep track of changed props\n\n      var changesObj = {}; // Iterate through keys\n\n      allKeys.forEach(function (key) {\n        // If previous is different from current\n        if (previousProps.current[key] !== props[key]) {\n          // Add to changesObj\n          changesObj[key] = {\n            from: previousProps.current[key],\n            to: props[key]\n          };\n        }\n      }); // If changesObj not empty then output to console\n\n      if (Object.keys(changesObj).length) {\n        console.log(\"[why-did-you-update]\", name, changesObj);\n      }\n    } // Finally update previousProps with current props for next hook call\n\n\n    previousProps.current = props;\n  });\n}","map":{"version":3,"sources":["../../src/use-why-update.ts"],"names":["previousProps","useRef","useEffect","allKeys","Object","changesObj","key","props","from","to","console"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,SAAA,QAAA,OAAA;AAEA,OAAO,SAAA,kBAAA,CAAA,IAAA,EAAA,KAAA,EAAsD;AAC3D;AACA;AACA,MAAMA,aAAa,GAAGC,MAAtB,EAAA;AAEAC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIF,aAAa,CAAjB,OAAA,EAA2B;AACzB;AACA,UAAMG,OAAO,GAAGC,MAAM,CAANA,IAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAiBJ,aAAa,CAA9BI,OAAAA,EAFS,KAETA,CAAAA,CAAhB,CAFyB,CAGzB;;AACA,UAAMC,UAAU,GAJS,EAIzB,CAJyB,CAKzB;;AACAF,MAAAA,OAAO,CAAPA,OAAAA,CAAiBG,UAAAA,GAAD,EAAS;AACvB;AACA,YAAIN,aAAa,CAAbA,OAAAA,CAAAA,GAAAA,MAA+BO,KAAK,CAAxC,GAAwC,CAAxC,EAA+C;AAC7C;AACAF,UAAAA,UAAU,CAAVA,GAAU,CAAVA,GAAkB;AAChBG,YAAAA,IAAI,EAAER,aAAa,CAAbA,OAAAA,CADU,GACVA,CADU;AAEhBS,YAAAA,EAAE,EAAEF,KAAK,CAAA,GAAA;AAFO,WAAlBF;AAID;AAdsB,OAMzBF,EANyB,CAiBzB;;AACA,UAAIC,MAAM,CAANA,IAAAA,CAAAA,UAAAA,EAAJ,MAAA,EAAoC;AAClCM,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,sBAAAA,EAAAA,IAAAA,EAAAA,UAAAA;AACD;AArBW,KAAA,CAwBd;;;AACAV,IAAAA,aAAa,CAAbA,OAAAA,GAAAA,KAAAA;AAzBFE,GAAS,CAATA;AA2BD","sourcesContent":["import { useRef, useEffect } from \"react\"\n\nexport function useWhyDidYouUpdate(name: string, props: any) {\n  // Get a mutable ref object where we can store props ...\n  // ... for comparison next time this hook runs.\n  const previousProps = useRef<any>()\n\n  useEffect(() => {\n    if (previousProps.current) {\n      // Get all keys from previous and current props\n      const allKeys = Object.keys({ ...previousProps.current, ...props })\n      // Use this object to keep track of changed props\n      const changesObj = {}\n      // Iterate through keys\n      allKeys.forEach((key) => {\n        // If previous is different from current\n        if (previousProps.current[key] !== props[key]) {\n          // Add to changesObj\n          changesObj[key] = {\n            from: previousProps.current[key],\n            to: props[key],\n          }\n        }\n      })\n\n      // If changesObj not empty then output to console\n      if (Object.keys(changesObj).length) {\n        console.log(\"[why-did-you-update]\", name, changesObj)\n      }\n    }\n\n    // Finally update previousProps with current props for next hook call\n    previousProps.current = props\n  })\n}\n"]},"metadata":{},"sourceType":"module"}