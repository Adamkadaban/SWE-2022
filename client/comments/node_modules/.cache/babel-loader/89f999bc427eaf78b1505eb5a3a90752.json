{"ast":null,"code":"import { objectKeys } from \"@chakra-ui/utils\";\n/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\n\nexport function findById(arr, id) {\n  return arr.find(function (toast) {\n    return toast.id === id;\n  });\n}\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return it's position and index\n */\n\nexport function findToast(toasts, id) {\n  var position = getToastPosition(toasts, id);\n  var index = position ? toasts[position].findIndex(function (toast) {\n    return toast.id == id;\n  }) : -1;\n  return {\n    position: position,\n    index: index\n  };\n}\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\n\nexport function getToastPosition(toasts, id) {\n  var position;\n  objectKeys(toasts).forEach(function (pos) {\n    var found = findById(toasts[pos], id);\n    if (found) position = pos;\n  });\n  return position;\n}\n/**\n * Given the toast manager state, checks if a specific toast is\n * still in the state, which means it's still visible on screen.\n */\n\nexport function isVisible(toasts, id) {\n  var found;\n  Object.values(toasts).forEach(function (toasts) {\n    found = toasts.find(function (toast) {\n      return toast.id === id;\n    });\n  });\n  return !!found;\n}\n/**\n * Get's the styles to be applied to a toast's container\n * based on it's position in the manager\n */\n\nexport function getToastStyle(position) {\n  var style = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  };\n\n  if (position.includes(\"right\")) {\n    style.alignItems = \"flex-end\";\n  } else if (position.includes(\"left\")) {\n    style.alignItems = \"flex-start\";\n  }\n\n  return style;\n}","map":{"version":3,"sources":["../../src/toast.utils.ts"],"names":["arr","toast","position","getToastPosition","index","toasts","objectKeys","pos","found","findById","Object","style","display","flexDirection","alignItems"],"mappings":"AACA,SAAA,UAAA,QAAA,kBAAA;AAEA;;;;;AAIA,OAAO,SAAA,QAAA,CAAA,GAAA,EAAA,EAAA,EAAoD;AACzD,SAAOA,GAAG,CAAHA,IAAAA,CAAUC,UAAAA,KAAD;AAAA,WAAWA,KAAK,CAALA,EAAAA,KAA3B,EAAgB;AAAA,GAATD,CAAP;AACD;AAED;;;;;AAIA,OAAO,SAAA,SAAA,CAAA,MAAA,EAAA,EAAA,EAAoD;AACzD,MAAME,QAAQ,GAAGC,gBAAgB,CAAA,MAAA,EAAjC,EAAiC,CAAjC;AAEA,MAAMC,KAAK,GAAGF,QAAQ,GAClBG,MAAM,CAANA,QAAM,CAANA,CAAAA,SAAAA,CAA4BJ,UAAAA,KAAD;AAAA,WAAWA,KAAK,CAALA,EAAAA,IADpB,EACS;AAAA,GAA3BI,CADkB,GAElB,CAFJ,CAAA;AAIA,SAAO;AACLH,IAAAA,QADK,EACLA,QADK;AAELE,IAAAA,KAAAA,EAAAA;AAFK,GAAP;AAID;AAED;;;;;AAIA,OAAO,SAAA,gBAAA,CAAA,MAAA,EAAA,EAAA,EAA2D;AAChE,MAAA,QAAA;AAEAE,EAAAA,UAAU,CAAVA,MAAU,CAAVA,CAAAA,OAAAA,CAA4BC,UAAAA,GAAD,EAAS;AAClC,QAAMC,KAAK,GAAGC,QAAQ,CAACJ,MAAM,CAAP,GAAO,CAAP,EAAtB,EAAsB,CAAtB;AACA,QAAA,KAAA,EAAWH,QAAQ,GAARA,GAAAA;AAFbI,GAAAA;AAKA,SAAA,QAAA;AACD;AAED;;;;;AAIA,OAAO,SAAA,SAAA,CAAA,MAAA,EAAA,EAAA,EAAoD;AACzD,MAAA,KAAA;AAEAI,EAAAA,MAAM,CAANA,MAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CAA+BL,UAAAA,MAAD,EAAY;AACxCG,IAAAA,KAAK,GAAGH,MAAM,CAANA,IAAAA,CAAaJ,UAAAA,KAAD;AAAA,aAAWA,KAAK,CAALA,EAAAA,KAA/BO,EAAoB;AAAA,KAAZH,CAARG;AADFE,GAAAA;AAIA,SAAO,CAAC,CAAR,KAAA;AACD;AAED;;;;;AAIA,OAAO,SAAA,aAAA,CAAA,QAAA,EAAgD;AACrD,MAAMC,KAA0B,GAAG;AACjCC,IAAAA,OAAO,EAD0B,MAAA;AAEjCC,IAAAA,aAAa,EAFoB,QAAA;AAGjCC,IAAAA,UAAU,EAAE;AAHqB,GAAnC;;AAMA,MAAIZ,QAAQ,CAARA,QAAAA,CAAJ,OAAIA,CAAJ,EAAgC;AAC9BS,IAAAA,KAAK,CAALA,UAAAA,GAAAA,UAAAA;AADF,GAAA,MAEO,IAAIT,QAAQ,CAARA,QAAAA,CAAJ,MAAIA,CAAJ,EAA+B;AACpCS,IAAAA,KAAK,CAALA,UAAAA,GAAAA,YAAAA;AACD;;AAED,SAAA,KAAA;AACD","sourcesContent":["import { ToastPosition, ToastOptions, ToastState, ToastId } from \"./toast.types\"\nimport { objectKeys } from \"@chakra-ui/utils\"\n\n/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\nexport function findById(arr: ToastOptions[], id: ToastId) {\n  return arr.find((toast) => toast.id === id)\n}\n\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return it's position and index\n */\nexport function findToast(toasts: ToastState, id: ToastId) {\n  const position = getToastPosition(toasts, id)\n\n  const index = position\n    ? toasts[position].findIndex((toast) => toast.id == id)\n    : -1\n\n  return {\n    position,\n    index,\n  }\n}\n\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\nexport function getToastPosition(toasts: ToastState, id: ToastId) {\n  let position: ToastPosition | undefined\n\n  objectKeys(toasts).forEach((pos) => {\n    const found = findById(toasts[pos], id)\n    if (found) position = pos\n  })\n\n  return position\n}\n\n/**\n * Given the toast manager state, checks if a specific toast is\n * still in the state, which means it's still visible on screen.\n */\nexport function isVisible(toasts: ToastState, id: ToastId) {\n  let found: any\n\n  Object.values(toasts).forEach((toasts) => {\n    found = toasts.find((toast) => toast.id === id)\n  })\n\n  return !!found\n}\n\n/**\n * Get's the styles to be applied to a toast's container\n * based on it's position in the manager\n */\nexport function getToastStyle(position: ToastPosition) {\n  const style: React.CSSProperties = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  }\n\n  if (position.includes(\"right\")) {\n    style.alignItems = \"flex-end\"\n  } else if (position.includes(\"left\")) {\n    style.alignItems = \"flex-start\"\n  }\n\n  return style\n}\n"]},"metadata":{},"sourceType":"module"}