{"ast":null,"code":"import _createForOfIteratorHelper from \"/root/Desktop/SWE-2022/client/comments/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/root/Desktop/SWE-2022/client/comments/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport _react, { useCallback, useContext, useEffect, useMemo, useRef, useState } from \"react\";\nimport { focusWithoutScrolling, mergeProps, runAfterTransition } from \"@react-aria/utils\";\nimport _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Original licensing for the following method can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/blob/3c713d513195a53788b3f8bb4b70279d68b15bcc/packages/react-interactions/events/src/dom/shared/index.js#L74-L87\n// Keyboards, Assistive Technologies, and element.click() all produce a \"virtual\"\n// click event. This is a method of inferring such clicks. Every browser except\n// IE 11 only sets a zero value of \"detail\" for click events that are \"virtual\".\n// However, IE 11 uses a zero value for all click events. For IE 11 we rely on\n// the quirk that it produces click events that are of type PointerEvent, and\n// where only the \"virtual\" click lacks a pointerType field.\n\nfunction $f67ef9f1b8ed09b4b00fd0840cd8b94b$export$isVirtualClick(event) {\n  // JAWS/NVDA with Firefox.\n  if (event.mozInputSource === 0 && event.isTrusted) {\n    return true;\n  }\n\n  return event.detail === 0 && !event.pointerType;\n}\n\nvar $a3ff51240de6f955c79cf17a88e349$export$PressResponderContext = _react.createContext(null);\n\n$a3ff51240de6f955c79cf17a88e349$export$PressResponderContext.displayName = 'PressResponderContext';\n\nfunction $ffc54430b1dbeee65879852feaaff07d$var$usePressResponderContext(props) {\n  // Consume context from <PressResponder> and merge with props.\n  var context = useContext($a3ff51240de6f955c79cf17a88e349$export$PressResponderContext);\n\n  if (context) {\n    var register = context.register,\n        contextProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(context, [\"register\"]);\n\n    props = mergeProps(contextProps, props);\n    register();\n  } // Sync ref from <PressResponder> with ref passed to usePress.\n\n\n  useEffect(function () {\n    if (context && context.ref) {\n      context.ref.current = props.ref.current;\n      return function () {\n        context.ref.current = null;\n      };\n    }\n  }, [context, props.ref]);\n  return props;\n}\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\n\n\nexport function usePress(props) {\n  var _usePressResponderCon = $ffc54430b1dbeee65879852feaaff07d$var$usePressResponderContext(props),\n      onPress = _usePressResponderCon.onPress,\n      onPressChange = _usePressResponderCon.onPressChange,\n      onPressStart = _usePressResponderCon.onPressStart,\n      onPressEnd = _usePressResponderCon.onPressEnd,\n      onPressUp = _usePressResponderCon.onPressUp,\n      isDisabled = _usePressResponderCon.isDisabled,\n      isPressedProp = _usePressResponderCon.isPressed,\n      domProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(_usePressResponderCon, [\"onPress\", \"onPressChange\", \"onPressStart\", \"onPressEnd\", \"onPressUp\", \"isDisabled\", \"isPressed\", \"ref\"]);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPressed = _useState2[0],\n      setPressed = _useState2[1];\n\n  var ref = useRef({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false\n  });\n  var globalListeners = useRef(new Map());\n  var addGlobalListener = useCallback(function (eventTarget, type, listener, options) {\n    globalListeners.current.set(listener, {\n      type: type,\n      eventTarget: eventTarget,\n      options: options\n    });\n    eventTarget.addEventListener(type, listener, options);\n  }, [globalListeners.current]);\n  var removeGlobalListener = useCallback(function (eventTarget, type, listener, options) {\n    eventTarget.removeEventListener(type, listener, options);\n    globalListeners.current.delete(listener);\n  }, [globalListeners.current]);\n  var pressProps = useMemo(function () {\n    var state = ref.current;\n\n    var triggerPressStart = function triggerPressStart(originalEvent, pointerType) {\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressStart) {\n        onPressStart({\n          type: 'pressstart',\n          pointerType: pointerType,\n          target: originalEvent.currentTarget,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(true);\n      }\n\n      setPressed(true);\n    };\n\n    var triggerPressEnd = function triggerPressEnd(originalEvent, pointerType, wasPressed) {\n      if (wasPressed === void 0) {\n        wasPressed = true;\n      }\n\n      if (isDisabled) {\n        return;\n      }\n\n      state.ignoreClickAfterPress = true;\n\n      if (onPressEnd) {\n        onPressEnd({\n          type: 'pressend',\n          pointerType: pointerType,\n          target: originalEvent.currentTarget,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(false);\n      }\n\n      setPressed(false);\n\n      if (onPress && wasPressed) {\n        onPress({\n          type: 'press',\n          pointerType: pointerType,\n          target: originalEvent.currentTarget,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey\n        });\n      }\n    };\n\n    var triggerPressUp = function triggerPressUp(originalEvent, pointerType) {\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressUp) {\n        onPressUp({\n          type: 'pressup',\n          pointerType: pointerType,\n          target: originalEvent.currentTarget,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey\n        });\n      }\n    };\n\n    var pressProps = {\n      onKeyDown: function onKeyDown(e) {\n        if ($ffc54430b1dbeee65879852feaaff07d$var$isValidKeyboardEvent(e.nativeEvent)) {\n          e.preventDefault();\n          e.stopPropagation(); // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard'); // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        }\n      },\n      onKeyUp: function onKeyUp(e) {\n        if ($ffc54430b1dbeee65879852feaaff07d$var$isValidKeyboardEvent(e.nativeEvent) && !e.repeat) {\n          triggerPressUp($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), 'keyboard');\n        }\n      },\n      onClick: function onClick(e) {\n        if (e && e.button === 0) {\n          e.stopPropagation();\n\n          if (isDisabled) {\n            e.preventDefault();\n          } // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n\n\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && $f67ef9f1b8ed09b4b00fd0840cd8b94b$export$isVirtualClick(e.nativeEvent)) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n\n    var onKeyUp = function onKeyUp(e) {\n      if (state.isPressed && $ffc54430b1dbeee65879852feaaff07d$var$isValidKeyboardEvent(e)) {\n        e.preventDefault();\n        e.stopPropagation();\n        state.isPressed = false;\n        triggerPressEnd($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), 'keyboard', e.target === state.target);\n        removeGlobalListener(document, 'keyup', onKeyUp, false); // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n\n        if (e.target === state.target && $ffc54430b1dbeee65879852feaaff07d$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link') {\n          state.target.click();\n        }\n      }\n    }; // Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n    // is to add user-select: none to the entire page. Adding it to the pressable element prevents\n    // that element from being selected, but nearby elements may still receive selection. We add\n    // user-select: none on touch start, and remove it again on touch end to prevent this.\n\n\n    var disableTextSelection = function disableTextSelection() {\n      state.userSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    };\n\n    var restoreTextSelection = function restoreTextSelection() {\n      // There appears to be a delay on iOS where selection still might occur\n      // after pointer up, so wait a bit before removing user-select.\n      setTimeout(function () {\n        // Wait for any CSS transitions to complete so we don't recompute style\n        // for the whole page in the middle of the animation and cause jank.\n        runAfterTransition(function () {\n          // Avoid race conditions\n          if (!state.isPressed && document.documentElement.style.webkitUserSelect === 'none') {\n            document.documentElement.style.webkitUserSelect = state.userSelect || '';\n            state.userSelect = null;\n          }\n        });\n      }, 300);\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = function (e) {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        } // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          disableTextSelection();\n          triggerPressStart(e, e.pointerType);\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = function (e) {\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          e.preventDefault();\n        }\n      };\n\n      var unbindEvents = function unbindEvents() {\n        removeGlobalListener(document, 'pointermove', onPointerMove, false);\n        removeGlobalListener(document, 'pointerup', onPointerUp, false);\n        removeGlobalListener(document, 'pointercancel', onPointerCancel, false);\n      };\n\n      pressProps.onPointerUp = function (e) {\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && $ffc54430b1dbeee65879852feaaff07d$var$isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, e.pointerType);\n        }\n      }; // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n\n\n      var onPointerMove = function onPointerMove(e) {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if ($ffc54430b1dbeee65879852feaaff07d$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), e.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), e.pointerType, false);\n        }\n      };\n\n      var onPointerUp = function onPointerUp(e) {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if ($ffc54430b1dbeee65879852feaaff07d$var$isOverTarget(e, state.target)) {\n            triggerPressEnd($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), e.pointerType);\n          } else if (state.isOverTarget) {\n            triggerPressEnd($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), e.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          unbindEvents();\n          restoreTextSelection();\n        }\n      };\n\n      var onPointerCancel = function onPointerCancel(e) {\n        if (state.isPressed) {\n          if (state.isOverTarget) {\n            triggerPressEnd($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), e.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          unbindEvents();\n          restoreTextSelection();\n        }\n      };\n    } else {\n      pressProps.onMouseDown = function (e) {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        } // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n\n        if (!isDisabled) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        triggerPressStart(e, $f67ef9f1b8ed09b4b00fd0840cd8b94b$export$isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse');\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = function (e) {\n        e.stopPropagation();\n\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, 'mouse');\n        }\n      };\n\n      pressProps.onMouseLeave = function (e) {\n        e.stopPropagation();\n\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, 'mouse', false);\n        }\n      };\n\n      pressProps.onMouseUp = function (e) {\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, $f67ef9f1b8ed09b4b00fd0840cd8b94b$export$isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse');\n        }\n      };\n\n      var onMouseUp = function onMouseUp(e) {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeGlobalListener(document, 'mouseup', onMouseUp, false);\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        var pointerType = $f67ef9f1b8ed09b4b00fd0840cd8b94b$export$isVirtualClick(e) ? 'virtual' : 'mouse';\n\n        if ($ffc54430b1dbeee65879852feaaff07d$var$isOverTarget(e, state.target)) {\n          triggerPressEnd($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd($ffc54430b1dbeee65879852feaaff07d$var$createEvent(state.target, e), pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = function (e) {\n        e.stopPropagation();\n        var touch = $ffc54430b1dbeee65879852feaaff07d$var$getTouchFromEvent(e.nativeEvent);\n\n        if (!touch) {\n          return;\n        }\n\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget; // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n\n        if (!isDisabled) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        disableTextSelection();\n        triggerPressStart(e, 'touch');\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = function (e) {\n        e.stopPropagation();\n\n        if (!state.isPressed) {\n          return;\n        }\n\n        var touch = $ffc54430b1dbeee65879852feaaff07d$var$getTouchById(e.nativeEvent, state.activePointerId);\n\n        if (touch && $ffc54430b1dbeee65879852feaaff07d$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, 'touch');\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, 'touch', false);\n        }\n      };\n\n      pressProps.onTouchEnd = function (e) {\n        e.stopPropagation();\n\n        if (!state.isPressed) {\n          return;\n        }\n\n        var touch = $ffc54430b1dbeee65879852feaaff07d$var$getTouchById(e.nativeEvent, state.activePointerId);\n\n        if (touch && $ffc54430b1dbeee65879852feaaff07d$var$isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, 'touch');\n          triggerPressEnd(e, 'touch');\n        } else if (state.isOverTarget) {\n          triggerPressEnd(e, 'touch', false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        restoreTextSelection();\n        removeGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchCancel = function (e) {\n        e.stopPropagation();\n\n        if (state.isPressed) {\n          cancelTouchEvent(e, 'touch');\n        }\n      };\n\n      var onScroll = function onScroll(e) {\n        if (state.isPressed && e.target.contains(state.target)) {\n          cancelTouchEvent({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false\n          }, 'touch');\n        }\n      };\n\n      var cancelTouchEvent = function cancelTouchEvent(e, pointerType) {\n        if (state.isOverTarget) {\n          triggerPressEnd(e, pointerType, false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        restoreTextSelection();\n        window.removeEventListener('scroll', onScroll, true);\n      };\n    }\n\n    return pressProps;\n  }, [onPress, onPressStart, onPressEnd, onPressChange, onPressUp, isDisabled]); // eslint-disable-next-line arrow-body-style\n\n  useEffect(function () {\n    return function () {\n      globalListeners.current.forEach(function (value, key) {\n        removeGlobalListener(value.eventTarget, value.type, key, value.options);\n      });\n    };\n  }, [globalListeners.current]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction $ffc54430b1dbeee65879852feaaff07d$var$isHTMLAnchorLink(target) {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction $ffc54430b1dbeee65879852feaaff07d$var$isValidKeyboardEvent(event) {\n  var key = event.key,\n      target = event.target;\n  var element = target;\n  var tagName = element.tagName,\n      isContentEditable = element.isContentEditable;\n  var role = element.getAttribute('role'); // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n\n  return (key === 'Enter' || key === ' ' || key === 'Spacebar') && tagName !== 'INPUT' && tagName !== 'TEXTAREA' && isContentEditable !== true && ( // A link with a valid href should be handled natively,\n  // unless it also has role='button' and was triggered using Space.\n  !$ffc54430b1dbeee65879852feaaff07d$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') && // An element with role='link' should only trigger with Enter key\n  !(role === 'link' && key !== 'Enter');\n}\n\nfunction $ffc54430b1dbeee65879852feaaff07d$var$getTouchFromEvent(event) {\n  var targetTouches = event.targetTouches;\n\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n\n  return null;\n}\n\nfunction $ffc54430b1dbeee65879852feaaff07d$var$getTouchById(event, pointerId) {\n  var changedTouches = event.changedTouches;\n\n  for (var i = 0; i < changedTouches.length; i++) {\n    var touch = changedTouches[i];\n\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n\n  return null;\n}\n\nfunction $ffc54430b1dbeee65879852feaaff07d$var$createEvent(target, e) {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey\n  };\n}\n\nfunction $ffc54430b1dbeee65879852feaaff07d$var$isOverTarget(point, target) {\n  var rect = target.getBoundingClientRect();\n  return (point.clientX || 0) >= (rect.left || 0) && (point.clientX || 0) <= (rect.right || 0) && (point.clientY || 0) >= (rect.top || 0) && (point.clientY || 0) <= (rect.bottom || 0);\n}\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\n\n\nexport function useInteractOutside(props) {\n  var ref = props.ref,\n      onInteractOutside = props.onInteractOutside;\n  var stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false\n  });\n  var state = stateRef.current;\n  useEffect(function () {\n    var onPointerDown = function onPointerDown(e) {\n      if ($e415bb64ab27cb8fbfac2f417412022f$var$isValidEvent(e, ref)) {\n        state.isPointerDown = true;\n      }\n    }; // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n\n\n    if (typeof PointerEvent !== 'undefined') {\n      var onPointerUp = function onPointerUp(e) {\n        if (state.isPointerDown && onInteractOutside && $e415bb64ab27cb8fbfac2f417412022f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('pointerdown', onPointerDown, false);\n      document.addEventListener('pointerup', onPointerUp, false);\n      return function () {\n        document.removeEventListener('pointerdown', onPointerDown, false);\n        document.removeEventListener('pointerup', onPointerUp, false);\n      };\n    } else {\n      var onMouseUp = function onMouseUp(e) {\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n        } else if (state.isPointerDown && onInteractOutside && $e415bb64ab27cb8fbfac2f417412022f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          onInteractOutside(e);\n        }\n      };\n\n      var onTouchEnd = function onTouchEnd(e) {\n        state.ignoreEmulatedMouseEvents = true;\n\n        if (onInteractOutside && state.isPointerDown && $e415bb64ab27cb8fbfac2f417412022f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, false);\n      document.addEventListener('mouseup', onMouseUp, false);\n      document.addEventListener('touchstart', onPointerDown, false);\n      document.addEventListener('touchend', onTouchEnd, false);\n      return function () {\n        document.removeEventListener('mousedown', onPointerDown, false);\n        document.removeEventListener('mouseup', onMouseUp, false);\n        document.removeEventListener('touchstart', onPointerDown, false);\n        document.removeEventListener('touchend', onTouchEnd, false);\n      };\n    }\n  }, [onInteractOutside, ref, state.ignoreEmulatedMouseEvents, state.isPointerDown]);\n}\n\nfunction $e415bb64ab27cb8fbfac2f417412022f$var$isValidEvent(event, ref) {\n  if (event.button > 0) {\n    return false;\n  } // if the event target is no longer in the document\n\n\n  if (event.target) {\n    var ownerDocument = event.target.ownerDocument;\n\n    if (!ownerDocument || !ownerDocument.body.contains(event.target)) {\n      return false;\n    }\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n\nexport var Pressable = _react.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      props = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(_ref, [\"children\"]);\n\n  ref = ref || useRef();\n\n  var _usePress = usePress(_babelRuntimeHelpersEsmExtends({}, props, {\n    ref: ref\n  })),\n      pressProps = _usePress.pressProps;\n\n  var child = _react.Children.only(children);\n\n  return _react.cloneElement(child, // @ts-ignore\n  _babelRuntimeHelpersEsmExtends({\n    ref: ref\n  }, mergeProps(child.props, pressProps)));\n});\nexport var PressResponder = _react.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      props = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(_ref, [\"children\"]);\n\n  var isRegistered = useRef(false);\n  var prevContext = useContext($a3ff51240de6f955c79cf17a88e349$export$PressResponderContext);\n  var context = mergeProps(prevContext || {}, _babelRuntimeHelpersEsmExtends({}, props, {\n    ref: ref,\n    register: function register() {\n      isRegistered.current = true;\n\n      if (prevContext) {\n        prevContext.register();\n      }\n    }\n  }));\n  useEffect(function () {\n    if (!isRegistered.current) {\n      console.warn('A PressResponder was rendered without a pressable child. ' + 'Either call the usePress hook, or wrap your DOM node with <Pressable> component.');\n    }\n  }, []);\n  return /*#__PURE__*/_react.createElement($a3ff51240de6f955c79cf17a88e349$export$PressResponderContext.Provider, {\n    value: context\n  }, children);\n});\n/**\n * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.\n */\n\nfunction $dc0d75166de722fbf58eb6c3552$export$createEventHandler(handler) {\n  if (!handler) {\n    return;\n  }\n\n  var shouldStopPropagation = true;\n  return function (e) {\n    var event = _babelRuntimeHelpersEsmExtends({}, e, {\n      preventDefault: function preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented: function isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation: function stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation: function continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    });\n\n    handler(event);\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n  };\n}\n/**\n * Handles keyboard interactions for a focusable element.\n */\n\n\nexport function useKeyboard(props) {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: $dc0d75166de722fbf58eb6c3552$export$createEventHandler(props.onKeyDown),\n      onKeyUp: $dc0d75166de722fbf58eb6c3552$export$createEventHandler(props.onKeyUp)\n    }\n  };\n} // NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\n/**\n * Handles focus events for the immediate target.\n * Focus events on child elements will be ignored.\n */\n\nexport function useFocus(props) {\n  if (props.isDisabled) {\n    return {\n      focusProps: {}\n    };\n  }\n\n  var onFocus, onBlur;\n\n  if (props.onFocus || props.onFocusChange) {\n    onFocus = function onFocus(e) {\n      if (e.target === e.currentTarget) {\n        if (props.onFocus) {\n          props.onFocus(e);\n        }\n\n        if (props.onFocusChange) {\n          props.onFocusChange(true);\n        }\n      }\n    };\n  }\n\n  if (props.onBlur || props.onFocusChange) {\n    onBlur = function onBlur(e) {\n      if (e.target === e.currentTarget) {\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n\n        if (props.onFocusChange) {\n          props.onFocusChange(false);\n        }\n      }\n    };\n  }\n\n  return {\n    focusProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\n/**\n * Handles focus events for the target and its descendants.\n */\n\nexport function useFocusWithin(props) {\n  var state = useRef({\n    isFocusWithin: false\n  }).current;\n\n  if (props.isDisabled) {\n    return {\n      focusWithinProps: {}\n    };\n  }\n\n  var onFocus = function onFocus(e) {\n    if (!state.isFocusWithin) {\n      if (props.onFocusWithin) {\n        props.onFocusWithin(e);\n      }\n\n      if (props.onFocusWithinChange) {\n        props.onFocusWithinChange(true);\n      }\n\n      state.isFocusWithin = true;\n    }\n  };\n\n  var onBlur = function onBlur(e) {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n      if (props.onBlurWithin) {\n        props.onBlurWithin(e);\n      }\n\n      if (props.onFocusWithinChange) {\n        props.onFocusWithinChange(false);\n      }\n\n      state.isFocusWithin = false;\n    }\n  };\n\n  return {\n    focusWithinProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\nvar $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality = null;\nvar $d01f69bb2ab5f70dfd0005370a2a2cbc$var$changeHandlers = new Set();\nvar $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasSetupGlobalListeners = false;\nvar $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus = false;\nvar $d01f69bb2ab5f70dfd0005370a2a2cbc$var$isMac = typeof window !== 'undefined' && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false; // Only Tab or Esc keys will make focus visible on text input elements\n\nvar $d01f69bb2ab5f70dfd0005370a2a2cbc$var$FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction $d01f69bb2ab5f70dfd0005370a2a2cbc$var$triggerChangeHandlers(modality, e) {\n  var _iterator = _createForOfIteratorHelper($d01f69bb2ab5f70dfd0005370a2a2cbc$var$changeHandlers),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var handler = _step.value;\n      handler(modality, e);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\n\n\nfunction $d01f69bb2ab5f70dfd0005370a2a2cbc$var$isValidKey(e) {\n  return !(e.metaKey || !$d01f69bb2ab5f70dfd0005370a2a2cbc$var$isMac && e.altKey || e.ctrlKey);\n}\n\nfunction $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleKeyboardEvent(e) {\n  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus = true;\n\n  if ($d01f69bb2ab5f70dfd0005370a2a2cbc$var$isValidKey(e)) {\n    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality = 'keyboard';\n    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handlePointerEvent(e) {\n  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality = 'pointer';\n\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus = true;\n    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleClickEvent(e) {\n  if ($f67ef9f1b8ed09b4b00fd0840cd8b94b$export$isVirtualClick(e)) {\n    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus = true;\n    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality = 'virtual';\n  }\n}\n\nfunction $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleFocusEvent(e) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) {\n    return;\n  } // If a focus event occurs without a preceding keyboard or pointer event, switch to keyboard modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n\n\n  if (!$d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus) {\n    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality = 'keyboard';\n    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$triggerChangeHandlers('keyboard', e);\n  }\n\n  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus = false;\n}\n\nfunction $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus = false;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\n\n\nfunction $d01f69bb2ab5f70dfd0005370a2a2cbc$var$setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasSetupGlobalListeners) {\n    return;\n  } // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n\n\n  var focus = HTMLElement.prototype.focus;\n\n  HTMLElement.prototype.focus = function () {\n    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleKeyboardEvent, true);\n  document.addEventListener('keyup', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleKeyboardEvent, true);\n  document.addEventListener('click', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleClickEvent, true); // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n\n  window.addEventListener('focus', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleFocusEvent, true);\n  window.addEventListener('blur', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handlePointerEvent, true);\n    document.addEventListener('pointermove', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handlePointerEvent, true);\n    document.addEventListener('pointerup', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handlePointerEvent, true);\n    document.addEventListener('mousemove', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handlePointerEvent, true);\n    document.addEventListener('mouseup', $d01f69bb2ab5f70dfd0005370a2a2cbc$var$handlePointerEvent, true);\n  }\n\n  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$hasSetupGlobalListeners = true;\n}\n/**\n * If true, keyboard focus is visible.\n */\n\n\nexport function isFocusVisible() {\n  return $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality !== 'pointer';\n}\nexport function getInteractionModality() {\n  return $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality;\n}\nexport function setInteractionModality(modality) {\n  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality = modality;\n  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$triggerChangeHandlers(modality, null);\n}\n/**\n * Keeps state of the current modality.\n */\n\nexport function useInteractionModality() {\n  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$setupGlobalFocusEvents();\n\n  var _useState3 = useState($d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modality = _useState4[0],\n      setModality = _useState4[1];\n\n  useEffect(function () {\n    var handler = function handler() {\n      setModality($d01f69bb2ab5f70dfd0005370a2a2cbc$var$currentModality);\n    };\n\n    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$changeHandlers.add(handler);\n    return function () {\n      $d01f69bb2ab5f70dfd0005370a2a2cbc$var$changeHandlers.delete(handler);\n    };\n  }, []);\n  return modality;\n}\n/**\n * Manages focus visible state for the page, and subscribes individual components for updates.\n */\n\nexport function useFocusVisible(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  $d01f69bb2ab5f70dfd0005370a2a2cbc$var$setupGlobalFocusEvents();\n  var _props = props,\n      isTextInput = _props.isTextInput,\n      autoFocus = _props.autoFocus;\n\n  var _useState5 = useState(autoFocus || isFocusVisible()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isFocusVisibleState = _useState6[0],\n      setFocusVisible = _useState6[1];\n\n  useEffect(function () {\n    var handler = function handler(modality, e) {\n      // If this is a text input component, don't update the focus visible style when\n      // typing except for when the Tab and Escape keys are pressed.\n      if (isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !$d01f69bb2ab5f70dfd0005370a2a2cbc$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]) {\n        return;\n      }\n\n      setFocusVisible(isFocusVisible());\n    };\n\n    $d01f69bb2ab5f70dfd0005370a2a2cbc$var$changeHandlers.add(handler);\n    return function () {\n      $d01f69bb2ab5f70dfd0005370a2a2cbc$var$changeHandlers.delete(handler);\n    };\n  }, [isTextInput]);\n  return {\n    isFocusVisible: isFocusVisibleState\n  };\n} // iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\n\nvar $b1a784c66b81d90efa4f74e05b$var$globalIgnoreEmulatedMouseEvents = false;\nvar $b1a784c66b81d90efa4f74e05b$var$hoverCount = 0;\n\nfunction $b1a784c66b81d90efa4f74e05b$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $b1a784c66b81d90efa4f74e05b$var$globalIgnoreEmulatedMouseEvents = true; // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n\n  setTimeout(function () {\n    $b1a784c66b81d90efa4f74e05b$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction $b1a784c66b81d90efa4f74e05b$var$handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') {\n    $b1a784c66b81d90efa4f74e05b$var$setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction $b1a784c66b81d90efa4f74e05b$var$setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerup', $b1a784c66b81d90efa4f74e05b$var$handleGlobalPointerEvent);\n  } else {\n    document.addEventListener('touchend', $b1a784c66b81d90efa4f74e05b$var$setGlobalIgnoreEmulatedMouseEvents);\n  }\n\n  $b1a784c66b81d90efa4f74e05b$var$hoverCount++;\n  return function () {\n    $b1a784c66b81d90efa4f74e05b$var$hoverCount--;\n\n    if ($b1a784c66b81d90efa4f74e05b$var$hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', $b1a784c66b81d90efa4f74e05b$var$handleGlobalPointerEvent);\n    } else {\n      document.removeEventListener('touchend', $b1a784c66b81d90efa4f74e05b$var$setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\n\n\nexport function useHover(props) {\n  var onHoverStart = props.onHoverStart,\n      onHoverChange = props.onHoverChange,\n      onHoverEnd = props.onHoverEnd,\n      isDisabled = props.isDisabled;\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isHovered = _useState8[0],\n      setHovered = _useState8[1];\n\n  var state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false\n  }).current;\n  useEffect($b1a784c66b81d90efa4f74e05b$var$setupGlobalTouchEvents, []);\n  var hoverProps = useMemo(function () {\n    var triggerHoverStart = function triggerHoverStart(event, pointerType) {\n      if (isDisabled || pointerType === 'touch' || state.isHovered) {\n        return;\n      }\n\n      state.isHovered = true;\n      var target = event.target;\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target: target,\n          pointerType: pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    var triggerHoverEnd = function triggerHoverEnd(event, pointerType) {\n      if (isDisabled || pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n      var target = event.target;\n\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target: target,\n          pointerType: pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    var hoverProps = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = function (e) {\n        if ($b1a784c66b81d90efa4f74e05b$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = function (e) {\n        triggerHoverEnd(e, e.pointerType);\n      };\n    } else {\n      hoverProps.onTouchStart = function () {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = function (e) {\n        if (!state.ignoreEmulatedMouseEvents && !$b1a784c66b81d90efa4f74e05b$var$globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = function (e) {\n        triggerHoverEnd(e, 'mouse');\n      };\n    }\n\n    return hoverProps;\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n  return {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/interactions/src/utils.ts","packages/@react-aria/interactions/src/context.ts","packages/@react-aria/interactions/src/usePress.ts","packages/@react-aria/interactions/src/useInteractOutside.ts","packages/@react-aria/interactions/src/Pressable.tsx","packages/@react-aria/interactions/src/PressResponder.tsx","packages/@react-aria/interactions/src/createEventHandler.ts","packages/@react-aria/interactions/src/useKeyboard.ts","packages/@react-aria/interactions/src/useFocus.ts","packages/@react-aria/interactions/src/useFocusWithin.ts","packages/@react-aria/interactions/src/useFocusVisible.ts","packages/@react-aria/interactions/src/useHover.ts"],"names":["event","PressResponderContext","React","context","useContext","register","props","mergeProps","useEffect","isPressed","isPressedProp","usePressResponderContext","useState","ref","useRef","ignoreEmulatedMouseEvents","ignoreClickAfterPress","activePointerId","target","isOverTarget","globalListeners","addGlobalListener","useCallback","type","eventTarget","options","removeGlobalListener","pressProps","useMemo","state","triggerPressStart","onPressStart","pointerType","originalEvent","shiftKey","metaKey","ctrlKey","onPressChange","setPressed","triggerPressEnd","wasPressed","onPressEnd","onPress","triggerPressUp","onPressUp","onKeyDown","isValidKeyboardEvent","e","onKeyUp","createEvent","onClick","focusWithoutScrolling","isHTMLAnchorLink","disableTextSelection","document","restoreTextSelection","setTimeout","runAfterTransition","unbindEvents","onPointerMove","onPointerUp","onPointerCancel","onMouseUp","touch","getTouchFromEvent","getTouchById","cancelTouchEvent","onScroll","currentTarget","window","value","element","isContentEditable","role","key","tagName","targetTouches","changedTouches","i","rect","point","onInteractOutside","stateRef","isPointerDown","onPointerDown","isValidEvent","onTouchEnd","ownerDocument","Pressable","children","child","PressResponder","isRegistered","prevContext","console","shouldStopPropagation","preventDefault","isDefaultPrevented","stopPropagation","continuePropagation","handler","keyboardProps","focusProps","onFocus","onBlur","isFocusWithin","focusWithinProps","currentModality","changeHandlers","hasSetupGlobalListeners","hasEventBeforeFocus","isMac","FOCUS_VISIBLE_INPUT_KEYS","Tab","Escape","isValidKey","triggerChangeHandlers","focus","HTMLElement","setupGlobalFocusEvents","setModality","autoFocus","isFocusVisible","isTextInput","modality","setFocusVisible","isFocusVisibleState","globalIgnoreEmulatedMouseEvents","hoverCount","setGlobalIgnoreEmulatedMouseEvents","isDisabled","isHovered","hoverProps","triggerHoverStart","onHoverStart","onHoverChange","setHovered","triggerHoverEnd","onHoverEnd"],"mappings":";;;;;;AAAA;;;;;;;;;;;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO,SAAA,uDAAA,CAAA,KAAA,EAAmE;AACxE;AACA,MAAKA,KAAD,CAAA,cAACA,KAAD,CAACA,IAAsCA,KAAK,CAAhD,SAAA,EAA4D;AAC1D,WAAA,IAAA;AACD;;AAED,SAAOA,KAAK,CAALA,MAAAA,KAAAA,CAAAA,IAAsB,CAAEA,KAAD,CAA9B,WAAA;AACD;;ACVM,IAAMC,4DAAqB,GAAGC,MAAK,CAALA,aAAAA,CAA9B,IAA8BA,CAA9B;;AACPD,4DAAqB,CAArBA,WAAAA,GAAAA,uBAAAA;;ACsCA,SAAA,8DAAA,CAAA,KAAA,EAAyE;AACvE;AACA,MAAIE,OAAO,GAAGC,UAAU,CAAxB,4DAAwB,CAAxB;;AACA,MAAA,OAAA,EAAa;AACP,QAACC,QAAD,GAAJ,OAAI,CAACA,QAAD;AAAA,QAAJ,YAAI,GAAJ,mDAAA,CAAA,OAAA,EAAA,CAAA,UAAA,CAAA,CAAI;;AACJC,IAAAA,KAAK,GAAGC,UAAU,CAAA,YAAA,EAAlBD,KAAkB,CAAlBA;AACAD,IAAAA,QAAQ;AAN6D,GAAA,CASvE;;;AACAG,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIL,OAAO,IAAIA,OAAO,CAAtB,GAAA,EAA4B;AAC1BA,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,OAAAA,GAAsBG,KAAK,CAALA,GAAAA,CAAtBH,OAAAA;AACA,aAAO,YAAM;AACXA,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,OAAAA,GAAAA,IAAAA;AADF,OAAA;AAGD;AANM,GAAA,EAON,CAAA,OAAA,EAAUG,KAAK,CAPlBE,GAOG,CAPM,CAATA;AASA,SAAA,KAAA;AACD;AAED;;;;;;;OAKO,SAAA,QAAA,CAAA,KAAA,EAAsD;AAC3D,MAAA,qBAAA,GAWIG,8DAAwB,CAX5B,KAW4B,CAX5B;AAAA,MAAI,OAAJ,GAAA,qBAAA,CAAI,OAAJ;AAAA,MAAI,aAAJ,GAAA,qBAAA,CAAI,aAAJ;AAAA,MAAI,YAAJ,GAAA,qBAAA,CAAI,YAAJ;AAAA,MAAI,UAAJ,GAAA,qBAAA,CAAI,UAAJ;AAAA,MAAI,SAAJ,GAAA,qBAAA,CAAI,SAAJ;AAAA,MAAI,UAAJ,GAAA,qBAAA,CAAI,UAAJ;AAAA,MAOaD,aAPb,GAAA,qBAAA,CAOED,SAPF;AAAA,MAAA,QAAA,GAAA,mDAAA,CAAA,qBAAA,EAAA,CAAA,SAAA,EAAA,eAAA,EAAA,cAAA,EAAA,YAAA,EAAA,WAAA,EAAA,YAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA;;AAD2D,kBAc7BG,QAAQ,CAAtC,KAAsC,CAdqB;AAAA;AAAA,MAcvD,SAduD;AAAA,MAcvD,UAduD;;AAe3D,MAAIC,GAAG,GAAGC,MAAM,CAAa;AAC3BL,IAAAA,SAAS,EADkB,KAAA;AAE3BM,IAAAA,yBAAyB,EAFE,KAAA;AAG3BC,IAAAA,qBAAqB,EAHM,KAAA;AAI3BC,IAAAA,eAAe,EAJY,IAAA;AAK3BC,IAAAA,MAAM,EALqB,IAAA;AAM3BC,IAAAA,YAAY,EAAE;AANa,GAAb,CAAhB;AASA,MAAIC,eAAe,GAAGN,MAAM,CAAC,IAA7B,GAA6B,EAAD,CAA5B;AACA,MAAIO,iBAAiB,GAAGC,WAAW,CAAC,UAAA,WAAA,EAAA,IAAA,EAAA,QAAA,EAAA,OAAA,EAA0C;AAC5EF,IAAAA,eAAe,CAAfA,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAAsC;AAACG,MAAAA,IAAD,EAACA,IAAD;AAAOC,MAAAA,WAAP,EAAOA,WAAP;AAAoBC,MAAAA,OAAAA,EAAAA;AAApB,KAAtCL;AACAI,IAAAA,WAAW,CAAXA,gBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,OAAAA;AAFiC,GAAA,EAGhC,CAACJ,eAAe,CAHnB,OAGG,CAHgC,CAAnC;AAIA,MAAIM,oBAAoB,GAAGJ,WAAW,CAAC,UAAA,WAAA,EAAA,IAAA,EAAA,QAAA,EAAA,OAAA,EAA0C;AAC/EE,IAAAA,WAAW,CAAXA,mBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,OAAAA;AACAJ,IAAAA,eAAe,CAAfA,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA;AAFoC,GAAA,EAGnC,CAACA,eAAe,CAHnB,OAGG,CAHmC,CAAtC;AAKA,MAAIO,UAAU,GAAGC,OAAO,CAAC,YAAM;AAC7B,QAAIC,KAAK,GAAGhB,GAAG,CAAf,OAAA;;AACA,QAAIiB,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,aAAA,EAAA,WAAA,EAAwD;AAC9E,UAAA,UAAA,EAAgB;AACd;AACD;;AAED,UAAA,YAAA,EAAkB;AAChBC,QAAAA,YAAY,CAAC;AACXR,UAAAA,IAAI,EADO,YAAA;AAEXS,UAAAA,WAFW,EAEXA,WAFW;AAGXd,UAAAA,MAAM,EAAEe,aAAa,CAHV,aAAA;AAIXC,UAAAA,QAAQ,EAAED,aAAa,CAJZ,QAAA;AAKXE,UAAAA,OAAO,EAAEF,aAAa,CALX,OAAA;AAMXG,UAAAA,OAAO,EAAEH,aAAa,CAACG;AANZ,SAAD,CAAZL;AAQD;;AAED,UAAA,aAAA,EAAmB;AACjBM,QAAAA,aAAa,CAAbA,IAAa,CAAbA;AACD;;AAEDC,MAAAA,UAAU,CAAVA,IAAU,CAAVA;AApBF,KAAA;;AAuBA,QAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,aAAA,EAAA,WAAA,EAAA,UAAA,EAA2E;AAAA,UAAtBC,UAAsB,KAAA,KAAA,CAAA,EAAA;AAAtBA,QAAAA,UAAsB,GAAT,IAAbA;AAAsB;;AAC/F,UAAA,UAAA,EAAgB;AACd;AACD;;AAEDX,MAAAA,KAAK,CAALA,qBAAAA,GAAAA,IAAAA;;AAEA,UAAA,UAAA,EAAgB;AACdY,QAAAA,UAAU,CAAC;AACTlB,UAAAA,IAAI,EADK,UAAA;AAETS,UAAAA,WAFS,EAETA,WAFS;AAGTd,UAAAA,MAAM,EAAEe,aAAa,CAHZ,aAAA;AAITC,UAAAA,QAAQ,EAAED,aAAa,CAJd,QAAA;AAKTE,UAAAA,OAAO,EAAEF,aAAa,CALb,OAAA;AAMTG,UAAAA,OAAO,EAAEH,aAAa,CAACG;AANd,SAAD,CAAVK;AAQD;;AAED,UAAA,aAAA,EAAmB;AACjBJ,QAAAA,aAAa,CAAbA,KAAa,CAAbA;AACD;;AAEDC,MAAAA,UAAU,CAAVA,KAAU,CAAVA;;AAEA,UAAII,OAAO,IAAX,UAAA,EAA2B;AACzBA,QAAAA,OAAO,CAAC;AACNnB,UAAAA,IAAI,EADE,OAAA;AAENS,UAAAA,WAFM,EAENA,WAFM;AAGNd,UAAAA,MAAM,EAAEe,aAAa,CAHf,aAAA;AAINC,UAAAA,QAAQ,EAAED,aAAa,CAJjB,QAAA;AAKNE,UAAAA,OAAO,EAAEF,aAAa,CALhB,OAAA;AAMNG,UAAAA,OAAO,EAAEH,aAAa,CAACG;AANjB,SAAD,CAAPM;AAQD;AAjCH,KAAA;;AAoCA,QAAIC,cAAc,GAAG,SAAjBA,cAAiB,CAAA,aAAA,EAAA,WAAA,EAAwD;AAC3E,UAAA,UAAA,EAAgB;AACd;AACD;;AAED,UAAA,SAAA,EAAe;AACbC,QAAAA,SAAS,CAAC;AACRrB,UAAAA,IAAI,EADI,SAAA;AAERS,UAAAA,WAFQ,EAERA,WAFQ;AAGRd,UAAAA,MAAM,EAAEe,aAAa,CAHb,aAAA;AAIRC,UAAAA,QAAQ,EAAED,aAAa,CAJf,QAAA;AAKRE,UAAAA,OAAO,EAAEF,aAAa,CALd,OAAA;AAMRG,UAAAA,OAAO,EAAEH,aAAa,CAACG;AANf,SAAD,CAATQ;AAQD;AAdH,KAAA;;AAiBA,QAAIjB,UAAuC,GAAG;AAC5CkB,MAAAA,SAD4C,qBACnC,CADmC,EAC/B;AACX,YAAIC,0DAAoB,CAACC,CAAC,CAA1B,WAAwB,CAAxB,EAAyC;AACvCA,UAAAA,CAAC,CAADA,cAAAA;AACAA,UAAAA,CAAC,CAFsC,eAEvCA,GAFuC,CAKvC;AACA;AACA;;AACA,cAAI,CAAClB,KAAK,CAAN,SAAA,IAAoB,CAACkB,CAAC,CAA1B,MAAA,EAAmC;AACjClB,YAAAA,KAAK,CAALA,MAAAA,GAAekB,CAAC,CAAhBlB,aAAAA;AACAA,YAAAA,KAAK,CAALA,SAAAA,GAAAA,IAAAA;AACAC,YAAAA,iBAAiB,CAAA,CAAA,EAHgB,UAGhB,CAAjBA,CAHiC,CAKjC;AACA;;AACAT,YAAAA,iBAAiB,CAAA,QAAA,EAAA,OAAA,EAAA,OAAA,EAAjBA,KAAiB,CAAjBA;AACD;AACF;AAnByC,OAAA;AAqB5C2B,MAAAA,OArB4C,mBAqBrC,CArBqC,EAqBjC;AACT,YAAIF,0DAAoB,CAACC,CAAC,CAAtBD,WAAoB,CAApBA,IAAuC,CAACC,CAAC,CAA7C,MAAA,EAAsD;AACpDJ,UAAAA,cAAc,CAACM,iDAAW,CAACpB,KAAK,CAAN,MAAA,EAAZ,CAAY,CAAZ,EAAdc,UAAc,CAAdA;AACD;AAxByC,OAAA;AA0B5CO,MAAAA,OA1B4C,mBA0BrC,CA1BqC,EA0BjC;AACT,YAAIH,CAAC,IAAIA,CAAC,CAADA,MAAAA,KAAT,CAAA,EAAyB;AACvBA,UAAAA,CAAC,CAADA,eAAAA;;AACA,cAAA,UAAA,EAAgB;AACdA,YAAAA,CAAC,CAADA,cAAAA;AAHqB,WAAA,CAMvB;AACA;;;AACA,cAAI,CAAClB,KAAK,CAAN,qBAAA,IAAgC,CAACA,KAAK,CAAtC,yBAAA,IAAoE,uDAAA,CAAekB,CAAC,CAAxF,WAAwE,CAAxE,EAAuG;AACrG;AACA,gBAAI,CAAJ,UAAA,EAAiB;AACfI,cAAAA,qBAAqB,CAACJ,CAAC,CAAvBI,aAAqB,CAArBA;AACD;;AAEDrB,YAAAA,iBAAiB,CAAA,CAAA,EAAjBA,SAAiB,CAAjBA;AACAa,YAAAA,cAAc,CAAA,CAAA,EAAdA,SAAc,CAAdA;AACAJ,YAAAA,eAAe,CAAA,CAAA,EAAfA,SAAe,CAAfA;AACD;;AAEDV,UAAAA,KAAK,CAALA,yBAAAA,GAAAA,KAAAA;AACAA,UAAAA,KAAK,CAALA,qBAAAA,GAAAA,KAAAA;AACD;AACF;AAjD2C,KAA9C;;AAoDA,QAAImB,OAAO,GAAID,SAAXC,OAAWD,CAAAA,CAAD,EAAsB;AAClC,UAAIlB,KAAK,CAALA,SAAAA,IAAmBiB,0DAAoB,CAA3C,CAA2C,CAA3C,EAAgD;AAC9CC,QAAAA,CAAC,CAADA,cAAAA;AACAA,QAAAA,CAAC,CAADA,eAAAA;AAEAlB,QAAAA,KAAK,CAALA,SAAAA,GAAAA,KAAAA;AACAU,QAAAA,eAAe,CAACU,iDAAW,CAACpB,KAAK,CAAN,MAAA,EAAZ,CAAY,CAAZ,EAAA,UAAA,EAA2CkB,CAAC,CAADA,MAAAA,KAAalB,KAAK,CAA5EU,MAAe,CAAfA;AACAb,QAAAA,oBAAoB,CAAA,QAAA,EAAA,OAAA,EAAA,OAAA,EAN0B,KAM1B,CAApBA,CAN8C,CAQ9C;AACA;;AACA,YAAIqB,CAAC,CAADA,MAAAA,KAAalB,KAAK,CAAlBkB,MAAAA,IAA6BK,sDAAgB,CAACvB,KAAK,CAAnDkB,MAA6C,CAA7CA,IAA+DlB,KAAK,CAALA,MAAAA,CAAAA,YAAAA,CAAAA,MAAAA,MAAnE,MAAA,EAAiH;AAC/GA,UAAAA,KAAK,CAALA,MAAAA,CAAAA,KAAAA;AACD;AACF;AAhJ0B,KAkI7B,CAlI6B,CAmJ7B;AACA;AACA;AACA;;;AACA,QAAIwB,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AAC/BxB,MAAAA,KAAK,CAALA,UAAAA,GAAmByB,QAAQ,CAARA,eAAAA,CAAAA,KAAAA,CAAnBzB,gBAAAA;AACAyB,MAAAA,QAAQ,CAARA,eAAAA,CAAAA,KAAAA,CAAAA,gBAAAA,GAAAA,MAAAA;AAFF,KAAA;;AAKA,QAAIC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AAC/B;AACA;AACAC,MAAAA,UAAU,CAAC,YAAM;AACf;AACA;AACAC,QAAAA,kBAAkB,CAAC,YAAM;AACvB;AACA,cAAI,CAAC5B,KAAK,CAAN,SAAA,IAAoByB,QAAQ,CAARA,eAAAA,CAAAA,KAAAA,CAAAA,gBAAAA,KAAxB,MAAA,EAAoF;AAClFA,YAAAA,QAAQ,CAARA,eAAAA,CAAAA,KAAAA,CAAAA,gBAAAA,GAAkDzB,KAAK,CAALA,UAAAA,IAAlDyB,EAAAA;AACAzB,YAAAA,KAAK,CAALA,UAAAA,GAAAA,IAAAA;AACD;AALH4B,SAAkB,CAAlBA;AAHQ,OAAA,EAAVD,GAAU,CAAVA;AAHF,KAAA;;AAgBA,QAAI,OAAA,YAAA,KAAJ,WAAA,EAAyC;AACvC7B,MAAAA,UAAU,CAAVA,aAAAA,GAA4BoB,UAAAA,CAAD,EAAO;AAChC;AACA,YAAIA,CAAC,CAADA,MAAAA,KAAJ,CAAA,EAAoB;AAClB;AAH8B,SAAA,CAMhC;AACA;;;AACAA,QAAAA,CAAC,CAADA,cAAAA;AACAA,QAAAA,CAAC,CAADA,eAAAA;;AACA,YAAI,CAAClB,KAAK,CAAV,SAAA,EAAsB;AACpBA,UAAAA,KAAK,CAALA,SAAAA,GAAAA,IAAAA;AACAA,UAAAA,KAAK,CAALA,YAAAA,GAAAA,IAAAA;AACAA,UAAAA,KAAK,CAALA,eAAAA,GAAwBkB,CAAC,CAAzBlB,SAAAA;AACAA,UAAAA,KAAK,CAALA,MAAAA,GAAekB,CAAC,CAAhBlB,aAAAA;;AAEA,cAAI,CAAJ,UAAA,EAAiB;AACfsB,YAAAA,qBAAqB,CAACJ,CAAC,CAAvBI,aAAqB,CAArBA;AACD;;AAEDE,UAAAA,oBAAoB;AACpBvB,UAAAA,iBAAiB,CAAA,CAAA,EAAIiB,CAAC,CAAtBjB,WAAiB,CAAjBA;AAEAT,UAAAA,iBAAiB,CAAA,QAAA,EAAA,aAAA,EAAA,aAAA,EAAjBA,KAAiB,CAAjBA;AACAA,UAAAA,iBAAiB,CAAA,QAAA,EAAA,WAAA,EAAA,WAAA,EAAjBA,KAAiB,CAAjBA;AACAA,UAAAA,iBAAiB,CAAA,QAAA,EAAA,eAAA,EAAA,eAAA,EAAjBA,KAAiB,CAAjBA;AACD;AA1BHM,OAAAA;;AA6BAA,MAAAA,UAAU,CAAVA,WAAAA,GAA0BoB,UAAAA,CAAD,EAAO;AAC9B,YAAIA,CAAC,CAADA,MAAAA,KAAJ,CAAA,EAAoB;AAClB;AACA;AACA;AACAA,UAAAA,CAAC,CAADA,cAAAA;AACD;AANHpB,OAAAA;;AASA,UAAI+B,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvBhC,QAAAA,oBAAoB,CAAA,QAAA,EAAA,aAAA,EAAA,aAAA,EAApBA,KAAoB,CAApBA;AACAA,QAAAA,oBAAoB,CAAA,QAAA,EAAA,WAAA,EAAA,WAAA,EAApBA,KAAoB,CAApBA;AACAA,QAAAA,oBAAoB,CAAA,QAAA,EAAA,eAAA,EAAA,eAAA,EAApBA,KAAoB,CAApBA;AAHF,OAAA;;AAMAC,MAAAA,UAAU,CAAVA,WAAAA,GAA0BoB,UAAAA,CAAD,EAAO;AAC9B;AACA;AACA;AACA,YAAIA,CAAC,CAADA,MAAAA,KAAAA,CAAAA,IAAkB5B,kDAAY,CAAA,CAAA,EAAI4B,CAAC,CAAvC,aAAkC,CAAlC,EAAwD;AACtDJ,UAAAA,cAAc,CAAA,CAAA,EAAII,CAAC,CAAnBJ,WAAc,CAAdA;AACD;AAnDoC,OA6CvChB,CA7CuC,CAsDvC;AACA;AACA;;;AACA,UAAIgC,aAAa,GAAIZ,SAAjBY,aAAiBZ,CAAAA,CAAD,EAAqB;AACvC,YAAIA,CAAC,CAADA,SAAAA,KAAgBlB,KAAK,CAAzB,eAAA,EAA2C;AACzC;AACD;;AAED,YAAIV,kDAAY,CAAA,CAAA,EAAIU,KAAK,CAAzB,MAAgB,CAAhB,EAAmC;AACjC,cAAI,CAACA,KAAK,CAAV,YAAA,EAAyB;AACvBA,YAAAA,KAAK,CAALA,YAAAA,GAAAA,IAAAA;AACAC,YAAAA,iBAAiB,CAACmB,iDAAW,CAACpB,KAAK,CAAN,MAAA,EAAZ,CAAY,CAAZ,EAA+BkB,CAAC,CAAjDjB,WAAiB,CAAjBA;AACD;AAJH,SAAA,MAKO,IAAID,KAAK,CAAT,YAAA,EAAwB;AAC7BA,UAAAA,KAAK,CAALA,YAAAA,GAAAA,KAAAA;AACAU,UAAAA,eAAe,CAACU,iDAAW,CAACpB,KAAK,CAAN,MAAA,EAAZ,CAAY,CAAZ,EAA+BkB,CAAC,CAAhC,WAAA,EAAfR,KAAe,CAAfA;AACD;AAbH,OAAA;;AAgBA,UAAIqB,WAAW,GAAIb,SAAfa,WAAeb,CAAAA,CAAD,EAAqB;AACrC,YAAIA,CAAC,CAADA,SAAAA,KAAgBlB,KAAK,CAArBkB,eAAAA,IAAyClB,KAAK,CAA9CkB,SAAAA,IAA4DA,CAAC,CAADA,MAAAA,KAAhE,CAAA,EAAgF;AAC9E,cAAI5B,kDAAY,CAAA,CAAA,EAAIU,KAAK,CAAzB,MAAgB,CAAhB,EAAmC;AACjCU,YAAAA,eAAe,CAACU,iDAAW,CAACpB,KAAK,CAAN,MAAA,EAAZ,CAAY,CAAZ,EAA+BkB,CAAC,CAA/CR,WAAe,CAAfA;AADF,WAAA,MAEO,IAAIV,KAAK,CAAT,YAAA,EAAwB;AAC7BU,YAAAA,eAAe,CAACU,iDAAW,CAACpB,KAAK,CAAN,MAAA,EAAZ,CAAY,CAAZ,EAA+BkB,CAAC,CAAhC,WAAA,EAAfR,KAAe,CAAfA;AACD;;AAEDV,UAAAA,KAAK,CAALA,SAAAA,GAAAA,KAAAA;AACAA,UAAAA,KAAK,CAALA,YAAAA,GAAAA,KAAAA;AACAA,UAAAA,KAAK,CAALA,eAAAA,GAAAA,IAAAA;AACA6B,UAAAA,YAAY;AACZH,UAAAA,oBAAoB;AACrB;AAbH,OAAA;;AAgBA,UAAIM,eAAe,GAAId,SAAnBc,eAAmBd,CAAAA,CAAD,EAAqB;AACzC,YAAIlB,KAAK,CAAT,SAAA,EAAqB;AACnB,cAAIA,KAAK,CAAT,YAAA,EAAwB;AACtBU,YAAAA,eAAe,CAACU,iDAAW,CAACpB,KAAK,CAAN,MAAA,EAAZ,CAAY,CAAZ,EAA+BkB,CAAC,CAAhC,WAAA,EAAfR,KAAe,CAAfA;AACD;;AACDV,UAAAA,KAAK,CAALA,SAAAA,GAAAA,KAAAA;AACAA,UAAAA,KAAK,CAALA,YAAAA,GAAAA,KAAAA;AACAA,UAAAA,KAAK,CAALA,eAAAA,GAAAA,IAAAA;AACA6B,UAAAA,YAAY;AACZH,UAAAA,oBAAoB;AACrB;AAVH,OAAA;AAzFF,KAAA,MAqGO;AACL5B,MAAAA,UAAU,CAAVA,WAAAA,GAA0BoB,UAAAA,CAAD,EAAO;AAC9B;AACA,YAAIA,CAAC,CAADA,MAAAA,KAAJ,CAAA,EAAoB;AAClB;AAH4B,SAAA,CAM9B;AACA;;;AACAA,QAAAA,CAAC,CAADA,cAAAA;AACAA,QAAAA,CAAC,CAADA,eAAAA;;AACA,YAAIlB,KAAK,CAAT,yBAAA,EAAqC;AACnC;AACD;;AAEDA,QAAAA,KAAK,CAALA,SAAAA,GAAAA,IAAAA;AACAA,QAAAA,KAAK,CAALA,YAAAA,GAAAA,IAAAA;AACAA,QAAAA,KAAK,CAALA,MAAAA,GAAekB,CAAC,CAAhBlB,aAAAA;;AAEA,YAAI,CAAJ,UAAA,EAAiB;AACfsB,UAAAA,qBAAqB,CAACJ,CAAC,CAAvBI,aAAqB,CAArBA;AACD;;AAEDrB,QAAAA,iBAAiB,CAAA,CAAA,EAAI,uDAAA,CAAeiB,CAAC,CAAhB,WAAA,CAAA,GAAA,SAAA,GAArBjB,OAAiB,CAAjBA;AAEAT,QAAAA,iBAAiB,CAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAjBA,KAAiB,CAAjBA;AAxBFM,OAAAA;;AA2BAA,MAAAA,UAAU,CAAVA,YAAAA,GAA2BoB,UAAAA,CAAD,EAAO;AAC/BA,QAAAA,CAAC,CAADA,eAAAA;;AACA,YAAIlB,KAAK,CAALA,SAAAA,IAAmB,CAACA,KAAK,CAA7B,yBAAA,EAAyD;AACvDA,UAAAA,KAAK,CAALA,YAAAA,GAAAA,IAAAA;AACAC,UAAAA,iBAAiB,CAAA,CAAA,EAAjBA,OAAiB,CAAjBA;AACD;AALHH,OAAAA;;AAQAA,MAAAA,UAAU,CAAVA,YAAAA,GAA2BoB,UAAAA,CAAD,EAAO;AAC/BA,QAAAA,CAAC,CAADA,eAAAA;;AACA,YAAIlB,KAAK,CAALA,SAAAA,IAAmB,CAACA,KAAK,CAA7B,yBAAA,EAAyD;AACvDA,UAAAA,KAAK,CAALA,YAAAA,GAAAA,KAAAA;AACAU,UAAAA,eAAe,CAAA,CAAA,EAAA,OAAA,EAAfA,KAAe,CAAfA;AACD;AALHZ,OAAAA;;AAQAA,MAAAA,UAAU,CAAVA,SAAAA,GAAwBoB,UAAAA,CAAD,EAAO;AAC5B,YAAI,CAAClB,KAAK,CAAN,yBAAA,IAAoCkB,CAAC,CAADA,MAAAA,KAAxC,CAAA,EAAwD;AACtDJ,UAAAA,cAAc,CAAA,CAAA,EAAI,uDAAA,CAAeI,CAAC,CAAhB,WAAA,CAAA,GAAA,SAAA,GAAlBJ,OAAc,CAAdA;AACD;AAHHhB,OAAAA;;AAMA,UAAImC,SAAS,GAAIf,SAAbe,SAAaf,CAAAA,CAAD,EAAmB;AACjC;AACA,YAAIA,CAAC,CAADA,MAAAA,KAAJ,CAAA,EAAoB;AAClB;AACD;;AAEDlB,QAAAA,KAAK,CAALA,SAAAA,GAAAA,KAAAA;AACAH,QAAAA,oBAAoB,CAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAApBA,KAAoB,CAApBA;;AAEA,YAAIG,KAAK,CAAT,yBAAA,EAAqC;AACnCA,UAAAA,KAAK,CAALA,yBAAAA,GAAAA,KAAAA;AACA;AACD;;AAED,YAAIG,WAAwB,GAAG,uDAAA,CAAA,CAAA,CAAA,GAAA,SAAA,GAA/B,OAAA;;AACA,YAAIb,kDAAY,CAAA,CAAA,EAAIU,KAAK,CAAzB,MAAgB,CAAhB,EAAmC;AACjCU,UAAAA,eAAe,CAACU,iDAAW,CAACpB,KAAK,CAAN,MAAA,EAAZ,CAAY,CAAZ,EAAfU,WAAe,CAAfA;AADF,SAAA,MAEO,IAAIV,KAAK,CAAT,YAAA,EAAwB;AAC7BU,UAAAA,eAAe,CAACU,iDAAW,CAACpB,KAAK,CAAN,MAAA,EAAZ,CAAY,CAAZ,EAAA,WAAA,EAAfU,KAAe,CAAfA;AACD;;AAEDV,QAAAA,KAAK,CAALA,YAAAA,GAAAA,KAAAA;AArBF,OAAA;;AAwBAF,MAAAA,UAAU,CAAVA,YAAAA,GAA2BoB,UAAAA,CAAD,EAAO;AAC/BA,QAAAA,CAAC,CAADA,eAAAA;AACA,YAAIgB,KAAK,GAAGC,uDAAiB,CAACjB,CAAC,CAA/B,WAA6B,CAA7B;;AACA,YAAI,CAAJ,KAAA,EAAY;AACV;AACD;;AACDlB,QAAAA,KAAK,CAALA,eAAAA,GAAwBkC,KAAK,CAA7BlC,UAAAA;AACAA,QAAAA,KAAK,CAALA,yBAAAA,GAAAA,IAAAA;AACAA,QAAAA,KAAK,CAALA,YAAAA,GAAAA,IAAAA;AACAA,QAAAA,KAAK,CAALA,SAAAA,GAAAA,IAAAA;AACAA,QAAAA,KAAK,CAALA,MAAAA,GAAekB,CAAC,CAVe,aAU/BlB,CAV+B,CAY/B;AACA;;AACA,YAAI,CAAJ,UAAA,EAAiB;AACfsB,UAAAA,qBAAqB,CAACJ,CAAC,CAAvBI,aAAqB,CAArBA;AACD;;AAEDE,QAAAA,oBAAoB;AACpBvB,QAAAA,iBAAiB,CAAA,CAAA,EAAjBA,OAAiB,CAAjBA;AAEAT,QAAAA,iBAAiB,CAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAAjBA,IAAiB,CAAjBA;AArBFM,OAAAA;;AAwBAA,MAAAA,UAAU,CAAVA,WAAAA,GAA0BoB,UAAAA,CAAD,EAAO;AAC9BA,QAAAA,CAAC,CAADA,eAAAA;;AACA,YAAI,CAAClB,KAAK,CAAV,SAAA,EAAsB;AACpB;AACD;;AAED,YAAIkC,KAAK,GAAGE,kDAAY,CAAClB,CAAC,CAAF,WAAA,EAAgBlB,KAAK,CAA7C,eAAwB,CAAxB;;AACA,YAAIkC,KAAK,IAAI5C,kDAAY,CAAA,KAAA,EAAQ4B,CAAC,CAAlC,aAAyB,CAAzB,EAAmD;AACjD,cAAI,CAAClB,KAAK,CAAV,YAAA,EAAyB;AACvBA,YAAAA,KAAK,CAALA,YAAAA,GAAAA,IAAAA;AACAC,YAAAA,iBAAiB,CAAA,CAAA,EAAjBA,OAAiB,CAAjBA;AACD;AAJH,SAAA,MAKO,IAAID,KAAK,CAAT,YAAA,EAAwB;AAC7BA,UAAAA,KAAK,CAALA,YAAAA,GAAAA,KAAAA;AACAU,UAAAA,eAAe,CAAA,CAAA,EAAA,OAAA,EAAfA,KAAe,CAAfA;AACD;AAfHZ,OAAAA;;AAkBAA,MAAAA,UAAU,CAAVA,UAAAA,GAAyBoB,UAAAA,CAAD,EAAO;AAC7BA,QAAAA,CAAC,CAADA,eAAAA;;AACA,YAAI,CAAClB,KAAK,CAAV,SAAA,EAAsB;AACpB;AACD;;AAED,YAAIkC,KAAK,GAAGE,kDAAY,CAAClB,CAAC,CAAF,WAAA,EAAgBlB,KAAK,CAA7C,eAAwB,CAAxB;;AACA,YAAIkC,KAAK,IAAI5C,kDAAY,CAAA,KAAA,EAAQ4B,CAAC,CAAlC,aAAyB,CAAzB,EAAmD;AACjDJ,UAAAA,cAAc,CAAA,CAAA,EAAdA,OAAc,CAAdA;AACAJ,UAAAA,eAAe,CAAA,CAAA,EAAfA,OAAe,CAAfA;AAFF,SAAA,MAGO,IAAIV,KAAK,CAAT,YAAA,EAAwB;AAC7BU,UAAAA,eAAe,CAAA,CAAA,EAAA,OAAA,EAAfA,KAAe,CAAfA;AACD;;AAEDV,QAAAA,KAAK,CAALA,SAAAA,GAAAA,KAAAA;AACAA,QAAAA,KAAK,CAALA,eAAAA,GAAAA,IAAAA;AACAA,QAAAA,KAAK,CAALA,YAAAA,GAAAA,KAAAA;AACAA,QAAAA,KAAK,CAALA,yBAAAA,GAAAA,IAAAA;AACA0B,QAAAA,oBAAoB;AACpB7B,QAAAA,oBAAoB,CAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAApBA,IAAoB,CAApBA;AAnBFC,OAAAA;;AAsBAA,MAAAA,UAAU,CAAVA,aAAAA,GAA4BoB,UAAAA,CAAD,EAAO;AAChCA,QAAAA,CAAC,CAADA,eAAAA;;AACA,YAAIlB,KAAK,CAAT,SAAA,EAAqB;AACnBqC,UAAAA,gBAAgB,CAAA,CAAA,EAAhBA,OAAgB,CAAhBA;AACD;AAJHvC,OAAAA;;AAOA,UAAIwC,QAAQ,GAAIpB,SAAZoB,QAAYpB,CAAAA,CAAD,EAAc;AAC3B,YAAIlB,KAAK,CAALA,SAAAA,IAAoBkB,CAAC,CAAF,MAACA,CAAD,QAACA,CAAkClB,KAAK,CAA/D,MAAwBkB,CAAxB,EAAyE;AACvEmB,UAAAA,gBAAgB,CAAC;AACfE,YAAAA,aAAa,EAAEvC,KAAK,CADL,MAAA;AAEfK,YAAAA,QAAQ,EAFO,KAAA;AAGfE,YAAAA,OAAO,EAHQ,KAAA;AAIfD,YAAAA,OAAO,EAAE;AAJM,WAAD,EAAhB+B,OAAgB,CAAhBA;AAMD;AARH,OAAA;;AAWA,UAAIA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,CAAA,EAAA,WAAA,EAA4C;AACjE,YAAIrC,KAAK,CAAT,YAAA,EAAwB;AACtBU,UAAAA,eAAe,CAAA,CAAA,EAAA,WAAA,EAAfA,KAAe,CAAfA;AACD;;AAEDV,QAAAA,KAAK,CAALA,SAAAA,GAAAA,KAAAA;AACAA,QAAAA,KAAK,CAALA,eAAAA,GAAAA,IAAAA;AACAA,QAAAA,KAAK,CAALA,YAAAA,GAAAA,KAAAA;AACA0B,QAAAA,oBAAoB;AACpBc,QAAAA,MAAM,CAANA,mBAAAA,CAAAA,QAAAA,EAAAA,QAAAA,EAAAA,IAAAA;AATF,OAAA;AAWD;;AAED,WAAA,UAAA;AA1bsB,GAAA,EA2brB,CAAA,OAAA,EAAA,YAAA,EAAA,UAAA,EAAA,aAAA,EAAA,SAAA,EA7dwD,UA6dxD,CA3bqB,CAAxB,CAlC2D,CA+d3D;;AACA7D,EAAAA,SAAS,CAAC,YAAM;AACd,WAAO,YAAM;AACXY,MAAAA,eAAe,CAAfA,OAAAA,CAAAA,OAAAA,CAAgC,UAAA,KAAA,EAAA,GAAA,EAAgB;AAC9CM,QAAAA,oBAAoB,CAAC4C,KAAK,CAAN,WAAA,EAAoBA,KAAK,CAAzB,IAAA,EAAA,GAAA,EAAqCA,KAAK,CAA9D5C,OAAoB,CAApBA;AADFN,OAAAA;AADF,KAAA;AADO,GAAA,EAMN,CAACA,eAAe,CANnBZ,OAMG,CANM,CAATA;AAQA,SAAO;AACLC,IAAAA,SAAS,EAAEC,aAAa,IADnB,SAAA;AAELiB,IAAAA,UAAU,EAAEpB,UAAU,CAAA,QAAA,EAAA,UAAA;AAFjB,GAAP;AAID;;AAED,SAAA,sDAAA,CAAA,MAAA,EAAwD;AACtD,SAAOW,MAAM,CAANA,OAAAA,KAAAA,GAAAA,IAA0BA,MAAM,CAANA,YAAAA,CAAjC,MAAiCA,CAAjC;AACD;;AAED,SAAA,0DAAA,CAAA,KAAA,EAA6D;AAAA,MACrD,GADqD,GAC3D,KAD2D,CACrD,GADqD;AAAA,MAC/CA,MAD+C,GAC3D,KAD2D,CAC/CA,MAD+C;AAE3D,MAAMqD,OAAO,GAAb,MAAA;AAF2D,MAGrD,OAHqD,GAG3D,OAH2D,CAGrD,OAHqD;AAAA,MAG3CC,iBAH2C,GAG3D,OAH2D,CAG3CA,iBAH2C;AAI3D,MAAMC,IAAI,GAAGF,OAAO,CAAPA,YAAAA,CAJ8C,MAI9CA,CAAb,CAJ2D,CAK3D;AACA;;AACA,SACE,CAACG,GAAG,KAAHA,OAAAA,IAAmBA,GAAG,KAAtBA,GAAAA,IAAkCA,GAAG,KAAtC,UAAA,KACCC,OAAO,KAAPA,OADD,IAEEA,OAAO,KADRA,UADD,IAGEH,iBAAiB,KAHnB,IAAA,MAIA;AACA;AACC,GAACpB,sDAAgB,CAAjB,OAAiB,CAAjB,IAA+BqB,IAAI,KAAJA,QAAAA,IAAqBC,GAAG,KANxD,OAAA,KAOA;AACA,IAAED,IAAI,KAAJA,MAAAA,IAAmBC,GAAG,KAT1B,OASE,CATF;AAWD;;AAED,SAAA,uDAAA,CAAA,KAAA,EAA4D;AAAA,MACnDE,aADmD,GAC1D,KAD0D,CACnDA,aADmD;;AAE1D,MAAIA,aAAa,CAAbA,MAAAA,GAAJ,CAAA,EAA8B;AAC5B,WAAOA,aAAa,CAApB,CAAoB,CAApB;AACD;;AACD,SAAA,IAAA;AACD;;AAED,SAAA,kDAAA,CAAA,KAAA,EAAA,SAAA,EAGgB;AACd,MAAMC,cAAc,GAAG7E,KAAK,CAA5B,cAAA;;AACA,OAAK,IAAI8E,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGD,cAAc,CAAlC,MAAA,EAA2CC,CAA3C,EAAA,EAAgD;AAC9C,QAAMf,KAAK,GAAGc,cAAc,CAA5B,CAA4B,CAA5B;;AACA,QAAId,KAAK,CAALA,UAAAA,KAAJ,SAAA,EAAoC;AAClC,aAAA,KAAA;AACD;AACF;;AACD,SAAA,IAAA;AACD;;AAED,SAAA,iDAAA,CAAA,MAAA,EAAA,CAAA,EAAmE;AACjE,SAAO;AACLK,IAAAA,aAAa,EADR,MAAA;AAELlC,IAAAA,QAAQ,EAAEa,CAAC,CAFN,QAAA;AAGLX,IAAAA,OAAO,EAAEW,CAAC,CAHL,OAAA;AAILZ,IAAAA,OAAO,EAAEY,CAAC,CAACZ;AAJN,GAAP;AAMD;;AAOD,SAAA,kDAAA,CAAA,KAAA,EAAA,MAAA,EAA8D;AAC5D,MAAI4C,IAAI,GAAG7D,MAAM,CAAjB,qBAAWA,EAAX;AACA,SAAO,CAAC8D,KAAK,CAALA,OAAAA,IAAD,CAAA,MAAyBD,IAAI,CAAJA,IAAAA,IAAzB,CAAA,KACL,CAACC,KAAK,CAALA,OAAAA,IAAD,CAAA,MAAyBD,IAAI,CAAJA,KAAAA,IADpB,CACL,CADK,IAEL,CAACC,KAAK,CAALA,OAAAA,IAAD,CAAA,MAAyBD,IAAI,CAAJA,GAAAA,IAFpB,CAEL,CAFK,IAGL,CAACC,KAAK,CAALA,OAAAA,IAAD,CAAA,MAAyBD,IAAI,CAAJA,MAAAA,IAH3B,CAGE,CAHF;AAID;AC9mBD;;;;;;OAIO,SAAA,kBAAA,CAAA,KAAA,EAAyD;AAAA,MAC1D,GAD0D,GAC9D,KAD8D,CAC1D,GAD0D;AAAA,MACpDE,iBADoD,GAC9D,KAD8D,CACpDA,iBADoD;AAE9D,MAAIC,QAAQ,GAAGpE,MAAM,CAAC;AACpBqE,IAAAA,aAAa,EADO,KAAA;AAEpBpE,IAAAA,yBAAyB,EAAE;AAFP,GAAD,CAArB;AAIA,MAAIc,KAAK,GAAGqD,QAAQ,CAApB,OAAA;AAEA1E,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI4E,aAAa,GAAIrC,SAAjBqC,aAAiBrC,CAAAA,CAAD,EAAO;AACzB,UAAIsC,kDAAY,CAAA,CAAA,EAAhB,GAAgB,CAAhB,EAA0B;AACxBxD,QAAAA,KAAK,CAALA,aAAAA,GAAAA,IAAAA;AACD;AAJW,KACd,CADc,CAOd;;;AACA,QAAI,OAAA,YAAA,KAAJ,WAAA,EAAyC;AACvC,UAAI+B,WAAW,GAAIb,SAAfa,WAAeb,CAAAA,CAAD,EAAO;AACvB,YAAIlB,KAAK,CAALA,aAAAA,IAAAA,iBAAAA,IAA4CwD,kDAAY,CAAA,CAAA,EAA5D,GAA4D,CAA5D,EAAsE;AACpExD,UAAAA,KAAK,CAALA,aAAAA,GAAAA,KAAAA;AACAoD,UAAAA,iBAAiB,CAAjBA,CAAiB,CAAjBA;AACD;AAJH,OAAA;;AAOA3B,MAAAA,QAAQ,CAARA,gBAAAA,CAAAA,aAAAA,EAAAA,aAAAA,EAAAA,KAAAA;AACAA,MAAAA,QAAQ,CAARA,gBAAAA,CAAAA,WAAAA,EAAAA,WAAAA,EAAAA,KAAAA;AAEA,aAAO,YAAM;AACXA,QAAAA,QAAQ,CAARA,mBAAAA,CAAAA,aAAAA,EAAAA,aAAAA,EAAAA,KAAAA;AACAA,QAAAA,QAAQ,CAARA,mBAAAA,CAAAA,WAAAA,EAAAA,WAAAA,EAAAA,KAAAA;AAFF,OAAA;AAXF,KAAA,MAeO;AACL,UAAIQ,SAAS,GAAIf,SAAbe,SAAaf,CAAAA,CAAD,EAAO;AACrB,YAAIlB,KAAK,CAAT,yBAAA,EAAqC;AACnCA,UAAAA,KAAK,CAALA,yBAAAA,GAAAA,KAAAA;AADF,SAAA,MAEO,IAAIA,KAAK,CAALA,aAAAA,IAAAA,iBAAAA,IAA4CwD,kDAAY,CAAA,CAAA,EAA5D,GAA4D,CAA5D,EAAsE;AAC3ExD,UAAAA,KAAK,CAALA,aAAAA,GAAAA,KAAAA;AACAoD,UAAAA,iBAAiB,CAAjBA,CAAiB,CAAjBA;AACD;AANH,OAAA;;AASA,UAAIK,UAAU,GAAIvC,SAAduC,UAAcvC,CAAAA,CAAD,EAAO;AACtBlB,QAAAA,KAAK,CAALA,yBAAAA,GAAAA,IAAAA;;AACA,YAAIoD,iBAAiB,IAAIpD,KAAK,CAA1BoD,aAAAA,IAA4CI,kDAAY,CAAA,CAAA,EAA5D,GAA4D,CAA5D,EAAsE;AACpExD,UAAAA,KAAK,CAALA,aAAAA,GAAAA,KAAAA;AACAoD,UAAAA,iBAAiB,CAAjBA,CAAiB,CAAjBA;AACD;AALH,OAAA;;AAQA3B,MAAAA,QAAQ,CAARA,gBAAAA,CAAAA,WAAAA,EAAAA,aAAAA,EAAAA,KAAAA;AACAA,MAAAA,QAAQ,CAARA,gBAAAA,CAAAA,SAAAA,EAAAA,SAAAA,EAAAA,KAAAA;AACAA,MAAAA,QAAQ,CAARA,gBAAAA,CAAAA,YAAAA,EAAAA,aAAAA,EAAAA,KAAAA;AACAA,MAAAA,QAAQ,CAARA,gBAAAA,CAAAA,UAAAA,EAAAA,UAAAA,EAAAA,KAAAA;AAEA,aAAO,YAAM;AACXA,QAAAA,QAAQ,CAARA,mBAAAA,CAAAA,WAAAA,EAAAA,aAAAA,EAAAA,KAAAA;AACAA,QAAAA,QAAQ,CAARA,mBAAAA,CAAAA,SAAAA,EAAAA,SAAAA,EAAAA,KAAAA;AACAA,QAAAA,QAAQ,CAARA,mBAAAA,CAAAA,YAAAA,EAAAA,aAAAA,EAAAA,KAAAA;AACAA,QAAAA,QAAQ,CAARA,mBAAAA,CAAAA,UAAAA,EAAAA,UAAAA,EAAAA,KAAAA;AAJF,OAAA;AAMD;AApDM,GAAA,EAqDN,CAAA,iBAAA,EAAA,GAAA,EAAyBzB,KAAK,CAA9B,yBAAA,EAA0DA,KAAK,CArDlErB,aAqDG,CArDM,CAATA;AAsDD;;AAED,SAAA,kDAAA,CAAA,KAAA,EAAA,GAAA,EAAkC;AAChC,MAAIR,KAAK,CAALA,MAAAA,GAAJ,CAAA,EAAsB;AACpB,WAAA,KAAA;AAF8B,GAAA,CAKhC;;;AACA,MAAIA,KAAK,CAAT,MAAA,EAAkB;AAChB,QAAMuF,aAAa,GAAGvF,KAAK,CAALA,MAAAA,CAAtB,aAAA;;AACA,QAAI,CAAA,aAAA,IAAkB,CAACuF,aAAa,CAAbA,IAAAA,CAAAA,QAAAA,CAA4BvF,KAAK,CAAxD,MAAuBuF,CAAvB,EAAkE;AAChE,aAAA,KAAA;AACD;AACF;;AAED,SAAO1E,GAAG,CAAHA,OAAAA,IAAe,CAACA,GAAG,CAAHA,OAAAA,CAAAA,QAAAA,CAAqBb,KAAK,CAAjD,MAAuBa,CAAvB;AACD;;OCtFM,IAAM2E,SAAS,GAAG,MAAK,CAAL,UAAA,CAAiB,UAAA,IAAA,EAAA,GAAA,EAAuE;AAAtE,MAACC,QAAD,GAAsE,IAAtE,CAACA,QAAD;AAAA,MAAcnF,KAAd,GAAsE,mDAAA,CAAA,IAAA,EAAA,CAAA,UAAA,CAAA,CAAtE;;AACzCO,EAAAA,GAAG,GAAGA,GAAG,IAAIC,MAAbD,EAAAA;;AAD+G,kBAE5F,QAAA,CAAA,8BAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAoBA,IAAAA,GAAAA,EAAAA;AAApB,GAAA,CAAA,CAF4F;AAAA,MAE1Gc,UAF0G,aAE1GA,UAF0G;;AAG/G,MAAI+D,KAAK,GAAGxF,MAAK,CAALA,QAAAA,CAAAA,IAAAA,CAAZ,QAAYA,CAAZ;;AACA,SAAO,MAAK,CAAL,YAAA,CAAA,KAAA,EAEL;AAFK,EAAA,8BAAA,CAAA;AAGJW,IAAAA,GAAAA,EAAAA;AAHI,GAAA,EAGIN,UAAU,CAACmF,KAAK,CAAN,KAAA,EAHrB,UAGqB,CAHd,CAAA,CAAP;AAJK,CAAkB,CAAlB;OCCA,IAAMC,cAAc,GAAG,MAAK,CAAL,UAAA,CAAiB,UAAA,IAAA,EAAA,GAAA,EAA4E;AAA3E,MAACF,QAAD,GAA2E,IAA3E,CAACA,QAAD;AAAA,MAAcnF,KAAd,GAA2E,mDAAA,CAAA,IAAA,EAAA,CAAA,UAAA,CAAA,CAA3E;;AAC9C,MAAIsF,YAAY,GAAG9E,MAAM,CAAzB,KAAyB,CAAzB;AACA,MAAI+E,WAAW,GAAGzF,UAAU,CAA5B,4DAA4B,CAA5B;AACA,MAAID,OAAO,GAAGI,UAAU,CAACsF,WAAW,IAAZ,EAAA,EAAA,8BAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEtBhF,IAAAA,GAFsB,EAEtBA,GAFsB;AAGtBR,IAAAA,QAHsB,sBAGX;AACTuF,MAAAA,YAAY,CAAZA,OAAAA,GAAAA,IAAAA;;AACA,UAAA,WAAA,EAAiB;AACfC,QAAAA,WAAW,CAAXA,QAAAA;AACD;AACF;AARqB,GAAA,CAAA,CAAxB;AAWArF,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACoF,YAAY,CAAjB,OAAA,EAA2B;AACzBE,MAAAA,OAAO,CAAPA,IAAAA,CACE,8DADFA,kFAAAA;AAID;AANM,GAAA,EAATtF,EAAS,CAATA;AASA,SAAA,aACE,MAAA,CAAA,aAAA,CAAA,4DAAA,CAAA,QAAA,EAAA;AAAgC,IAAA,KAAK,EAAEL;AAAvC,GAAA,EADF,QACE,CADF;AAvBK,CAAuB,CAAvB;ACNP;;;;AAGO,SAAA,sDAAA,CAAA,OAAA,EAA0G;AAC/G,MAAI,CAAJ,OAAA,EAAc;AACZ;AACD;;AAED,MAAI4F,qBAAqB,GAAzB,IAAA;AACA,SAAQhD,UAAAA,CAAD,EAAU;AACf,QAAI/C,KAAmB,GAAA,8BAAA,CAAA,EAAA,EAAA,CAAA,EAAA;AAErBgG,MAAAA,cAFqB,4BAEJ;AACfjD,QAAAA,CAAC,CAADA,cAAAA;AAHmB,OAAA;AAKrBkD,MAAAA,kBALqB,gCAKA;AACnB,eAAOlD,CAAC,CAAR,kBAAOA,EAAP;AANmB,OAAA;AAQrBmD,MAAAA,eARqB,6BAQH;AAChBJ,QAAAA,OAAO,CAAPA,KAAAA,CAAAA,sIAAAA;AATmB,OAAA;AAWrBK,MAAAA,mBAXqB,iCAWC;AACpBJ,QAAAA,qBAAqB,GAArBA,KAAAA;AACD;AAboB,KAAA,CAAvB;;AAgBAK,IAAAA,OAAO,CAAPA,KAAO,CAAPA;;AAEA,QAAA,qBAAA,EAA2B;AACzBrD,MAAAA,CAAC,CAADA,eAAAA;AACD;AArBH,GAAA;AAuBD;ACrBD;;;;;OAGO,SAAA,WAAA,CAAA,KAAA,EAA2D;AAChE,SAAO;AACLsD,IAAAA,aAAa,EAAE/F,KAAK,CAALA,UAAAA,GAAAA,EAAAA,GAAwB;AACrCuC,MAAAA,SAAS,EAAE,sDAAA,CAAmBvC,KAAK,CADE,SAC1B,CAD0B;AAErC0C,MAAAA,OAAO,EAAE,sDAAA,CAAmB1C,KAAK,CAAxB,OAAA;AAF4B;AADlC,GAAP;AAMD,C,CCtBD;AACA;;AAeA;;;;;OAIO,SAAA,QAAA,CAAA,KAAA,EAAkD;AACvD,MAAIA,KAAK,CAAT,UAAA,EAAsB;AACpB,WAAO;AAACgG,MAAAA,UAAU,EAAE;AAAb,KAAP;AACD;;AAED,MAAA,OAAA,EAAA,MAAA;;AACA,MAAIhG,KAAK,CAALA,OAAAA,IAAiBA,KAAK,CAA1B,aAAA,EAA0C;AACxCiG,IAAAA,OAAO,GAAIxD,iBAAAA,CAAD,EAAmB;AAC3B,UAAIA,CAAC,CAADA,MAAAA,KAAaA,CAAC,CAAlB,aAAA,EAAkC;AAChC,YAAIzC,KAAK,CAAT,OAAA,EAAmB;AACjBA,UAAAA,KAAK,CAALA,OAAAA,CAAAA,CAAAA;AACD;;AAED,YAAIA,KAAK,CAAT,aAAA,EAAyB;AACvBA,UAAAA,KAAK,CAALA,aAAAA,CAAAA,IAAAA;AACD;AACF;AATHiG,KAAAA;AAWD;;AAED,MAAIjG,KAAK,CAALA,MAAAA,IAAgBA,KAAK,CAAzB,aAAA,EAAyC;AACvCkG,IAAAA,MAAM,GAAIzD,gBAAAA,CAAD,EAAmB;AAC1B,UAAIA,CAAC,CAADA,MAAAA,KAAaA,CAAC,CAAlB,aAAA,EAAkC;AAChC,YAAIzC,KAAK,CAAT,MAAA,EAAkB;AAChBA,UAAAA,KAAK,CAALA,MAAAA,CAAAA,CAAAA;AACD;;AAED,YAAIA,KAAK,CAAT,aAAA,EAAyB;AACvBA,UAAAA,KAAK,CAALA,aAAAA,CAAAA,KAAAA;AACD;AACF;AATHkG,KAAAA;AAWD;;AAED,SAAO;AACLF,IAAAA,UAAU,EAAE;AACVC,MAAAA,OADU,EACVA,OADU;AAEVC,MAAAA,MAAAA,EAAAA;AAFU;AADP,GAAP;AAMD;ACvCD;;;;OAGO,SAAA,cAAA,CAAA,KAAA,EAAoE;AACzE,MAAI3E,KAAK,GAAG,MAAM,CAAC;AACjB4E,IAAAA,aAAa,EAAE;AADE,GAAD,CAAN,CAAZ,OAAA;;AAIA,MAAInG,KAAK,CAAT,UAAA,EAAsB;AACpB,WAAO;AAACoG,MAAAA,gBAAgB,EAAE;AAAnB,KAAP;AACD;;AAED,MAAIH,OAAO,GAAIxD,SAAXwD,OAAWxD,CAAAA,CAAD,EAAmB;AAC/B,QAAI,CAAClB,KAAK,CAAV,aAAA,EAA0B;AACxB,UAAIvB,KAAK,CAAT,aAAA,EAAyB;AACvBA,QAAAA,KAAK,CAALA,aAAAA,CAAAA,CAAAA;AACD;;AAED,UAAIA,KAAK,CAAT,mBAAA,EAA+B;AAC7BA,QAAAA,KAAK,CAALA,mBAAAA,CAAAA,IAAAA;AACD;;AAEDuB,MAAAA,KAAK,CAALA,aAAAA,GAAAA,IAAAA;AACD;AAXH,GAAA;;AAcA,MAAI2E,MAAM,GAAIzD,SAAVyD,MAAUzD,CAAAA,CAAD,EAAmB;AAC9B;AACA;AACA;AACA,QAAIlB,KAAK,CAALA,aAAAA,IAAuB,CAACkB,CAAC,CAADA,aAAAA,CAAAA,QAAAA,CAAyBA,CAAC,CAAtD,aAA4BA,CAA5B,EAAsF;AACpF,UAAIzC,KAAK,CAAT,YAAA,EAAwB;AACtBA,QAAAA,KAAK,CAALA,YAAAA,CAAAA,CAAAA;AACD;;AAED,UAAIA,KAAK,CAAT,mBAAA,EAA+B;AAC7BA,QAAAA,KAAK,CAALA,mBAAAA,CAAAA,KAAAA;AACD;;AAEDuB,MAAAA,KAAK,CAALA,aAAAA,GAAAA,KAAAA;AACD;AAdH,GAAA;;AAiBA,SAAO;AACL6E,IAAAA,gBAAgB,EAAE;AAChBH,MAAAA,OAAO,EADS,OAAA;AAEhBC,MAAAA,MAAM,EAAEA;AAFQ;AADb,GAAP;AAMD;ACjDD,IAAIG,qDAAe,GAAnB,IAAA;AACA,IAAIC,oDAAc,GAAG,IAArB,GAAqB,EAArB;AACA,IAAIC,6DAAuB,GAA3B,KAAA;AACA,IAAIC,yDAAmB,GAAvB,KAAA;AAEA,IAAMC,2CAAK,GACT,OAAA,MAAA,KAAA,WAAA,IAAiC1C,MAAM,CAANA,SAAAA,IAAjC,IAAA,GACI,OAAA,IAAA,CAAYA,MAAM,CAANA,SAAAA,CADhB,QACI,CADJ,GADF,KAAA,C,CAKA;;AACA,IAAM2C,8DAAwB,GAAG;AAC/BC,EAAAA,GAAG,EAD4B,IAAA;AAE/BC,EAAAA,MAAM,EAAE;AAFuB,CAAjC;;AAKA,SAAA,2DAAA,CAAA,QAAA,EAAA,CAAA,EAAoE;AAAA,6CAClE,oDADkE;AAAA;;AAAA;AAClE,wDAAoC;AAAA,UAApC,OAAoC;AAClCd,MAAAA,OAAO,CAAA,QAAA,EAAPA,CAAO,CAAPA;AACD;AAHiE;AAAA;AAAA;AAAA;AAAA;AAInE;AAED;;;;;AAGA,SAAA,gDAAA,CAAA,CAAA,EAAsC;AACpC,SAAO,EAAErD,CAAC,CAADA,OAAAA,IAAc,CAAA,2CAAA,IAAUA,CAAC,CAAzBA,MAAAA,IAAqCA,CAAC,CAA/C,OAAO,CAAP;AACD;;AAED,SAAA,yDAAA,CAAA,CAAA,EAA+C;AAC7C+D,EAAAA,yDAAmB,GAAnBA,IAAAA;;AACA,MAAIK,gDAAU,CAAd,CAAc,CAAd,EAAmB;AACjBR,IAAAA,qDAAe,GAAfA,UAAAA;AACAS,IAAAA,2DAAqB,CAAA,UAAA,EAArBA,CAAqB,CAArBA;AACD;AACF;;AAED,SAAA,wDAAA,CAAA,CAAA,EAA0D;AACxDT,EAAAA,qDAAe,GAAfA,SAAAA;;AACA,MAAI5D,CAAC,CAADA,IAAAA,KAAAA,WAAAA,IAA0BA,CAAC,CAADA,IAAAA,KAA9B,aAAA,EAAwD;AACtD+D,IAAAA,yDAAmB,GAAnBA,IAAAA;AACAM,IAAAA,2DAAqB,CAAA,SAAA,EAArBA,CAAqB,CAArBA;AACD;AACF;;AAED,SAAA,sDAAA,CAAA,CAAA,EAAyC;AACvC,MAAI,uDAAA,CAAJ,CAAI,CAAJ,EAAuB;AACrBN,IAAAA,yDAAmB,GAAnBA,IAAAA;AACAH,IAAAA,qDAAe,GAAfA,SAAAA;AACD;AACF;;AAED,SAAA,sDAAA,CAAA,CAAA,EAAyC;AACvC;AACA;AACA;AACA,MAAI5D,CAAC,CAADA,MAAAA,KAAAA,MAAAA,IAAuBA,CAAC,CAADA,MAAAA,KAA3B,QAAA,EAAkD;AAChD;AALqC,GAAA,CAQvC;AACA;;;AACA,MAAI,CAAJ,yDAAA,EAA0B;AACxB4D,IAAAA,qDAAe,GAAfA,UAAAA;AACAS,IAAAA,2DAAqB,CAAA,UAAA,EAArBA,CAAqB,CAArBA;AACD;;AAEDN,EAAAA,yDAAmB,GAAnBA,KAAAA;AACD;;AAED,SAAA,sDAAA,GAA4B;AAC1B;AACA;AACAA,EAAAA,yDAAmB,GAAnBA,KAAAA;AACD;AAED;;;;;AAGA,SAAA,4DAAA,GAAkC;AAChC,MAAI,OAAA,MAAA,KAAA,WAAA,IAAJ,6DAAA,EAA8D;AAC5D;AAF8B,GAAA,CAKhC;AACA;AACA;AACA;;;AACA,MAAIO,KAAK,GAAGC,WAAW,CAAXA,SAAAA,CAAZ,KAAA;;AACAA,EAAAA,WAAW,CAAXA,SAAAA,CAAAA,KAAAA,GAA8B,YAAY;AACxCR,IAAAA,yDAAmB,GAAnBA,IAAAA;AACAO,IAAAA,KAAK,CAALA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA;AAFFC,GAAAA;;AAKAhE,EAAAA,QAAQ,CAARA,gBAAAA,CAAAA,SAAAA,EAAAA,yDAAAA,EAAAA,IAAAA;AACAA,EAAAA,QAAQ,CAARA,gBAAAA,CAAAA,OAAAA,EAAAA,yDAAAA,EAAAA,IAAAA;AACAA,EAAAA,QAAQ,CAARA,gBAAAA,CAAAA,OAAAA,EAAAA,sDAAAA,EAjBgC,IAiBhCA,EAjBgC,CAmBhC;AACA;;AACAe,EAAAA,MAAM,CAANA,gBAAAA,CAAAA,OAAAA,EAAAA,sDAAAA,EAAAA,IAAAA;AACAA,EAAAA,MAAM,CAANA,gBAAAA,CAAAA,MAAAA,EAAAA,sDAAAA,EAAAA,KAAAA;;AAEA,MAAI,OAAA,YAAA,KAAJ,WAAA,EAAyC;AACvCf,IAAAA,QAAQ,CAARA,gBAAAA,CAAAA,aAAAA,EAAAA,wDAAAA,EAAAA,IAAAA;AACAA,IAAAA,QAAQ,CAARA,gBAAAA,CAAAA,aAAAA,EAAAA,wDAAAA,EAAAA,IAAAA;AACAA,IAAAA,QAAQ,CAARA,gBAAAA,CAAAA,WAAAA,EAAAA,wDAAAA,EAAAA,IAAAA;AAHF,GAAA,MAIO;AACLA,IAAAA,QAAQ,CAARA,gBAAAA,CAAAA,WAAAA,EAAAA,wDAAAA,EAAAA,IAAAA;AACAA,IAAAA,QAAQ,CAARA,gBAAAA,CAAAA,WAAAA,EAAAA,wDAAAA,EAAAA,IAAAA;AACAA,IAAAA,QAAQ,CAARA,gBAAAA,CAAAA,SAAAA,EAAAA,wDAAAA,EAAAA,IAAAA;AACD;;AAEDuD,EAAAA,6DAAuB,GAAvBA,IAAAA;AACD;AAED;;;;;OAGO,SAAA,cAAA,GAAmC;AACxC,SAAOF,qDAAe,KAAtB,SAAA;AACD;OAEM,SAAA,sBAAA,GAA4C;AACjD,SAAA,qDAAA;AACD;OAEM,SAAA,sBAAA,CAAA,QAAA,EAAoD;AACzDA,EAAAA,qDAAe,GAAfA,QAAAA;AACAS,EAAAA,2DAAqB,CAAA,QAAA,EAArBA,IAAqB,CAArBA;AACD;AAED;;;;OAGO,SAAA,sBAAA,GAA4C;AACjDG,EAAAA,4DAAsB;;AAD2B,mBAGnB3G,QAAQ,CAAtC,qDAAsC,CAHW;AAAA;AAAA,MAG7C,QAH6C;AAAA,MAG7C,WAH6C;;AAIjDJ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI4F,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClBoB,MAAAA,WAAW,CAAXA,qDAAW,CAAXA;AADF,KAAA;;AAIAZ,IAAAA,oDAAc,CAAdA,GAAAA,CAAAA,OAAAA;AACA,WAAO,YAAM;AACXA,MAAAA,oDAAc,CAAdA,MAAAA,CAAAA,OAAAA;AADF,KAAA;AANO,GAAA,EAATpG,EAAS,CAATA;AAWA,SAAA,QAAA;AACD;AAED;;;;OAGO,SAAA,eAAA,CAAA,KAAA,EAA4E;AAAA,MAAnDF,KAAmD,KAAA,KAAA,CAAA,EAAA;AAAnDA,IAAAA,KAAmD,GAAxB,EAA3BA;AAAmD;;AACjFiH,EAAAA,4DAAsB;AAD2D,eAGjF,KAHiF;AAAA,MAG7E,WAH6E,UAG7E,WAH6E;AAAA,MAG/DE,SAH+D,UAG/DA,SAH+D;;AAAA,mBAIpC7G,QAAQ,CAAC6G,SAAS,IAAIC,cAAnE,EAAqD,CAJ4B;AAAA;AAAA,MAI7E,mBAJ6E;AAAA,MAI7E,eAJ6E;;AAKjFlH,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI4F,OAAO,GAAG,SAAVA,OAAU,CAAA,QAAA,EAAA,CAAA,EAAyC;AACrD;AACA;AACA,UAAIuB,WAAW,IAAIC,QAAQ,KAAvBD,UAAAA,IAA0C5E,CAAC,YAA3C4E,aAAAA,IAAwE,CAACX,8DAAwB,CAACjE,CAAC,CAAvG,GAAqG,CAArG,EAA8G;AAC5G;AACD;;AAED8E,MAAAA,eAAe,CAACH,cAAhBG,EAAe,CAAfA;AAPF,KAAA;;AAUAjB,IAAAA,oDAAc,CAAdA,GAAAA,CAAAA,OAAAA;AACA,WAAO,YAAM;AACXA,MAAAA,oDAAc,CAAdA,MAAAA,CAAAA,OAAAA;AADF,KAAA;AAZO,GAAA,EAeN,CAfHpG,WAeG,CAfM,CAATA;AAiBA,SAAO;AAACkH,IAAAA,cAAc,EAAEI;AAAjB,GAAP;AACD,C,CCvLD;AACA;AACA;;AACA,IAAIC,+DAA+B,GAAnC,KAAA;AACA,IAAIC,0CAAU,GAAd,CAAA;;AAEA,SAAA,kEAAA,GAA8C;AAC5CD,EAAAA,+DAA+B,GADa,IAC5CA,CAD4C,CAG5C;AACA;AACA;AACA;;AACAvE,EAAAA,UAAU,CAAC,YAAM;AACfuE,IAAAA,+DAA+B,GAA/BA,KAAAA;AADQ,GAAA,EAAVvE,EAAU,CAAVA;AAGD;;AAED,SAAA,wDAAA,CAAA,CAAA,EAAqC;AACnC,MAAIT,CAAC,CAADA,WAAAA,KAAJ,OAAA,EAA+B;AAC7BkF,IAAAA,kEAAkC;AACnC;AACF;;AAED,SAAA,sDAAA,GAAkC;AAChC,MAAI,OAAA,QAAA,KAAJ,WAAA,EAAqC;AACnC;AACD;;AAED,MAAI,OAAA,YAAA,KAAJ,WAAA,EAAyC;AACvC3E,IAAAA,QAAQ,CAARA,gBAAAA,CAAAA,WAAAA,EAAAA,wDAAAA;AADF,GAAA,MAEO;AACLA,IAAAA,QAAQ,CAARA,gBAAAA,CAAAA,UAAAA,EAAAA,kEAAAA;AACD;;AAED0E,EAAAA,0CAAU;AACV,SAAO,YAAM;AACXA,IAAAA,0CAAU;;AACV,QAAIA,0CAAU,GAAd,CAAA,EAAoB;AAClB;AACD;;AAED,QAAI,OAAA,YAAA,KAAJ,WAAA,EAAyC;AACvC1E,MAAAA,QAAQ,CAARA,mBAAAA,CAAAA,WAAAA,EAAAA,wDAAAA;AADF,KAAA,MAEO;AACLA,MAAAA,QAAQ,CAARA,mBAAAA,CAAAA,UAAAA,EAAAA,kEAAAA;AACD;AAVH,GAAA;AAYD;AAED;;;;;;OAIO,SAAA,QAAA,CAAA,KAAA,EAAkD;AAAA,MACnD,YADmD,GACvD,KADuD,CACnD,YADmD;AAAA,MACnD,aADmD,GACvD,KADuD,CACnD,aADmD;AAAA,MACnD,UADmD,GACvD,KADuD,CACnD,UADmD;AAAA,MAKrD4E,UALqD,GACvD,KADuD,CAKrDA,UALqD;;AAAA,mBAQzBtH,QAAQ,CAAtC,KAAsC,CARiB;AAAA;AAAA,MAQnD,SARmD;AAAA,MAQnD,UARmD;;AASvD,MAAIiB,KAAK,GAAG,MAAM,CAAC;AACjBsG,IAAAA,SAAS,EADQ,KAAA;AAEjBpH,IAAAA,yBAAyB,EAAE;AAFV,GAAD,CAAN,CAAZ,OAAA;AAKAP,EAAAA,SAAS,CAAA,sDAAA,EAATA,EAAS,CAATA;AAEA,MAAI4H,UAAU,GAAGxG,OAAO,CAAC,YAAM;AAC7B,QAAIyG,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,KAAA,EAAA,WAAA,EAAwB;AAC9C,UAAIH,UAAU,IAAIlG,WAAW,KAAzBkG,OAAAA,IAAyCrG,KAAK,CAAlD,SAAA,EAA8D;AAC5D;AACD;;AAEDA,MAAAA,KAAK,CAALA,SAAAA,GAAAA,IAAAA;AACA,UAAIX,MAAM,GAAGlB,KAAK,CAAlB,MAAA;;AAEA,UAAA,YAAA,EAAkB;AAChBsI,QAAAA,YAAY,CAAC;AACX/G,UAAAA,IAAI,EADO,YAAA;AAEXL,UAAAA,MAFW,EAEXA,MAFW;AAGXc,UAAAA,WAAAA,EAAAA;AAHW,SAAD,CAAZsG;AAKD;;AAED,UAAA,aAAA,EAAmB;AACjBC,QAAAA,aAAa,CAAbA,IAAa,CAAbA;AACD;;AAEDC,MAAAA,UAAU,CAAVA,IAAU,CAAVA;AApBF,KAAA;;AAuBA,QAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,KAAA,EAAA,WAAA,EAAwB;AAC5C,UAAIP,UAAU,IAAIlG,WAAW,KAAzBkG,OAAAA,IAAyC,CAACrG,KAAK,CAAnD,SAAA,EAA+D;AAC7D;AACD;;AAEDA,MAAAA,KAAK,CAALA,SAAAA,GAAAA,KAAAA;AACA,UAAIX,MAAM,GAAGlB,KAAK,CAAlB,MAAA;;AAEA,UAAA,UAAA,EAAgB;AACd0I,QAAAA,UAAU,CAAC;AACTnH,UAAAA,IAAI,EADK,UAAA;AAETL,UAAAA,MAFS,EAETA,MAFS;AAGTc,UAAAA,WAAAA,EAAAA;AAHS,SAAD,CAAV0G;AAKD;;AAED,UAAA,aAAA,EAAmB;AACjBH,QAAAA,aAAa,CAAbA,KAAa,CAAbA;AACD;;AAEDC,MAAAA,UAAU,CAAVA,KAAU,CAAVA;AApBF,KAAA;;AAuBA,QAAIJ,UAAuC,GAA3C,EAAA;;AAEA,QAAI,OAAA,YAAA,KAAJ,WAAA,EAAyC;AACvCA,MAAAA,UAAU,CAAVA,cAAAA,GAA6BrF,UAAAA,CAAD,EAAO;AACjC,YAAIgF,+DAA+B,IAAIhF,CAAC,CAADA,WAAAA,KAAvC,OAAA,EAAkE;AAChE;AACD;;AAEDsF,QAAAA,iBAAiB,CAAA,CAAA,EAAItF,CAAC,CAAtBsF,WAAiB,CAAjBA;AALFD,OAAAA;;AAQAA,MAAAA,UAAU,CAAVA,cAAAA,GAA6BrF,UAAAA,CAAD,EAAO;AACjC0F,QAAAA,eAAe,CAAA,CAAA,EAAI1F,CAAC,CAApB0F,WAAe,CAAfA;AADFL,OAAAA;AATF,KAAA,MAYO;AACLA,MAAAA,UAAU,CAAVA,YAAAA,GAA0B,YAAM;AAC9BvG,QAAAA,KAAK,CAALA,yBAAAA,GAAAA,IAAAA;AADFuG,OAAAA;;AAIAA,MAAAA,UAAU,CAAVA,YAAAA,GAA2BrF,UAAAA,CAAD,EAAO;AAC/B,YAAI,CAAClB,KAAK,CAAN,yBAAA,IAAoC,CAAxC,+DAAA,EAA0E;AACxEwG,UAAAA,iBAAiB,CAAA,CAAA,EAAjBA,OAAiB,CAAjBA;AACD;;AAEDxG,QAAAA,KAAK,CAALA,yBAAAA,GAAAA,KAAAA;AALFuG,OAAAA;;AAQAA,MAAAA,UAAU,CAAVA,YAAAA,GAA2BrF,UAAAA,CAAD,EAAO;AAC/B0F,QAAAA,eAAe,CAAA,CAAA,EAAfA,OAAe,CAAfA;AADFL,OAAAA;AAGD;;AACD,WAAA,UAAA;AA9EsB,GAAA,EA+ErB,CAAA,YAAA,EAAA,aAAA,EAAA,UAAA,EAAA,UAAA,EA/EH,KA+EG,CA/EqB,CAAxB;AAiFA,SAAO;AACLA,IAAAA,UADK,EACLA,UADK;AAELD,IAAAA,SAAAA,EAAAA;AAFK,GAAP;AAID","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Original licensing for the following method can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/blob/3c713d513195a53788b3f8bb4b70279d68b15bcc/packages/react-interactions/events/src/dom/shared/index.js#L74-L87\n\n// Keyboards, Assistive Technologies, and element.click() all produce a \"virtual\"\n// click event. This is a method of inferring such clicks. Every browser except\n// IE 11 only sets a zero value of \"detail\" for click events that are \"virtual\".\n// However, IE 11 uses a zero value for all click events. For IE 11 we rely on\n// the quirk that it produces click events that are of type PointerEvent, and\n// where only the \"virtual\" click lacks a pointerType field.\n\nexport function isVirtualClick(event: MouseEvent | PointerEvent): boolean {\n  // JAWS/NVDA with Firefox.\n  if ((event as any).mozInputSource === 0 && event.isTrusted) {\n    return true;\n  }\n\n  return event.detail === 0 && !(event as PointerEvent).pointerType;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PressProps} from './usePress';\nimport React, {MutableRefObject} from 'react';\n\ninterface PressResponderContext extends PressProps {\n  register(): void,\n  ref?: MutableRefObject<HTMLElement>\n}\n\nexport const PressResponderContext = React.createContext<PressResponderContext>(null);\nPressResponderContext.displayName = 'PressResponderContext';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {focusWithoutScrolling, mergeProps, runAfterTransition} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject, useCallback, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport {isVirtualClick} from './utils';\nimport {PointerType, PressEvents} from '@react-types/shared';\nimport {PressResponderContext} from './context';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<HTMLElement>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  activePointerId: any,\n  target: HTMLElement | null,\n  isOverTarget: boolean,\n  userSelect?: string\n}\n\ninterface EventBase {\n  currentTarget: EventTarget,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: HTMLAttributes<HTMLElement>\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n\n  // Sync ref from <PressResponder> with ref passed to usePress.\n  useEffect(() => {\n    if (context && context.ref) {\n      context.ref.current = props.ref.current;\n      return () => {\n        context.ref.current = null;\n      };\n    }\n  }, [context, props.ref]);\n\n  return props;\n}\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false\n  });\n\n  let globalListeners = useRef(new Map());\n  let addGlobalListener = useCallback((eventTarget, type, listener, options) => {\n    globalListeners.current.set(listener, {type, eventTarget, options});\n    eventTarget.addEventListener(type, listener, options);\n  }, [globalListeners.current]);\n  let removeGlobalListener = useCallback((eventTarget, type, listener, options) => {\n    eventTarget.removeEventListener(type, listener, options);\n    globalListeners.current.delete(listener);\n  }, [globalListeners.current]);\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent: EventBase, pointerType: PointerType) => {\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressStart) {\n        onPressStart({\n          type: 'pressstart',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(true);\n      }\n\n      setPressed(true);\n    };\n\n    let triggerPressEnd = (originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n      if (isDisabled) {\n        return;\n      }\n\n      state.ignoreClickAfterPress = true;\n\n      if (onPressEnd) {\n        onPressEnd({\n          type: 'pressend',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(false);\n      }\n\n      setPressed(false);\n\n      if (onPress && wasPressed) {\n        onPress({\n          type: 'press',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey\n        });\n      }\n    };\n\n    let triggerPressUp = (originalEvent: EventBase, pointerType: PointerType) => {\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressUp) {\n        onPressUp({\n          type: 'pressup',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey\n        });\n      }\n    };\n\n    let pressProps: HTMLAttributes<HTMLElement> = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget as HTMLElement;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        }\n      },\n      onKeyUp(e) {\n        if (isValidKeyboardEvent(e.nativeEvent) && !e.repeat) {\n          triggerPressUp(createEvent(state.target, e), 'keyboard');\n        }\n      },\n      onClick(e) {\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && isVirtualClick(e.nativeEvent)) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && isValidKeyboardEvent(e)) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        state.isPressed = false;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', e.target === state.target);\n        removeGlobalListener(document, 'keyup', onKeyUp, false);\n\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (e.target === state.target && isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link') {\n          state.target.click();\n        }\n      }\n    };\n\n    // Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n    // is to add user-select: none to the entire page. Adding it to the pressable element prevents\n    // that element from being selected, but nearby elements may still receive selection. We add\n    // user-select: none on touch start, and remove it again on touch end to prevent this.\n    let disableTextSelection = () => {\n      state.userSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    };\n\n    let restoreTextSelection = () => {\n      // There appears to be a delay on iOS where selection still might occur\n      // after pointer up, so wait a bit before removing user-select.\n      setTimeout(() => {\n        // Wait for any CSS transitions to complete so we don't recompute style\n        // for the whole page in the middle of the animation and cause jank.\n        runAfterTransition(() => {\n          // Avoid race conditions\n          if (!state.isPressed && document.documentElement.style.webkitUserSelect === 'none') {\n            document.documentElement.style.webkitUserSelect = state.userSelect || '';\n            state.userSelect = null;\n          }\n        });\n      }, 300);\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        e.preventDefault();\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          disableTextSelection();\n          triggerPressStart(e, e.pointerType);\n\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          e.preventDefault();\n        }\n      };\n\n      let unbindEvents = () => {\n        removeGlobalListener(document, 'pointermove', onPointerMove, false);\n        removeGlobalListener(document, 'pointerup', onPointerUp, false);\n        removeGlobalListener(document, 'pointercancel', onPointerCancel, false);\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, e.pointerType as PointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), e.pointerType as PointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), e.pointerType as PointerType, false);\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if (isOverTarget(e, state.target)) {\n            triggerPressEnd(createEvent(state.target, e), e.pointerType as PointerType);\n          } else if (state.isOverTarget) {\n            triggerPressEnd(createEvent(state.target, e), e.pointerType as PointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          unbindEvents();\n          restoreTextSelection();\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        if (state.isPressed) {\n          if (state.isOverTarget) {\n            triggerPressEnd(createEvent(state.target, e), e.pointerType as PointerType, false);\n          }\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          unbindEvents();\n          restoreTextSelection();\n        }\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        e.preventDefault();\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) {\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n\n        if (!isDisabled) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        triggerPressStart(e, isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse');\n\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, 'mouse');\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, 'mouse', false);\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse');\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeGlobalListener(document, 'mouseup', onMouseUp, false);\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        let pointerType: PointerType = isVirtualClick(e) ? 'virtual' : 'mouse';\n        if (isOverTarget(e, state.target)) {\n          triggerPressEnd(createEvent(state.target, e), pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        e.stopPropagation();\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        disableTextSelection();\n        triggerPressStart(e, 'touch');\n\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, 'touch');\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, 'touch', false);\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, 'touch');\n          triggerPressEnd(e, 'touch');\n        } else if (state.isOverTarget) {\n          triggerPressEnd(e, 'touch', false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        restoreTextSelection();\n        removeGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancelTouchEvent(e, 'touch');\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as HTMLElement).contains(state.target)) {\n          cancelTouchEvent({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false\n          }, 'touch');\n        }\n      };\n\n      let cancelTouchEvent = (e: EventBase, pointerType: PointerType) => {\n        if (state.isOverTarget) {\n          triggerPressEnd(e, pointerType, false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        restoreTextSelection();\n        window.removeEventListener('scroll', onScroll, true);\n      };\n    }\n\n    return pressProps;\n  }, [onPress, onPressStart, onPressEnd, onPressChange, onPressUp, isDisabled]);\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      globalListeners.current.forEach((value, key) => {\n        removeGlobalListener(value.eventTarget, value.type, key, value.options);\n      });\n    };\n  }, [globalListeners.current]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: HTMLElement): boolean {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent): boolean {\n  const {key, target} = event;\n  const element = target as HTMLElement;\n  const {tagName, isContentEditable} = element;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar') &&\n    (tagName !== 'INPUT' &&\n      tagName !== 'TEXTAREA' &&\n      isContentEditable !== true) &&\n    // A link with a valid href should be handled natively,\n    // unless it also has role='button' and was triggered using Space.\n    (!isHTMLAnchorLink(element) || (role === 'button' && key !== 'Enter')) &&\n    // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createEvent(target: HTMLElement, e: EventBase): EventBase {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey\n  };\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number\n}\n\nfunction isOverTarget(point: EventPoint, target: HTMLElement) {\n  let rect = target.getBoundingClientRect();\n  return (point.clientX || 0) >= (rect.left || 0) &&\n    (point.clientX || 0) <= (rect.right || 0) &&\n    (point.clientY || 0) >= (rect.top || 0) &&\n    (point.clientY || 0) <= (rect.bottom || 0);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {RefObject, SyntheticEvent, useEffect, useRef} from 'react';\n\ninterface InteractOutsideProps {\n  ref: RefObject<Element>,\n  onInteractOutside?: (e: SyntheticEvent) => void\n}\n\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\nexport function useInteractOutside(props: InteractOutsideProps) {\n  let {ref, onInteractOutside} = props;\n  let stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false\n  });\n  let state = stateRef.current;\n\n  useEffect(() => {\n    let onPointerDown = (e) => {\n      if (isValidEvent(e, ref)) {\n        state.isPointerDown = true;\n      }\n    };\n\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = (e) => {\n        if (state.isPointerDown && onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('pointerdown', onPointerDown, false);\n      document.addEventListener('pointerup', onPointerUp, false);\n\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, false);\n        document.removeEventListener('pointerup', onPointerUp, false);\n      };\n    } else {\n      let onMouseUp = (e) => {\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n        } else if (state.isPointerDown && onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          onInteractOutside(e);\n        }\n      };\n\n      let onTouchEnd = (e) => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (onInteractOutside && state.isPointerDown && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, false);\n      document.addEventListener('mouseup', onMouseUp, false);\n      document.addEventListener('touchstart', onPointerDown, false);\n      document.addEventListener('touchend', onTouchEnd, false);\n\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, false);\n        document.removeEventListener('mouseup', onMouseUp, false);\n        document.removeEventListener('touchstart', onPointerDown, false);\n        document.removeEventListener('touchend', onTouchEnd, false);\n      };\n    }\n  }, [onInteractOutside, ref, state.ignoreEmulatedMouseEvents, state.isPointerDown]);\n}\n\nfunction isValidEvent(event, ref) {\n  if (event.button > 0) {\n    return false;\n  }\n\n  // if the event target is no longer in the document\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.body.contains(event.target)) {\n      return false;\n    }\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {mergeProps} from '@react-aria/utils';\nimport {PressProps, usePress} from './usePress';\nimport React, {HTMLAttributes, ReactElement, RefObject, useRef} from 'react';\n\ninterface PressableProps extends PressProps {\n  children: ReactElement<HTMLAttributes<HTMLElement>, string>\n}\n\nexport const Pressable = React.forwardRef(({children, ...props}: PressableProps, ref: RefObject<HTMLElement>) => {\n  ref = ref || useRef();\n  let {pressProps} = usePress({...props, ref});\n  let child = React.Children.only(children);\n  return React.cloneElement(\n    child,\n    // @ts-ignore\n    {ref, ...mergeProps(child.props, pressProps)}\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {mergeProps} from '@react-aria/utils';\nimport {PressProps} from './usePress';\nimport {PressResponderContext} from './context';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\n\ninterface PressResponderProps extends PressProps {\n  children: ReactNode\n}\n\nexport const PressResponder = React.forwardRef(({children, ...props}: PressResponderProps, ref: RefObject<HTMLElement>) => {\n  let isRegistered = useRef(false);\n  let prevContext = useContext(PressResponderContext);\n  let context = mergeProps(prevContext || {}, {\n    ...props,\n    ref,\n    register() {\n      isRegistered.current = true;\n      if (prevContext) {\n        prevContext.register();\n      }\n    }\n  });\n\n  useEffect(() => {\n    if (!isRegistered.current) {\n      console.warn(\n        'A PressResponder was rendered without a pressable child. ' +\n        'Either call the usePress hook, or wrap your DOM node with <Pressable> component.'\n      );\n    }\n  }, []);\n\n  return (\n    <PressResponderContext.Provider value={context}>\n      {children}\n    </PressResponderContext.Provider>\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BaseEvent} from '@react-types/shared';\nimport {SyntheticEvent} from 'react';\n\n/**\n * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.\n */\nexport function createEventHandler<T extends SyntheticEvent>(handler: (e: BaseEvent<T>) => void): (e: T) => void {\n  if (!handler) {\n    return;\n  }\n\n  let shouldStopPropagation = true;\n  return (e: T) => {\n    let event: BaseEvent<T> = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n\n    handler(event);\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createEventHandler} from './createEventHandler';\nimport {HTMLAttributes} from 'react';\nimport {KeyboardEvents} from '@react-types/shared';\n\nexport interface KeyboardProps extends KeyboardEvents {\n  /** Whether the keyboard events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface KeyboardResult {\n  /** Props to spread onto the target element. */\n  keyboardProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles keyboard interactions for a focusable element.\n */\nexport function useKeyboard(props: KeyboardProps): KeyboardResult {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: createEventHandler(props.onKeyDown),\n      onKeyUp: createEventHandler(props.onKeyUp)\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {FocusEvent, HTMLAttributes} from 'react';\nimport {FocusEvents} from '@react-types/shared';\n\ninterface FocusProps extends FocusEvents {\n  /** Whether the focus events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface FocusResult {\n  /** Props to spread onto the target element. */\n  focusProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles focus events for the immediate target.\n * Focus events on child elements will be ignored.\n */\nexport function useFocus(props: FocusProps): FocusResult {\n  if (props.isDisabled) {\n    return {focusProps: {}};\n  }\n\n  let onFocus, onBlur;\n  if (props.onFocus || props.onFocusChange) {\n    onFocus = (e: FocusEvent) => {\n      if (e.target === e.currentTarget) {\n        if (props.onFocus) {\n          props.onFocus(e);\n        }\n\n        if (props.onFocusChange) {\n          props.onFocusChange(true);\n        }\n      }\n    };\n  }\n\n  if (props.onBlur || props.onFocusChange) {\n    onBlur = (e: FocusEvent) => {\n      if (e.target === e.currentTarget) {\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n\n        if (props.onFocusChange) {\n          props.onFocusChange(false);\n        }\n      }\n    };\n  }\n\n  return {\n    focusProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {FocusEvent, HTMLAttributes, useRef} from 'react';\n\ninterface FocusWithinProps {\n  /** Whether the focus within events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the target element or a descendant receives focus. */\n  onFocusWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the target element and all descendants lose focus. */\n  onBlurWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the the focus within state changes. */\n  onFocusWithinChange?: (isFocusWithin: boolean) => void\n}\n\ninterface FocusWithinResult {\n  /** Props to spread onto the target element. */\n  focusWithinProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles focus events for the target and its descendants.\n */\nexport function useFocusWithin(props: FocusWithinProps): FocusWithinResult {\n  let state = useRef({\n    isFocusWithin: false\n  }).current;\n\n  if (props.isDisabled) {\n    return {focusWithinProps: {}};\n  }\n\n  let onFocus = (e: FocusEvent) => {\n    if (!state.isFocusWithin) {\n      if (props.onFocusWithin) {\n        props.onFocusWithin(e);\n      }\n\n      if (props.onFocusWithinChange) {\n        props.onFocusWithinChange(true);\n      }\n\n      state.isFocusWithin = true;\n    }\n  };\n\n  let onBlur = (e: FocusEvent) => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.isFocusWithin && !e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      if (props.onBlurWithin) {\n        props.onBlurWithin(e);\n      }\n\n      if (props.onFocusWithinChange) {\n        props.onFocusWithinChange(false);\n      }\n\n      state.isFocusWithin = false;\n    }\n  };\n\n  return {\n    focusWithinProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {isVirtualClick} from './utils';\nimport {useEffect, useState} from 'react';\n\ntype Modality = 'keyboard' | 'pointer' | 'virtual';\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent;\ntype Handler = (modality: Modality, e: HandlerEvent) => void;\ninterface FocusVisibleProps {\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\ninterface FocusVisibleResult {\n  /** Whether keyboard focus is visible globally. */\n  isFocusVisible: boolean\n}\n\nlet currentModality = null;\nlet changeHandlers = new Set<Handler>();\nlet hasSetupGlobalListeners = false;\nlet hasEventBeforeFocus = false;\n\nconst isMac =\n  typeof window !== 'undefined' && window.navigator != null\n    ? /^Mac/.test(window.navigator.platform)\n    : false;\n\n// Only Tab or Esc keys will make focus visible on text input elements\nconst FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction triggerChangeHandlers(modality: Modality, e: HandlerEvent) {\n  for (let handler of changeHandlers) {\n    handler(modality, e);\n  }\n}\n\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction isValidKey(e: KeyboardEvent) {\n  return !(e.metaKey || (!isMac && e.altKey) || e.ctrlKey);\n}\n\nfunction handleKeyboardEvent(e: KeyboardEvent) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(e)) {\n    currentModality = 'keyboard';\n    triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction handlePointerEvent(e: PointerEvent | MouseEvent) {\n  currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    hasEventBeforeFocus = true;\n    triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction handleClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    currentModality = 'virtual';\n  }\n}\n\nfunction handleFocusEvent(e: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) {\n    return;\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to keyboard modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus) {\n    currentModality = 'keyboard';\n    triggerChangeHandlers('keyboard', e);\n  }\n\n  hasEventBeforeFocus = false;\n}\n\nfunction handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false;\n}\n\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || hasSetupGlobalListeners) {\n    return;\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', handleKeyboardEvent, true);\n  document.addEventListener('keyup', handleKeyboardEvent, true);\n  document.addEventListener('click', handleClickEvent, true);\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', handleFocusEvent, true);\n  window.addEventListener('blur', handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', handlePointerEvent, true);\n    document.addEventListener('pointermove', handlePointerEvent, true);\n    document.addEventListener('pointerup', handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', handlePointerEvent, true);\n    document.addEventListener('mousemove', handlePointerEvent, true);\n    document.addEventListener('mouseup', handlePointerEvent, true);\n  }\n\n  hasSetupGlobalListeners = true;\n}\n\n/**\n * If true, keyboard focus is visible.\n */\nexport function isFocusVisible(): boolean {\n  return currentModality !== 'pointer';\n}\n\nexport function getInteractionModality(): Modality {\n  return currentModality;\n}\n\nexport function setInteractionModality(modality: Modality) {\n  currentModality = modality;\n  triggerChangeHandlers(modality, null);\n}\n\n/**\n * Keeps state of the current modality.\n */\nexport function useInteractionModality(): Modality {\n  setupGlobalFocusEvents();\n\n  let [modality, setModality] = useState(currentModality);\n  useEffect(() => {\n    let handler = () => {\n      setModality(currentModality);\n    };\n\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, []);\n\n  return modality;\n}\n\n/**\n * Manages focus visible state for the page, and subscribes individual components for updates.\n */\nexport function useFocusVisible(props: FocusVisibleProps = {}): FocusVisibleResult {\n  setupGlobalFocusEvents();\n\n  let {isTextInput, autoFocus} = props;\n  let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());\n  useEffect(() => {\n    let handler = (modality: Modality, e: HandlerEvent) => {\n      // If this is a text input component, don't update the focus visible style when\n      // typing except for when the Tab and Escape keys are pressed.\n      if (isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !FOCUS_VISIBLE_INPUT_KEYS[e.key]) {\n        return;\n      }\n\n      setFocusVisible(isFocusVisible());\n    };\n\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, [isTextInput]);\n\n  return {isFocusVisible: isFocusVisibleState};\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {HoverEvents} from '@react-types/shared';\nimport {HTMLAttributes, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface HoverProps extends HoverEvents {\n  /** Whether the hover events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface HoverResult {\n  /** Props to spread on the target element. */\n  hoverProps: HTMLAttributes<HTMLElement>,\n  isHovered: boolean\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet globalIgnoreEmulatedMouseEvents = false;\nlet hoverCount = 0;\n\nfunction setGlobalIgnoreEmulatedMouseEvents() {\n  globalIgnoreEmulatedMouseEvents = true;\n\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') {\n    setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerup', handleGlobalPointerEvent);\n  } else {\n    document.addEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n  }\n\n  hoverCount++;\n  return () => {\n    hoverCount--;\n    if (hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', handleGlobalPointerEvent);\n    } else {\n      document.removeEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useHover(props: HoverProps): HoverResult {\n  let {\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled\n  } = props;\n\n  let [isHovered, setHovered] = useState(false);\n  let state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false\n  }).current;\n\n  useEffect(setupGlobalTouchEvents, []);\n\n  let hoverProps = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      if (isDisabled || pointerType === 'touch' || state.isHovered) {\n        return;\n      }\n\n      state.isHovered = true;\n      let target = event.target;\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      if (isDisabled || pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n      let target = event.target;\n\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    let hoverProps: HTMLAttributes<HTMLElement> = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = (e) => {\n        if (globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = (e) => {\n        triggerHoverEnd(e, e.pointerType);\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && !globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = (e) => {\n        triggerHoverEnd(e, 'mouse');\n      };\n    }\n    return hoverProps;\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n\n  return {\n    hoverProps,\n    isHovered\n  };\n}\n"]},"metadata":{},"sourceType":"module"}