{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from \"react\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\";\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/components/grid\n */\n\nexport var Grid = /*#__PURE__*/forwardRef(function Grid(props, ref) {\n  var area = props.area,\n      templateAreas = props.templateAreas,\n      gap = props.gap,\n      rowGap = props.rowGap,\n      columnGap = props.columnGap,\n      column = props.column,\n      row = props.row,\n      autoFlow = props.autoFlow,\n      autoRows = props.autoRows,\n      templateRows = props.templateRows,\n      autoColumns = props.autoColumns,\n      templateColumns = props.templateColumns,\n      rest = _objectWithoutPropertiesLoose(props, [\"area\", \"templateAreas\", \"gap\", \"rowGap\", \"columnGap\", \"column\", \"row\", \"autoFlow\", \"autoRows\", \"templateRows\", \"autoColumns\", \"templateColumns\"]);\n\n  var styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns\n  };\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    __css: styles\n  }, rest));\n});\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\";\n}\n\nexport var GridColumn = /*#__PURE__*/forwardRef(function GridColumn(props, ref) {\n  var span = props.span,\n      start = props.start,\n      rest = _objectWithoutPropertiesLoose(props, [\"span\", \"start\"]);\n\n  var gridColumn = mapResponsive(span, function (value) {\n    return value === \"auto\" ? \"auto\" : \"span \" + value + \"/span \" + value;\n  });\n  var styles = filterUndefined({\n    gridColumn: gridColumn,\n    gridColumnStart: start\n  });\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    __css: styles\n  }, rest));\n});","map":{"version":3,"sources":["../../src/grid.tsx"],"names":["Grid","forwardRef","templateColumns","styles","display","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","GridColumn","start","mapResponsive","value","filterUndefined","gridColumnStart"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport {\n  chakra,\n  PropsOf,\n  SystemProps,\n  forwardRef,\n  ResponsiveValue,\n} from \"@chakra-ui/system\"\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport { BoxProps } from \"./box\"\n\nexport interface GridProps extends PropsOf<typeof chakra.div>, GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/components/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    area,\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\"\n}\n\nexport interface GridOptions {\n  /**\n   * Short hand prop for `gridTemplateColumns`\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Short hand prop for `gridGap`\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Short hand prop for `gridRowGap`\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Short hand prop for `gridColumnGap`\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Short hand prop for `gridAutoFlow`\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Short hand prop for `gridAutoRows`\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Short hand prop for `gridAutoColumns`\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Short hand prop for `gridTemplateRows`\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Short hand prop for `gridTemplateAreas`\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Short hand prop for `gridArea`\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * Short hand prop for `gridColumn`\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Short hand prop for `gridRow`\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridColumnProps extends BoxProps {\n  /**\n   * The number of columns the grid item should `span`.\n   */\n  span?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   */\n  start?: ResponsiveValue<number | \"auto\">\n}\n\nexport const GridColumn = forwardRef<GridColumnProps, \"div\">(\n  function GridColumn(props, ref) {\n    const { span, start, ...rest } = props\n\n    const gridColumn = mapResponsive(span, (value) =>\n      value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n    )\n\n    const styles = filterUndefined({\n      gridColumn: gridColumn,\n      gridColumnStart: start,\n    })\n\n    return <chakra.div ref={ref} __css={styles} {...rest} />\n  },\n)\n"]},"metadata":{},"sourceType":"module"}