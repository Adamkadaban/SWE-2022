{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useBoolean, useDisclosure, useIds } from \"@chakra-ui/hooks\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { useColorModeValue, useToken } from \"@chakra-ui/system\";\nimport { callAllHandlers, mergeRefs } from \"@chakra-ui/utils\";\nimport { useInteractOutside } from \"@react-aria/interactions\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { useFocusOnHide, useFocusOnShow } from \"./popover.utils\";\nvar TRIGGER_TYPE = {\n  click: \"click\",\n  hover: \"hover\"\n};\nexport function usePopover(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    placement: placementProp,\n    gutter,\n    id,\n    arrowSize,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowShadowColor,\n    modifiers,\n    trigger = TRIGGER_TYPE.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy\n  } = props;\n  var {\n    isOpen,\n    onClose,\n    onOpen,\n    onToggle\n  } = useDisclosure(props);\n  var triggerRef = useRef(null);\n  var popoverRef = useRef(null);\n  var isHoveringRef = useRef(false);\n  var [hasHeader, setHasHeader] = useBoolean();\n  var [hasBody, setHasBody] = useBoolean();\n  var [triggerId, popoverId, headerId, bodyId] = useIds(id, \"popover-trigger\", \"popover-content\", \"popover-header\", \"popover-body\");\n  var fallbackShadowColor = useColorModeValue(\"gray.200\", \"whiteAlpha.300\");\n  var shadowColor = arrowShadowColor != null ? arrowShadowColor : fallbackShadowColor;\n  var arrowColor = useToken(\"colors\", shadowColor, arrowShadowColor);\n  var {\n    popper,\n    reference,\n    arrow\n  } = usePopper({\n    placement: placementProp,\n    gutter,\n    forceUpdate: isOpen,\n    arrowSize,\n    arrowShadowColor: arrowColor,\n    modifiers\n  });\n  useFocusOnHide(popoverRef, {\n    autoFocus: returnFocusOnClose,\n    visible: isOpen,\n    focusRef: triggerRef,\n    trigger\n  });\n  useFocusOnShow(popoverRef, {\n    autoFocus: autoFocus,\n    visible: isOpen,\n    focusRef: initialFocusRef,\n    trigger\n  });\n  useInteractOutside({\n    ref: popoverRef,\n    onInteractOutside: event => {\n      var _triggerRef$current;\n\n      if (trigger === TRIGGER_TYPE.click && closeOnBlur && !((_triggerRef$current = triggerRef.current) == null ? void 0 : _triggerRef$current.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  var getPopoverProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var popoverProps = _extends({}, props, {\n      children: isLazy ? isOpen ? props.children : null : props.children,\n      id: popoverId,\n      tabIndex: -1,\n      hidden: !isOpen,\n      role: \"dialog\",\n      onKeyDown: callAllHandlers(props.onKeyDown, event => {\n        if (closeOnEsc && event.key === \"Escape\") {\n          onClose();\n        }\n      }),\n      ref: mergeRefs(popoverRef, popper.ref, ref),\n      style: _extends({}, props.style, popper.style),\n      \"aria-labelledby\": hasHeader ? headerId : undefined,\n      \"aria-describedby\": hasBody ? bodyId : undefined\n    });\n\n    if (trigger === TRIGGER_TYPE.hover) {\n      popoverProps.role = \"tooltip\";\n      popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n        isHoveringRef.current = false;\n        setTimeout(onClose, closeDelay);\n      });\n    }\n\n    return popoverProps;\n  }, [popoverId, isOpen, isLazy, popper.ref, popper.style, hasHeader, headerId, hasBody, bodyId, trigger, closeOnEsc, onClose, closeDelay]);\n  var getArrowProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(arrow.ref, ref),\n      style: _extends({}, props.style, arrow.style)\n    });\n  }, [arrow.ref, arrow.style]);\n  var openTimeout = useRef();\n  var closeTimeout = useRef();\n  var getTriggerProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var triggerProps = _extends({}, props, {\n      id: triggerId,\n      ref: mergeRefs(triggerRef, reference.ref, ref),\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": popoverId\n    });\n\n    if (trigger === TRIGGER_TYPE.click) {\n      triggerProps.onClick = callAllHandlers(props.onClick, onToggle);\n    }\n\n    if (trigger === TRIGGER_TYPE.hover) {\n      /**\n       * Any content that shows on pointer hover should also show on keyboard focus.\n       * Consider focus and blur to be the `hover` for keyboard users.\n       *\n       * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n       */\n      triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen);\n      triggerProps.onBlur = callAllHandlers(props.onBlur, onClose);\n      /**\n       * Any content that shows on hover or focus must be dismissible.\n       * This case pressing `Escape` will dismiss the popover\n       */\n\n      triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, event => {\n        if (event.key === \"Escape\") {\n          onClose();\n        }\n      });\n      triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(onOpen, openDelay);\n      });\n      triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n        isHoveringRef.current = false;\n\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = undefined;\n        }\n\n        closeTimeout.current = window.setTimeout(() => {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, closeDelay);\n      });\n    }\n\n    return triggerProps;\n  }, [openDelay, closeDelay, isOpen, onToggle, popoverId, reference.ref, triggerId, trigger, onOpen, onClose]);\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current);\n      }\n\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current);\n      }\n    };\n  }, []);\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    hasHeader,\n    setHasHeader,\n    bodyId,\n    hasBody,\n    setHasBody,\n    getArrowProps,\n    getTriggerProps,\n    getPopoverProps\n  };\n}","map":{"version":3,"sources":["../../src/use-popover.ts"],"names":["TRIGGER_TYPE","click","hover","props","closeOnBlur","closeOnEsc","placement","returnFocusOnClose","autoFocus","trigger","openDelay","closeDelay","isLazy","onToggle","useDisclosure","triggerRef","useRef","popoverRef","isHoveringRef","useBoolean","useIds","fallbackShadowColor","useColorModeValue","shadowColor","arrowShadowColor","arrowColor","useToken","arrow","usePopper","forceUpdate","modifiers","useFocusOnHide","visible","focusRef","useFocusOnShow","useInteractOutside","ref","onInteractOutside","event","onClose","getPopoverProps","useCallback","popoverProps","children","isOpen","id","tabIndex","hidden","role","onKeyDown","callAllHandlers","mergeRefs","popper","style","hasHeader","hasBody","undefined","setTimeout","getArrowProps","openTimeout","closeTimeout","getTriggerProps","triggerProps","reference","popoverId","window","clearTimeout","useEffect"],"mappings":"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","sourcesContent":["import { useBoolean, useDisclosure, useIds } from \"@chakra-ui/hooks\"\nimport { Placement, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { useColorModeValue, useToken } from \"@chakra-ui/system\"\nimport {\n  callAllHandlers,\n  HTMLProps,\n  mergeRefs,\n  PropGetter,\n} from \"@chakra-ui/utils\"\nimport { useInteractOutside } from \"@react-aria/interactions\"\nimport { RefObject, useCallback, useEffect, useRef } from \"react\"\nimport { useFocusOnHide, useFocusOnShow } from \"./popover.utils\"\n\nconst TRIGGER_TYPE = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-decribedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: RefObject<any>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   */\n  autoFocus?: boolean\n  /**\n   * The gap (in pixels) to apply between the popover and the target.\n   * Used by `popper.js`\n   */\n  gutter?: number\n  /**\n   * The placment of the popover\n   */\n  placement?: Placement\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The Popper.js modifiers to use.\n   */\n  modifiers?: UsePopperProps[\"modifiers\"]\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   */\n  trigger?: keyof typeof TRIGGER_TYPE\n  openDelay?: number\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n}\n\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    placement: placementProp,\n    gutter,\n    id,\n    arrowSize,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowShadowColor,\n    modifiers,\n    trigger = TRIGGER_TYPE.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const [hasHeader, setHasHeader] = useBoolean()\n  const [hasBody, setHasBody] = useBoolean()\n\n  const [triggerId, popoverId, headerId, bodyId] = useIds(\n    id,\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  )\n\n  const fallbackShadowColor = useColorModeValue(\"gray.200\", \"whiteAlpha.300\")\n  const shadowColor = arrowShadowColor ?? fallbackShadowColor\n  const arrowColor = useToken(\"colors\", shadowColor, arrowShadowColor)\n\n  const { popper, reference, arrow } = usePopper({\n    placement: placementProp,\n    gutter,\n    forceUpdate: isOpen,\n    arrowSize,\n    arrowShadowColor: arrowColor,\n    modifiers,\n  })\n\n  useFocusOnHide(popoverRef, {\n    autoFocus: returnFocusOnClose,\n    visible: isOpen,\n    focusRef: triggerRef,\n    trigger,\n  })\n\n  useFocusOnShow(popoverRef, {\n    autoFocus: autoFocus,\n    visible: isOpen,\n    focusRef: initialFocusRef,\n    trigger,\n  })\n\n  useInteractOutside({\n    ref: popoverRef,\n    onInteractOutside: (event) => {\n      if (\n        trigger === TRIGGER_TYPE.click &&\n        closeOnBlur &&\n        !triggerRef.current?.contains(event.target as HTMLElement)\n      ) {\n        onClose()\n      }\n    },\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const popoverProps: HTMLProps = {\n        ...props,\n        children: isLazy ? (isOpen ? props.children : null) : props.children,\n        id: popoverId,\n        tabIndex: -1,\n        hidden: !isOpen,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        ref: mergeRefs(popoverRef, popper.ref, ref),\n        style: { ...props.style, ...popper.style },\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER_TYPE.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n          setTimeout(onClose, closeDelay)\n        })\n      }\n\n      return popoverProps\n    },\n    [\n      popoverId,\n      isOpen,\n      isLazy,\n      popper.ref,\n      popper.style,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      closeDelay,\n    ],\n  )\n\n  const getArrowProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(arrow.ref, ref),\n      style: {\n        ...props.style,\n        ...arrow.style,\n      },\n    }),\n    [arrow.ref, arrow.style],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const triggerProps: HTMLProps = {\n        ...props,\n        id: triggerId,\n        ref: mergeRefs(triggerRef, reference.ref, ref),\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER_TYPE.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER_TYPE.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen)\n        triggerProps.onBlur = callAllHandlers(props.onBlur, onClose)\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(onOpen, openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      openDelay,\n      closeDelay,\n      isOpen,\n      onToggle,\n      popoverId,\n      reference.ref,\n      triggerId,\n      trigger,\n      onOpen,\n      onClose,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current)\n      }\n\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current)\n      }\n    }\n  }, [])\n\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    hasHeader,\n    setHasHeader,\n    bodyId,\n    hasBody,\n    setHasBody,\n    getArrowProps,\n    getTriggerProps,\n    getPopoverProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n"]},"metadata":{},"sourceType":"module"}