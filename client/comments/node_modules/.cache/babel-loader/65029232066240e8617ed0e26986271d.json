{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { Portal } from \"@chakra-ui/portal\";\nimport { chakra, useStyleConfig, omitThemingProps, forwardRef } from \"@chakra-ui/system\";\nimport { isString, omit, pick, __DEV__ } from \"@chakra-ui/utils\";\nimport { VisuallyHidden } from \"@chakra-ui/visually-hidden\";\nimport * as React from \"react\";\nimport { useTooltip } from \"./use-tooltip\";\n/**\n * Tooltips display informative text when users hover, focus on, or tap an element.\n *\n * @see Docs     https://chakra-ui.com/components/tooltip\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#tooltip\n */\n\nexport var Tooltip = /*#__PURE__*/forwardRef(function Tooltip(props, ref) {\n  var styles = useStyleConfig(\"Tooltip\", props);\n  var ownProps = omitThemingProps(props);\n\n  var {\n    children,\n    label,\n    shouldWrapChildren,\n    \"aria-label\": ariaLabel,\n    hasArrow\n  } = ownProps,\n      rest = _objectWithoutPropertiesLoose(ownProps, [\"children\", \"label\", \"shouldWrapChildren\", \"aria-label\", \"hasArrow\"]);\n\n  var {\n    isOpen,\n    getTriggerProps,\n    getTooltipProps,\n    getArrowProps\n  } = useTooltip(rest);\n  var shouldWrap = isString(children) || shouldWrapChildren;\n  var trigger;\n\n  if (shouldWrap) {\n    trigger = /*#__PURE__*/React.createElement(chakra.span, _extends({\n      tabIndex: 0\n    }, getTriggerProps()), children);\n  } else {\n    /**\n     * Ensure tooltip has only one child node\n     */\n    var child = React.Children.only(children);\n    trigger = /*#__PURE__*/React.cloneElement(child, getTriggerProps(child.props));\n  }\n\n  var hasAriaLabel = !!ariaLabel;\n\n  var _tooltipProps = getTooltipProps({}, ref);\n\n  var arrowProps = getArrowProps();\n  var tooltipProps = hasAriaLabel ? omit(_tooltipProps, [\"role\", \"id\"]) : _tooltipProps;\n  var hiddenProps = pick(_tooltipProps, [\"role\", \"id\"]);\n  /**\n   * If the `label` is empty, there's no\n   * point showing the tooltip. Let's simply return back the children\n   */\n\n  if (!label) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, trigger, isOpen && /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(chakra.div, _extends({}, tooltipProps, {\n    __css: styles\n  }), label, hasAriaLabel && /*#__PURE__*/React.createElement(VisuallyHidden, hiddenProps, ariaLabel), hasArrow && /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-tooltip__arrow\"\n  }, arrowProps, {\n    __css: {\n      bg: \"inherit\"\n    }\n  })))));\n});\n\nif (__DEV__) {\n  Tooltip.displayName = \"Tooltip\";\n}","map":{"version":3,"sources":["../../src/tooltip.tsx"],"names":["Tooltip","forwardRef","styles","useStyleConfig","ownProps","omitThemingProps","hasArrow","rest","getArrowProps","useTooltip","shouldWrap","isString","trigger","getTriggerProps","child","React","hasAriaLabel","_tooltipProps","getTooltipProps","arrowProps","tooltipProps","omit","hiddenProps","pick","isOpen","bg"],"mappings":"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","sourcesContent":["import { Portal } from \"@chakra-ui/portal\"\nimport {\n  chakra,\n  PropsOf,\n  ThemingProps,\n  useStyleConfig,\n  omitThemingProps,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { isString, omit, pick, __DEV__ } from \"@chakra-ui/utils\"\nimport { VisuallyHidden } from \"@chakra-ui/visually-hidden\"\nimport * as React from \"react\"\nimport { useTooltip, UseTooltipProps } from \"./use-tooltip\"\n\nexport interface TooltipProps\n  extends PropsOf<typeof chakra.div>,\n    ThemingProps,\n    UseTooltipProps {\n  /**\n   * The react component to use as the\n   * trigger for the tooltip\n   */\n  children: React.ReactNode\n  /**\n   * The label of the tooltip\n   */\n  label?: string\n  /**\n   * The accessible, human friendly label to use for\n   * screen readers.\n   *\n   * If passed, tooltip will show the content `label`\n   * but expose only `aria-label` to assistive technologies\n   */\n  \"aria-label\"?: string\n  /**\n   * If `true`, the tooltip will wrap it's children\n   * in a `<span/>` with `tabIndex=0`\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true`, the tooltip will show an arrow tip\n   */\n  hasArrow?: boolean\n}\n\n/**\n * Tooltips display informative text when users hover, focus on, or tap an element.\n *\n * @see Docs     https://chakra-ui.com/components/tooltip\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#tooltip\n */\nexport const Tooltip = forwardRef<TooltipProps, \"div\">(function Tooltip(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Tooltip\", props)\n  const ownProps = omitThemingProps(props)\n\n  const {\n    children,\n    label,\n    shouldWrapChildren,\n    \"aria-label\": ariaLabel,\n    hasArrow,\n    ...rest\n  } = ownProps\n\n  const {\n    isOpen,\n    getTriggerProps,\n    getTooltipProps,\n    getArrowProps,\n  } = useTooltip(rest)\n\n  const shouldWrap = isString(children) || shouldWrapChildren\n\n  let trigger: React.ReactElement\n\n  if (shouldWrap) {\n    trigger = (\n      <chakra.span tabIndex={0} {...getTriggerProps()}>\n        {children}\n      </chakra.span>\n    )\n  } else {\n    /**\n     * Ensure tooltip has only one child node\n     */\n    const child = React.Children.only(children) as React.ReactElement\n    trigger = React.cloneElement(child, getTriggerProps(child.props))\n  }\n\n  const hasAriaLabel = !!ariaLabel\n\n  const _tooltipProps = getTooltipProps({}, ref)\n  const arrowProps = getArrowProps()\n\n  const tooltipProps = hasAriaLabel\n    ? omit(_tooltipProps, [\"role\", \"id\"])\n    : _tooltipProps\n\n  const hiddenProps = pick(_tooltipProps, [\"role\", \"id\"])\n\n  /**\n   * If the `label` is empty, there's no\n   * point showing the tooltip. Let's simply return back the children\n   */\n  if (!label) {\n    return <>{children}</>\n  }\n\n  return (\n    <>\n      {trigger}\n      {isOpen && (\n        <Portal>\n          <chakra.div {...tooltipProps} __css={styles}>\n            {label}\n            {hasAriaLabel && (\n              <VisuallyHidden {...hiddenProps}>{ariaLabel}</VisuallyHidden>\n            )}\n            {hasArrow && (\n              <chakra.div\n                className=\"chakra-tooltip__arrow\"\n                {...arrowProps}\n                __css={{ bg: \"inherit\" }}\n              />\n            )}\n          </chakra.div>\n        </Portal>\n      )}\n    </>\n  )\n})\n\nif (__DEV__) {\n  Tooltip.displayName = \"Tooltip\"\n}\n"]},"metadata":{},"sourceType":"module"}