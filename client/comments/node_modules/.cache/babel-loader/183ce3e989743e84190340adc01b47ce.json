{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { Alert, AlertDescription, AlertIcon, AlertTitle } from \"@chakra-ui/alert\";\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, ColorModeContext, ThemeProvider, useChakra } from \"@chakra-ui/system\";\nimport { isFunction, merge } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { toast } from \"./toast.class\";\n\nvar Toast = function Toast(props) {\n  var status = props.status,\n      variant = props.variant,\n      id = props.id,\n      title = props.title,\n      isClosable = props.isClosable,\n      onClose = props.onClose,\n      description = props.description;\n  return /*#__PURE__*/React.createElement(Alert, {\n    status: status,\n    variant: variant,\n    id: id,\n    alignItems: \"start\",\n    borderRadius: \"md\",\n    boxShadow: \"lg\",\n    margin: 2,\n    paddingRight: 8,\n    textAlign: \"left\",\n    width: \"auto\"\n  }, /*#__PURE__*/React.createElement(AlertIcon, null), /*#__PURE__*/React.createElement(chakra.div, {\n    flex: \"1\"\n  }, title && /*#__PURE__*/React.createElement(AlertTitle, null, title), description && /*#__PURE__*/React.createElement(AlertDescription, {\n    display: \"block\"\n  }, description)), isClosable && /*#__PURE__*/React.createElement(CloseButton, {\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    right: 1,\n    top: 1\n  }));\n};\n\nvar defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\"\n};\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\n\nexport function useToast() {\n  var _useChakra = useChakra(),\n      theme = _useChakra.theme,\n      colorMode = _objectWithoutPropertiesLoose(_useChakra, [\"theme\"]);\n\n  return React.useMemo(function () {\n    var toastImpl = function toastImpl(options) {\n      var render = options.render;\n\n      var Message = function Message(props) {\n        return /*#__PURE__*/React.createElement(ThemeProvider, {\n          theme: theme\n        }, /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n          value: colorMode\n        }, isFunction(render) ? render(props) : /*#__PURE__*/React.createElement(Toast, _extends({}, props, opts))));\n      };\n\n      var opts = merge({}, defaults, options);\n      return toast.notify(Message, opts);\n    };\n\n    toastImpl.close = toast.close;\n    toastImpl.closeAll = toast.closeAll; // toasts can only be updated if they have a valid id\n\n    toastImpl.update = function (id, options) {\n      var render = options.render,\n          rest = _objectWithoutPropertiesLoose(options, [\"render\"]);\n\n      if (!id) return;\n      var opts = merge({}, defaults, rest);\n      toast.update(id, _extends({}, opts, {\n        message: function message(props) {\n          return /*#__PURE__*/React.createElement(ThemeProvider, {\n            theme: theme\n          }, isFunction(render) ? render(props) : /*#__PURE__*/React.createElement(Toast, _extends({}, props, opts)));\n        }\n      }));\n    };\n\n    toastImpl.isActive = toast.isActive;\n    return toastImpl;\n  }, [colorMode, theme]);\n}\nexport default useToast;","map":{"version":3,"sources":["../../src/use-toast.tsx"],"names":["Toast","props","description","title","isClosable","defaults","duration","position","variant","theme","useChakra","toastImpl","render","Message","colorMode","isFunction","opts","merge","toast","message"],"mappings":"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","sourcesContent":["import type { AlertStatus } from \"@chakra-ui/alert\"\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n} from \"@chakra-ui/alert\"\nimport { CloseButton } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  ColorModeContext,\n  ThemeProvider,\n  useChakra,\n} from \"@chakra-ui/system\"\nimport { isFunction, merge } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { toast } from \"./toast.class\"\nimport { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\n\nexport interface UseToastOptions {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastOptions[\"position\"]\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: string\n  /**\n   * The description of the toast\n   */\n  description?: string\n  /**\n   * If `true`, toast will show a close button\n   */\n  isClosable?: boolean\n  /**\n   * The alert component `variant` to use\n   */\n  variant?: string\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n}\n\nexport type IToast = UseToastOptions\n\nconst Toast: React.FC<any> = (props) => {\n  const { status, variant, id, title, isClosable, onClose, description } = props\n\n  return (\n    <Alert\n      status={status}\n      variant={variant}\n      id={id}\n      alignItems=\"start\"\n      borderRadius=\"md\"\n      boxShadow=\"lg\"\n      margin={2}\n      paddingRight={8}\n      textAlign=\"left\"\n      width=\"auto\"\n    >\n      <AlertIcon />\n      <chakra.div flex=\"1\">\n        {title && <AlertTitle>{title}</AlertTitle>}\n        {description && (\n          <AlertDescription display=\"block\">{description}</AlertDescription>\n        )}\n      </chakra.div>\n      {isClosable && (\n        <CloseButton\n          size=\"sm\"\n          onClick={onClose}\n          position=\"absolute\"\n          right={1}\n          top={1}\n        />\n      )}\n    </Alert>\n  )\n}\n\nconst defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\",\n} as const\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast() {\n  const { theme, ...colorMode } = useChakra()\n\n  return React.useMemo(() => {\n    const toastImpl = function (options: UseToastOptions) {\n      const { render } = options\n\n      const Message: React.FC<RenderProps> = (props) => (\n        <ThemeProvider theme={theme}>\n          <ColorModeContext.Provider value={colorMode}>\n            {isFunction(render) ? (\n              render(props)\n            ) : (\n              <Toast {...{ ...props, ...opts }} />\n            )}\n          </ColorModeContext.Provider>\n        </ThemeProvider>\n      )\n\n      const opts = merge({}, defaults, options)\n\n      return toast.notify(Message, opts)\n    }\n\n    toastImpl.close = toast.close\n    toastImpl.closeAll = toast.closeAll\n\n    // toasts can only be updated if they have a valid id\n    toastImpl.update = (id: ToastId, options: Omit<UseToastOptions, \"id\">) => {\n      const { render, ...rest } = options\n\n      if (!id) return\n\n      const opts = merge({}, defaults, rest) as any\n\n      toast.update(id, {\n        ...opts,\n        message: (props) => (\n          <ThemeProvider theme={theme}>\n            {isFunction(render) ? (\n              render(props)\n            ) : (\n              <Toast {...{ ...props, ...opts }} />\n            )}\n          </ThemeProvider>\n        ),\n      })\n    }\n\n    toastImpl.isActive = toast.isActive\n\n    return toastImpl\n  }, [colorMode, theme])\n}\n\nexport default useToast\n"]},"metadata":{},"sourceType":"module"}