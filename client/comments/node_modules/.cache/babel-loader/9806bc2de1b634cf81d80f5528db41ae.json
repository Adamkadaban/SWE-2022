{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = calculateMeasurement;\n\nfunction calculateMeasurement(value, delta) {\n  var op = arguments.length <= 2 || arguments[2] === undefined ? function (a, b) {\n    return a + b;\n  } : arguments[2];\n\n  if (typeof value === 'number') {\n    return op(value, delta);\n  }\n\n  var matches = value.match(/^(-?\\d+)(.*)$/);\n\n  if (matches) {\n    return '' + op(parseFloat(matches[1]), delta) + matches[2];\n  }\n\n  throw new Error('Invalid input format: ' + value);\n}","map":{"version":3,"sources":["/opt/reddit-clone/node_modules/calculate-measurement/lib/calculate-measurement.js"],"names":["Object","defineProperty","exports","value","default","calculateMeasurement","delta","op","arguments","length","undefined","a","b","matches","match","parseFloat","Error"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,oBAAlB;;AACA,SAASA,oBAAT,CAA8BF,KAA9B,EAAqCG,KAArC,EAA4C;AAC1C,MAAIC,EAAE,GAAGC,SAAS,CAACC,MAAV,IAAoB,CAApB,IAAyBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAA1C,GAAsD,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC7E,WAAOD,CAAC,GAAGC,CAAX;AACD,GAFQ,GAELJ,SAAS,CAAC,CAAD,CAFb;;AAIA,MAAI,OAAOL,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOI,EAAE,CAACJ,KAAD,EAAQG,KAAR,CAAT;AACD;;AAED,MAAIO,OAAO,GAAGV,KAAK,CAACW,KAAN,CAAY,eAAZ,CAAd;;AACA,MAAID,OAAJ,EAAa;AACX,WAAO,KAAKN,EAAE,CAACQ,UAAU,CAACF,OAAO,CAAC,CAAD,CAAR,CAAX,EAAyBP,KAAzB,CAAP,GAAyCO,OAAO,CAAC,CAAD,CAAvD;AACD;;AAED,QAAM,IAAIG,KAAJ,CAAU,2BAA2Bb,KAArC,CAAN;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = calculateMeasurement;\nfunction calculateMeasurement(value, delta) {\n  var op = arguments.length <= 2 || arguments[2] === undefined ? function (a, b) {\n    return a + b;\n  } : arguments[2];\n\n  if (typeof value === 'number') {\n    return op(value, delta);\n  }\n\n  var matches = value.match(/^(-?\\d+)(.*)$/);\n  if (matches) {\n    return '' + op(parseFloat(matches[1]), delta) + matches[2];\n  }\n\n  throw new Error('Invalid input format: ' + value);\n}"]},"metadata":{},"sourceType":"script"}