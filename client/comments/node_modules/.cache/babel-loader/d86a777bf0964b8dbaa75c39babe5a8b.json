{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from \"react\";\nimport { Slide, Fade } from \"@chakra-ui/transition\";\nimport { Modal, ModalContent, ModalOverlay } from \"@chakra-ui/modal\";\nimport { forwardRef, useTheme } from \"@chakra-ui/system\";\nimport { __DEV__ } from \"@chakra-ui/utils\";\nvar TransitionContext = /*#__PURE__*/React.createContext({\n  content: {},\n  overlay: {}\n});\nTransitionContext.displayName = \"TransitionContext\";\n\nvar useTransitionContext = function useTransitionContext() {\n  return React.useContext(TransitionContext);\n};\n\nvar DrawerTransition = function DrawerTransition(props) {\n  var inProp = props.in,\n      children = props.children,\n      placement = props.placement;\n  return /*#__PURE__*/React.createElement(Slide, {\n    timeout: 250,\n    in: inProp,\n    placement: placement,\n    transition: \"transform 250ms cubic-bezier(0.16, 1, 0.3, 1)\"\n  }, function (content) {\n    return /*#__PURE__*/React.createElement(Fade, {\n      timeout: 250,\n      in: inProp,\n      transition: \"opacity 250ms cubic-bezier(0.16, 1, 0.3, 1)\"\n    }, function (overlay) {\n      return /*#__PURE__*/React.createElement(TransitionContext.Provider, {\n        value: {\n          content: content,\n          overlay: overlay\n        }\n      }, children);\n    });\n  });\n};\n\nif (__DEV__) {\n  DrawerTransition.displayName = \"DrawerTransition\";\n}\n\nexport var Drawer = function Drawer(props) {\n  var _theme$components;\n\n  var isOpen = props.isOpen,\n      onClose = props.onClose,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"right\" : _props$placement,\n      children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, [\"isOpen\", \"onClose\", \"placement\", \"children\"]);\n\n  var theme = useTheme();\n  var drawerStyleConfig = (_theme$components = theme.components) == null ? void 0 : _theme$components.Drawer;\n  return /*#__PURE__*/React.createElement(DrawerTransition, {\n    in: isOpen,\n    placement: placement\n  }, /*#__PURE__*/React.createElement(Modal, _extends({\n    isOpen: true,\n    onClose: onClose,\n    styleConfig: drawerStyleConfig\n  }, rest), children));\n};\nexport var DrawerContent = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useTransitionContext = useTransitionContext(),\n      styles = _useTransitionContext.content;\n\n  return /*#__PURE__*/React.createElement(ModalContent, _extends({\n    ref: ref,\n    position: \"fixed\",\n    style: styles,\n    marginTop: \"0\",\n    marginBottom: \"0\",\n    borderRadius: \"0\"\n  }, props));\n});\nexport var DrawerOverlay = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _useTransitionContext2 = useTransitionContext(),\n      styles = _useTransitionContext2.overlay;\n\n  return /*#__PURE__*/React.createElement(ModalOverlay, _extends({\n    style: styles,\n    ref: ref\n  }, props));\n});\nexport { ModalBody as DrawerBody, ModalHeader as DrawerHeader, ModalFooter as DrawerFooter, ModalCloseButton as DrawerCloseButton } from \"@chakra-ui/modal\";","map":{"version":3,"sources":["../../src/drawer.tsx"],"names":["TransitionContext","content","overlay","useTransitionContext","React","DrawerTransition","props","in","placement","Drawer","children","theme","useTheme","drawerStyleConfig","DrawerContent","forwardRef","styles","DrawerOverlay","ref","ModalBody","ModalHeader","ModalFooter","ModalCloseButton"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport { Slide, SlideProps, Fade } from \"@chakra-ui/transition\"\nimport {\n  Modal,\n  ModalProps,\n  ModalContentProps,\n  ModalContent,\n  ModalOverlayProps,\n  ModalOverlay,\n} from \"@chakra-ui/modal\"\nimport { forwardRef, useTheme } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\n\ninterface TransitionStyles {\n  content: React.CSSProperties\n  overlay: React.CSSProperties\n}\n\nconst TransitionContext = React.createContext<TransitionStyles>({\n  content: {},\n  overlay: {},\n})\n\nTransitionContext.displayName = \"TransitionContext\"\nconst useTransitionContext = () => React.useContext(TransitionContext)\n\ninterface DrawerTransitionProps {\n  in: boolean\n  children: React.ReactNode\n  placement: SlideProps[\"placement\"]\n}\n\nconst DrawerTransition: React.FC<DrawerTransitionProps> = (props) => {\n  const { in: inProp, children, placement } = props\n  return (\n    <Slide\n      timeout={250}\n      in={inProp}\n      placement={placement}\n      transition=\"transform 250ms cubic-bezier(0.16, 1, 0.3, 1)\"\n    >\n      {(content) => (\n        <Fade\n          timeout={250}\n          in={inProp}\n          transition=\"opacity 250ms cubic-bezier(0.16, 1, 0.3, 1)\"\n        >\n          {(overlay) => (\n            <TransitionContext.Provider value={{ content, overlay }}>\n              {children}\n            </TransitionContext.Provider>\n          )}\n        </Fade>\n      )}\n    </Slide>\n  )\n}\n\nif (__DEV__) {\n  DrawerTransition.displayName = \"DrawerTransition\"\n}\n\nexport interface DrawerProps extends ModalProps {\n  /**\n   * The placement of the drawer\n   */\n  placement?: SlideProps[\"placement\"]\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport const Drawer: React.FC<DrawerProps> = (props) => {\n  const { isOpen, onClose, placement = \"right\", children, ...rest } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n\n  return (\n    <DrawerTransition in={isOpen} placement={placement}>\n      <Modal isOpen onClose={onClose} styleConfig={drawerStyleConfig} {...rest}>\n        {children}\n      </Modal>\n    </DrawerTransition>\n  )\n}\n\nexport const DrawerContent: React.FC<ModalContentProps> = forwardRef(\n  (props, ref) => {\n    const { content: styles } = useTransitionContext()\n    return (\n      <ModalContent\n        ref={ref}\n        position=\"fixed\"\n        style={styles}\n        marginTop=\"0\"\n        marginBottom=\"0\"\n        borderRadius=\"0\"\n        {...props}\n      />\n    )\n  },\n)\n\nexport const DrawerOverlay: React.FC<ModalOverlayProps> = forwardRef(\n  (props, ref) => {\n    const { overlay: styles } = useTransitionContext()\n    return <ModalOverlay style={styles} ref={ref} {...props} />\n  },\n)\n\nexport {\n  ModalBody as DrawerBody,\n  ModalHeader as DrawerHeader,\n  ModalFooter as DrawerFooter,\n  ModalCloseButton as DrawerCloseButton,\n} from \"@chakra-ui/modal\"\n"]},"metadata":{},"sourceType":"module"}