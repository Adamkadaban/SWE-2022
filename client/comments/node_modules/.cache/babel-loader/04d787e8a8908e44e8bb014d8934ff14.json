{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { Icon } from \"@chakra-ui/icon\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useFormControlLabel } from \"./use-form-control\";\nvar [FormControlProvider, useFormControlContext] = createContext({\n  strict: false,\n  name: \"FormControlContext\"\n});\nexport { useFormControlContext };\n\nfunction useFormControlProvider(props) {\n  var {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isLoading,\n    isReadOnly\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"id\", \"isRequired\", \"isInvalid\", \"isDisabled\", \"isLoading\", \"isReadOnly\"]); // Generate all the required ids\n\n\n  var uuid = useId();\n  var id = idProp || \"field-\" + uuid;\n  var labelId = id + \"-label\";\n  var feedbackId = id + \"-feedback\";\n  var helpTextId = id + \"-helptext\";\n  /**\n   * Track of when the `FormHelperText` has been rendered.\n   * We use this to append it's id the the `aria-describedby` of the `input`\n   */\n\n  var [hasHelpText, setHasHelpText] = useBoolean(); // Let's keep track of when we focus the form element (e.g, `input`)\n\n  var [isFocused, setFocus] = useBoolean();\n  var context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isLoading: !!isLoading,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps\n  };\n  return context;\n}\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\n\n\nexport var FormControl = /*#__PURE__*/forwardRef(function FormControl(props, ref) {\n  var styles = useMultiStyleConfig(\"Form\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useFormControlProvid = useFormControlProvider(ownProps),\n      {\n    htmlProps\n  } = _useFormControlProvid,\n      context = _objectWithoutPropertiesLoose(_useFormControlProvid, [\"htmlProps\"]);\n\n  var _className = cx(\"chakra-form-control\", props.className);\n\n  return /*#__PURE__*/React.createElement(FormControlProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    role: \"group\",\n    ref: ref\n  }, htmlProps, {\n    className: _className,\n    __css: {\n      width: \"100%\",\n      position: \"relative\"\n    }\n  }))));\n});\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\";\n}\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\n\n\nexport var FormLabel = /*#__PURE__*/forwardRef(function FormLabel(props, ref) {\n  var styles = useStyleConfig(\"FormLabel\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    children\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"className\", \"children\"]);\n\n  var ownProps = useFormControlLabel(rest);\n  var field = useFormControlContext();\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({\n    ref: ref,\n    className: cx(\"chakra-form__label\", props.className),\n    __css: _extends({\n      display: \"block\",\n      textAlign: \"left\"\n    }, styles)\n  }, ownProps), children, (field == null ? void 0 : field.isRequired) && /*#__PURE__*/React.createElement(RequiredIndicator, null));\n});\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\";\n}\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\n\n\nexport var RequiredIndicator = /*#__PURE__*/forwardRef(function RequiredIndicator(props, ref) {\n  var field = useFormControlContext();\n  var styles = useStyles();\n  if (!(field == null ? void 0 : field.isRequired)) return null;\n\n  var _className = cx(\"chakra-form__required-indicator\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    role: \"presentation\",\n    \"aria-hidden\": true,\n    ref: ref\n  }, props, {\n    __css: styles.requiredIndicator,\n    className: _className,\n    children: props.children || \"*\"\n  }));\n});\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\";\n}\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided\n */\n\n\nexport var FormHelperText = /*#__PURE__*/forwardRef(function FormHelperText(props, ref) {\n  var _props$id;\n\n  var field = useFormControlContext();\n  var styles = useStyles();\n  /**\n   * Notify the field context when the help text is rendered on\n   * screen, so we can apply the correct `aria-describedby` to the field (e.g. input, textarea)\n   */\n\n  useSafeLayoutEffect(() => {\n    if (field == null ? void 0 : field.isInvalid) {\n      return;\n    }\n\n    field == null ? void 0 : field.setHasHelpText.on();\n    return () => field == null ? void 0 : field.setHasHelpText.off();\n  }, []);\n\n  if (field == null ? void 0 : field.isInvalid) {\n    return null;\n  }\n\n  var _className = cx(\"chakra-form__helper-text\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    __css: styles.helperText\n  }, props, {\n    className: _className,\n    id: (_props$id = props.id) != null ? _props$id : field == null ? void 0 : field.helpTextId\n  }));\n});\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\";\n}\n/**\n * Used to provide feedback about an invalid input,\n * and suggest clear instrctions on how to fix it.\n */\n\n\nexport var FormErrorMessage = /*#__PURE__*/forwardRef(function FormErrorMessage(props, ref) {\n  var _props$id2;\n\n  var styles = useStyles();\n  var field = useFormControlContext();\n  if (!(field == null ? void 0 : field.isInvalid)) return null;\n\n  var _className = cx(\"chakra-form__error-message\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    \"aria-live\": \"polite\",\n    ref: ref\n  }, props, {\n    __css: _extends({\n      display: \"flex\",\n      alignItems: \"center\"\n    }, styles.errorText),\n    className: _className,\n    id: (_props$id2 = props.id) != null ? _props$id2 : field == null ? void 0 : field.feedbackId\n  }));\n});\n\nif (__DEV__) {\n  FormErrorMessage.displayName = \"FormErrorMessage\";\n}\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\n\n\nexport var FormErrorIcon = /*#__PURE__*/forwardRef(function FormErrorIcon(props, ref) {\n  var styles = useStyles();\n  var field = useFormControlContext();\n  if (!(field == null ? void 0 : field.isInvalid)) return null;\n\n  var _className = cx(\"chakra-form__error-icon\", props.className);\n\n  return /*#__PURE__*/React.createElement(Icon, _extends({\n    ref: ref,\n    \"aria-hidden\": true\n  }, props, {\n    __css: styles.errorIcon,\n    className: _className\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n  }));\n});\n\nif (__DEV__) {\n  FormErrorIcon.displayName = \"FormErrorIcon\";\n}","map":{"version":3,"sources":["../../src/form-control.tsx"],"names":["createContext","strict","name","id","isReadOnly","htmlProps","uuid","useId","idProp","labelId","feedbackId","helpTextId","useBoolean","context","isRequired","isInvalid","isLoading","isDisabled","isFocused","onFocus","setFocus","onBlur","FormControl","forwardRef","styles","useMultiStyleConfig","ownProps","omitThemingProps","useFormControlProvider","_className","cx","props","ref","width","position","FormLabel","useStyleConfig","children","rest","useFormControlLabel","field","useFormControlContext","display","textAlign","RequiredIndicator","useStyles","FormHelperText","useSafeLayoutEffect","helperText","FormErrorMessage","alignItems","FormErrorIcon"],"mappings":"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","sourcesContent":["import { useBoolean, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport { Icon, IconProps } from \"@chakra-ui/icon\"\nimport {\n  chakra,\n  forwardRef,\n  PropsOf,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useFormControlLabel } from \"./use-form-control\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-requred` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the form control will be in it's `loading` state\n   */\n  isLoading?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The error message to be displayed when `isInvalid` is set to `true`\n   */\n  errorText?: string\n  /**\n   * The assistive text to be displayed that provides additional guidance to users\n   */\n  helperText?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype ControlContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] = createContext<\n  ControlContext\n>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isLoading,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track of when the `FormHelperText` has been rendered.\n   * We use this to append it's id the the `aria-describedby` of the `input`\n   */\n  const [hasHelpText, setHasHelpText] = useBoolean()\n\n  // Let's keep track of when we focus the form element (e.g, `input`)\n  const [isFocused, setFocus] = useBoolean()\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isLoading: !!isLoading,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  }\n\n  return context\n}\n\nexport interface FormControlProps\n  extends PropsOf<typeof chakra.div>,\n    ThemingProps,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const { htmlProps, ...context } = useFormControlProvider(ownProps)\n\n    const _className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <StylesProvider value={styles}>\n          <chakra.div\n            role=\"group\"\n            ref={ref}\n            {...htmlProps}\n            className={_className}\n            __css={{\n              width: \"100%\",\n              position: \"relative\",\n            }}\n          />\n        </StylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface FormLabelProps\n  extends PropsOf<typeof chakra.label>,\n    ThemingProps {}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", props)\n  const { className, children, ...rest } = omitThemingProps(props)\n\n  const ownProps = useFormControlLabel(rest)\n  const field = useFormControlContext()\n\n  return (\n    <chakra.label\n      ref={ref}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"left\",\n        ...styles,\n      }}\n      {...ownProps}\n    >\n      {children}\n      {field?.isRequired && <RequiredIndicator />}\n    </chakra.label>\n  )\n})\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\"\n}\n\nexport interface RequiredIndicatorProps extends PropsOf<typeof chakra.span> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useStyles()\n\n    if (!field?.isRequired) return null\n\n    const _className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        role=\"presentation\"\n        aria-hidden\n        ref={ref}\n        {...props}\n        __css={styles.requiredIndicator}\n        className={_className}\n        children={props.children || \"*\"}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\"\n}\n\nexport interface HelpTextProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useStyles()\n\n    /**\n     * Notify the field context when the help text is rendered on\n     * screen, so we can apply the correct `aria-describedby` to the field (e.g. input, textarea)\n     */\n    useSafeLayoutEffect(() => {\n      if (field?.isInvalid) {\n        return\n      }\n\n      field?.setHasHelpText.on()\n      return () => field?.setHasHelpText.off()\n    }, [])\n\n    if (field?.isInvalid) {\n      return null\n    }\n\n    const _className = cx(\"chakra-form__helper-text\", props.className)\n\n    return (\n      <chakra.div\n        ref={ref}\n        __css={styles.helperText}\n        {...props}\n        className={_className}\n        id={props.id ?? field?.helpTextId}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n\nexport interface FormErrorMessageProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * Used to provide feedback about an invalid input,\n * and suggest clear instrctions on how to fix it.\n */\nexport const FormErrorMessage = forwardRef<FormErrorMessageProps, \"div\">(\n  function FormErrorMessage(props, ref) {\n    const styles = useStyles()\n    const field = useFormControlContext()\n\n    if (!field?.isInvalid) return null\n\n    const _className = cx(\"chakra-form__error-message\", props.className)\n\n    return (\n      <chakra.div\n        aria-live=\"polite\"\n        ref={ref}\n        {...props}\n        __css={{\n          display: \"flex\",\n          alignItems: \"center\",\n          ...styles.errorText,\n        }}\n        className={_className}\n        id={props.id ?? field?.feedbackId}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  FormErrorMessage.displayName = \"FormErrorMessage\"\n}\n\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\nexport const FormErrorIcon = forwardRef<IconProps, \"svg\">(\n  function FormErrorIcon(props, ref) {\n    const styles = useStyles()\n    const field = useFormControlContext()\n\n    if (!field?.isInvalid) return null\n\n    const _className = cx(\"chakra-form__error-icon\", props.className)\n\n    return (\n      <Icon\n        ref={ref}\n        aria-hidden\n        {...props}\n        __css={styles.errorIcon}\n        className={_className}\n      >\n        <path\n          fill=\"currentColor\"\n          d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n        />\n      </Icon>\n    )\n  },\n)\n\nif (__DEV__) {\n  FormErrorIcon.displayName = \"FormErrorIcon\"\n}\n"]},"metadata":{},"sourceType":"module"}