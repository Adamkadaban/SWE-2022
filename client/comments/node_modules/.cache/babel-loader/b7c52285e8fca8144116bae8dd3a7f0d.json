{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, css, forwardRef, useTheme } from \"@chakra-ui/system\";\nimport { getValidChildren, mapResponsive, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/components/wrap\n */\n\nexport var Wrap = /*#__PURE__*/forwardRef(function Wrap(props, ref) {\n  var _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n      children = props.children,\n      justify = props.justify,\n      direction = props.direction,\n      align = props.align,\n      rest = _objectWithoutPropertiesLoose(props, [\"spacing\", \"children\", \"justify\", \"direction\", \"align\"]);\n\n  var theme = useTheme();\n  var itemSpacing = mapResponsive(spacing, function (value) {\n    var _css = css({\n      margin: value\n    })(theme),\n        margin = _css.margin;\n\n    return \"calc(\" + margin + \" / 2)\";\n  });\n  var groupSpacing = mapResponsive(spacing, function (value) {\n    var _css2 = css({\n      margin: value\n    })(theme),\n        margin = _css2.margin;\n\n    return \"calc(\" + margin + \" / 2 * -1)\";\n  });\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(function (child, index) {\n    return /*#__PURE__*/React.createElement(chakra.li, {\n      key: index,\n      margin: itemSpacing\n    }, child);\n  });\n  var styles = {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: justify,\n    alignItems: align,\n    flexDirection: direction,\n    listStyleType: \"none\",\n    padding: \"0\",\n    margin: groupSpacing\n  };\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, rest), /*#__PURE__*/React.createElement(chakra.ul, {\n    __css: styles\n  }, clones));\n});\n\nif (__DEV__) {\n  Wrap.displayName = \"Wrap\";\n}","map":{"version":3,"sources":["../../src/wrap.tsx"],"names":["Wrap","forwardRef","spacing","align","theme","useTheme","itemSpacing","mapResponsive","value","margin","groupSpacing","validChildren","getValidChildren","clones","styles","display","flexWrap","justifyContent","alignItems","flexDirection","listStyleType","padding","ref"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,GAAA,EAAA,UAAA,EAAA,QAAA,QAAA,mBAAA;AAQA,SAAA,gBAAA,EAAA,aAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAqBA;;;;;;;;;;;AAUA,OAAO,IAAMA,IAAI,GAAA,aAAGC,UAAU,CAAmB,SAAA,IAAA,CAAA,KAAA,EAAA,GAAA,EAA0B;AAAA,uBACzE,KADyE,CAEvEC,OAFuE;AAAA,MAEvEA,OAFuE,+BACnE,QADmE;AAAA,MACnE,QADmE,GACzE,KADyE,CACnE,QADmE;AAAA,MACnE,OADmE,GACzE,KADyE,CACnE,OADmE;AAAA,MACnE,SADmE,GACzE,KADyE,CACnE,SADmE;AAAA,MAMvEC,KANuE,GACzE,KADyE,CAMvEA,KANuE;AAAA,MACzE,IADyE,GACzE,6BAAA,CAAA,KAAA,EAAA,CAAA,SAAA,EAAA,UAAA,EAAA,SAAA,EAAA,WAAA,EAAA,OAAA,CAAA,CADyE;;AAUzE,MAAMC,KAAK,GAAGC,QAAd,EAAA;AAEA,MAAMC,WAAW,GAAGC,aAAa,CAAA,OAAA,EAAWC,UAAAA,KAAD,EAAW;AAAA,eACjC,GAAG,CAAC;AAAEC,MAAAA,MAAM,EAAED;AAAV,KAAD,CAAH,CAAnB,KAAmB,CADiC;AAAA,QAC5CC,MAD4C,QAC5CA,MAD4C;;AAEpD,WAAA,UAAA,MAAA,GAAA,OAAA;AAFF,GAAiC,CAAjC;AAKA,MAAMC,YAAY,GAAGH,aAAa,CAAA,OAAA,EAAWC,UAAAA,KAAD,EAAW;AAAA,gBAClC,GAAG,CAAC;AAAEC,MAAAA,MAAM,EAAED;AAAV,KAAD,CAAH,CAAnB,KAAmB,CADkC;AAAA,QAC7CC,MAD6C,SAC7CA,MAD6C;;AAErD,WAAA,UAAA,MAAA,GAAA,YAAA;AAFF,GAAkC,CAAlC;AAKA,MAAME,aAAa,GAAGC,gBAAgB,CAAtC,QAAsC,CAAtC;AAEA,MAAMC,MAAM,GAAG,aAAa,CAAb,GAAA,CAAkB,UAAA,KAAA,EAAA,KAAA;AAAA,WAAA,aAC/B,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,EAAA,EAAA;AAAW,MAAA,GAAG,EAAd,KAAA;AAAuB,MAAA,MAAM,EAAEP;AAA/B,KAAA,EADF,KACE,CAD+B;AAAA,GAAlB,CAAf;AAMA,MAAMQ,MAAM,GAAG;AACbC,IAAAA,OAAO,EADM,MAAA;AAEbC,IAAAA,QAAQ,EAFK,MAAA;AAGbC,IAAAA,cAAc,EAHD,OAAA;AAIbC,IAAAA,UAAU,EAJG,KAAA;AAKbC,IAAAA,aAAa,EALA,SAAA;AAMbC,IAAAA,aAAa,EANA,MAAA;AAObC,IAAAA,OAAO,EAPM,GAAA;AAQbZ,IAAAA,MAAM,EAAEC;AARK,GAAf;AAWA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,GAAA,EAAA,QAAA,CAAA;AAAY,IAAA,GAAG,EAAEY;AAAjB,GAAA,EAAA,IAAA,CAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,EAAA,EAAA;AAAW,IAAA,KAAK,EAAER;AAAlB,GAAA,EAFJ,MAEI,CADF,CADF;AAzCK,CAAuB,CAAvB;;AAgDP,IAAA,OAAA,EAAa;AACXd,EAAAA,IAAI,CAAJA,WAAAA,GAAAA,MAAAA;AACD","sourcesContent":["import {\n  chakra,\n  css,\n  forwardRef,\n  PropsOf,\n  SystemProps,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { getValidChildren, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface WrapProps extends PropsOf<typeof chakra.div> {\n  /**\n   * The space between the each child (even if it wraps)\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   */\n  direction?: SystemProps[\"flexDirection\"]\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/components/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">(function Wrap(props, ref) {\n  const {\n    spacing = \"0.5rem\",\n    children,\n    justify,\n    direction,\n    align,\n    ...rest\n  } = props\n\n  const theme = useTheme()\n\n  const itemSpacing = mapResponsive(spacing, (value) => {\n    const { margin } = css({ margin: value })(theme)\n    return `calc(${margin} / 2)`\n  })\n\n  const groupSpacing = mapResponsive(spacing, (value) => {\n    const { margin } = css({ margin: value })(theme)\n    return `calc(${margin} / 2 * -1)`\n  })\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child, index) => (\n    <chakra.li key={index} margin={itemSpacing}>\n      {child}\n    </chakra.li>\n  ))\n\n  const styles = {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: justify,\n    alignItems: align,\n    flexDirection: direction,\n    listStyleType: \"none\",\n    padding: \"0\",\n    margin: groupSpacing,\n  }\n\n  return (\n    <chakra.div ref={ref} {...rest}>\n      <chakra.ul __css={styles}>{clones}</chakra.ul>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Wrap.displayName = \"Wrap\"\n}\n"]},"metadata":{},"sourceType":"module"}