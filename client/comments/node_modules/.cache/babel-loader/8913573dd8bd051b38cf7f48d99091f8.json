{"ast":null,"code":"import _defineProperty2 from \"/root/Desktop/SWE-2022/client/comments/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/root/Desktop/SWE-2022/client/comments/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/root/Desktop/SWE-2022/client/comments/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/root/Desktop/SWE-2022/client/comments/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/root/Desktop/SWE-2022/client/comments/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createSuper from \"/root/Desktop/SWE-2022/client/comments/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _inherits from \"/root/Desktop/SWE-2022/client/comments/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { objectKeys } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { Toast } from \"./toast\";\nimport { findToast, getToastPosition } from \"./toast.utils\";\n/**\n * Manages the creation, and removal of toasts\n * across all corners (\"top\", \"bottom\", etc.)\n */\n\nexport var ToastManager = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToastManager, _React$Component);\n\n  var _super = _createSuper(ToastManager);\n\n  /**\n   * Static id counter to create unique ids\n   * for each toast\n   */\n\n  /**\n   * State to track all the toast across all positions\n   */\n  function ToastManager(props) {\n    var _this;\n\n    _classCallCheck(this, ToastManager);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      top: [],\n      \"top-left\": [],\n      \"top-right\": [],\n      \"bottom-left\": [],\n      bottom: [],\n      \"bottom-right\": []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"notify\", function (message, options) {\n      var toast = _this.createToast(message, options);\n\n      var position = toast.position,\n          id = toast.id;\n\n      _this.setState(function (prevToasts) {\n        /**\n         * - If the toast is positioned at the top edges, the\n         * recent toast stacks on top of the other toasts.\n         *\n         * - If the toast is positioned at the bottom edges, the recent\n         * toast stacks below the other toasts.\n         */\n        var isTop = position.includes(\"top\");\n        return _extends({}, prevToasts, _defineProperty2({}, position, isTop ? [toast].concat(_toConsumableArray(prevToasts[position])) : [].concat(_toConsumableArray(prevToasts[position]), [toast])));\n      });\n\n      return id;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateToast\", function (id, options) {\n      _this.setState(function (prevState) {\n        var nextState = _extends({}, prevState);\n\n        var _findToast = findToast(nextState, id),\n            position = _findToast.position,\n            index = _findToast.index;\n\n        if (position && index !== -1) {\n          nextState[position][index] = _extends({}, nextState[position][index], options);\n        }\n\n        return nextState;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeAll\", function () {\n      objectKeys(_this.state).forEach(function (position) {\n        _this.state[position].forEach(function (toast) {\n          _this.closeToast(toast.id);\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createToast\", function (message, options) {\n      var _options$id, _options$position;\n\n      var id = (_options$id = options.id) != null ? _options$id : ++ToastManager.counter;\n      var position = (_options$position = options.position) != null ? _options$position : \"top\";\n      return {\n        id: id,\n        message: message,\n        position: position,\n        duration: options.duration,\n        onCloseComplete: options.onCloseComplete,\n        onRequestRemove: function onRequestRemove() {\n          return _this.removeToast(String(id), position);\n        },\n        status: options.status\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeToast\", function (id) {\n      _this.setState(function (prevState) {\n        var position = getToastPosition(prevState, id);\n        if (!position) return prevState;\n        return _extends({}, prevState, _defineProperty2({}, position, prevState[position].map(function (toast) {\n          return _extends({}, toast, {\n            requestClose: toast.id == id\n          });\n        })));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeToast\", function (id, position) {\n      _this.setState(function (prevState) {\n        return _extends({}, prevState, _defineProperty2({}, position, prevState[position].filter(function (toast) {\n          return toast.id != id;\n        })));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isVisible\", function (id) {\n      var _findToast2 = findToast(_this.state, id),\n          position = _findToast2.position;\n\n      return Boolean(position);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getStyle\", function (position) {\n      var style = {\n        position: \"fixed\",\n        zIndex: 5500,\n        pointerEvents: \"none\"\n      };\n\n      if (position === \"top\" || position === \"bottom\") {\n        style.margin = \"0 auto\";\n        style.textAlign = \"center\";\n      }\n\n      if (position.includes(\"top\")) {\n        style.top = 0;\n      }\n\n      if (position.includes(\"bottom\")) {\n        style.bottom = 0;\n      }\n\n      if (!position.includes(\"left\")) {\n        style.right = 0;\n      }\n\n      if (!position.includes(\"right\")) {\n        style.left = 0;\n      }\n\n      return style;\n    });\n\n    var methods = {\n      notify: _this.notify,\n      closeAll: _this.closeAll,\n      close: _this.closeToast,\n      update: _this.updateToast,\n      isActive: _this.isVisible\n    };\n    props.notify(methods);\n    return _this;\n  }\n  /**\n   * Function to actually create a toast and add it\n   * to state at the specified position\n   */\n\n\n  _createClass(ToastManager, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return objectKeys(this.state).map(function (position) {\n        var toasts = _this2.state[position];\n        return /*#__PURE__*/React.createElement(\"span\", {\n          key: position,\n          id: \"chakra-toast-manager-\" + position,\n          style: _this2.getStyle(position)\n        }, toasts.map(function (toast) {\n          return /*#__PURE__*/React.createElement(Toast, _extends({\n            key: toast.id\n          }, toast));\n        }));\n      });\n    }\n  }]);\n\n  return ToastManager;\n}(React.Component);\n\n_defineProperty(ToastManager, \"counter\", 0);","map":{"version":3,"sources":["../../src/toast-manager.tsx"],"names":["ToastManager","React","top","bottom","constructor","methods","notify","closeAll","close","update","isActive","isVisible","props","toast","id","prevToasts","isTop","position","prevState","nextState","index","findToast","objectKeys","options","message","duration","onCloseComplete","onRequestRemove","String","status","getToastPosition","requestClose","Boolean","style","zIndex","pointerEvents","toasts"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,UAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,KAAA,QAAA,SAAA;AAOA,SAAA,SAAA,EAAA,gBAAA,QAAA,eAAA;AAuBA;;;;;AAIA,WAAO,YAAP;AAAA;;AAAA;;AACE;;;;;AAMA;;;AAYAI,wBAAW,KAAXA,EAA0B;AAAA;;AAAA;;AACxB,8BAAA,KAAA;;AADwB,IAAA,eAAA,gCAAA,OAAA,EATX;AACbF,MAAAA,GAAG,EADU,EAAA;AAEb,kBAFa,EAAA;AAGb,mBAHa,EAAA;AAIb,qBAJa,EAAA;AAKbC,MAAAA,MAAM,EALO,EAAA;AAMb,sBAAgB;AANH,KASW,CAAA;;AAAA,IAAA,eAAA,gCAAA,QAAA,EAkBjB,UAAA,OAAA,EAAA,OAAA,EAAwD;AAC/D,UAAMU,KAAK,GAAG,MAAA,WAAA,CAAA,OAAA,EAAd,OAAc,CAAd;;AAD+D,UAEzD,QAFyD,GAE/D,KAF+D,CAEzD,QAFyD;AAAA,UAE7CC,EAF6C,GAE/D,KAF+D,CAE7CA,EAF6C;;AAI/D,YAAA,QAAA,CAAeC,UAAAA,UAAD,EAAgB;AAC5B;;;;;;;AAOA,YAAMC,KAAK,GAAGC,QAAQ,CAARA,QAAAA,CAAd,KAAcA,CAAd;AAEA,eAAA,QAAA,CAAA,EAAA,EAAA,UAAA,uBAEE,QAFF,EAEcD,KAAK,IACb,KADa,4BACFD,UAAU,CADR,QACQ,CADR,kCAETA,UAAU,CAAd,QAAc,CAFD,IAEb,KAFa,EAFnB,EAAA;AAVF,OAAA;;AAkBA,aAAA,EAAA;AAxCwB,KAAA,CAAA;;AAAA,IAAA,eAAA,gCAAA,aAAA,EA+CZ,UAAA,EAAA,EAAA,OAAA,EAA8C;AAC1D,YAAA,QAAA,CAAeG,UAAAA,SAAD,EAAe;AAC3B,YAAMC,SAAS,GAAA,QAAA,CAAA,EAAA,EAAf,SAAe,CAAf;;AAD2B,yBAECE,SAAS,CAAA,SAAA,EAArC,EAAqC,CAFV;AAAA,YAErB,QAFqB,cAErB,QAFqB;AAAA,YAETD,KAFS,cAETA,KAFS;;AAI3B,YAAIH,QAAQ,IAAIG,KAAK,KAAK,CAA1B,CAAA,EAA8B;AAC5BD,UAAAA,SAAS,CAATA,QAAS,CAATA,CAAAA,KAAAA,IAAAA,QAAAA,CAAAA,EAAAA,EACKA,SAAS,CAATA,QAAS,CAATA,CADLA,KACKA,CADLA,EAAAA,OAAAA,CAAAA;AAID;;AAED,eAAA,SAAA;AAXF,OAAA;AAhDwB,KAAA,CAAA;;AAAA,IAAA,eAAA,gCAAA,UAAA,EAkEf,YAAM;AACfG,MAAAA,UAAU,CAAC,MAAXA,KAAU,CAAVA,CAAAA,OAAAA,CAAgCL,UAAAA,QAAD,EAAc;AAC3C,cAAA,KAAA,CAAA,QAAA,EAAA,OAAA,CAA8BJ,UAAAA,KAAD,EAAW;AACtC,gBAAA,UAAA,CAAgBA,KAAK,CAArB,EAAA;AADF,SAAA;AADFS,OAAAA;AAnEwB,KAAA,CAAA;;AAAA,IAAA,eAAA,gCAAA,aAAA,EA6EZ,UAAA,OAAA,EAAA,OAAA,EAAwD;AAAA,UAAA,WAAA,EAAA,iBAAA;;AACpE,UAAMR,EAAE,GAAA,CAAA,WAAA,GAAGS,OAAO,CAAV,EAAA,KAAA,IAAA,GAAA,WAAA,GAAiB,EAAEvB,YAAY,CAAvC,OAAA;AAEA,UAAMiB,QAAQ,GAAA,CAAA,iBAAA,GAAGM,OAAO,CAAV,QAAA,KAAA,IAAA,GAAA,iBAAA,GAAd,KAAA;AAEA,aAAO;AACLT,QAAAA,EADK,EACLA,EADK;AAELU,QAAAA,OAFK,EAELA,OAFK;AAGLP,QAAAA,QAHK,EAGLA,QAHK;AAILQ,QAAAA,QAAQ,EAAEF,OAAO,CAJZ,QAAA;AAKLG,QAAAA,eAAe,EAAEH,OAAO,CALnB,eAAA;AAMLI,QAAAA,eAAe,EAAE;AAAA,iBAAM,MAAA,WAAA,CAAiBC,MAAM,CAAvB,EAAuB,CAAvB,EANlB,QAMkB,CAAN;AAAA,SANZ;AAOLC,QAAAA,MAAM,EAAEN,OAAO,CAACM;AAPX,OAAP;AAlFwB,KAAA,CAAA;;AAAA,IAAA,eAAA,gCAAA,YAAA,EAgGZf,UAAAA,EAAD,EAAiB;AAC5B,YAAA,QAAA,CAAeI,UAAAA,SAAD,EAAe;AAC3B,YAAMD,QAAQ,GAAGa,gBAAgB,CAAA,SAAA,EAAjC,EAAiC,CAAjC;AAEA,YAAI,CAAJ,QAAA,EAAe,OAAA,SAAA;AAEf,eAAA,QAAA,CAAA,EAAA,EAAA,SAAA,uBAEE,QAFF,EAEc,SAAS,CAAT,QAAS,CAAT,CAAA,GAAA,CAAyBjB,UAAAA,KAAD;AAAA,iBAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAElCkB,YAAAA,YAAY,EAAElB,KAAK,CAALA,EAAAA,IAAYC;AAFQ,WAAA,CAAA;AAAA,SAAxB,CAFd,EAAA;AALF,OAAA;AAjGwB,KAAA,CAAA;;AAAA,IAAA,eAAA,gCAAA,aAAA,EAmHZ,UAAA,EAAA,EAAA,QAAA,EAA0C;AACtD,YAAA,QAAA,CAAeI,UAAAA,SAAD,EAAe;AAC3B,eAAA,QAAA,CAAA,EAAA,EAAA,SAAA,uBAEE,QAFF,EAEcA,SAAS,CAATA,QAAS,CAATA,CAAAA,MAAAA,CAA4BL,UAAAA,KAAD;AAAA,iBAAWA,KAAK,CAALA,EAAAA,IAAtCK,EAA2B;AAAA,SAA3BA,CAFd,EAAA;AADF,OAAA;AApHwB,KAAA,CAAA;;AAAA,IAAA,eAAA,gCAAA,WAAA,EA4HbJ,UAAAA,EAAD,EAAiB;AAAA,wBACNO,SAAS,CAAC,MAAD,KAAA,EAA9B,EAA8B,CADH;AAAA,UACnBJ,QADmB,eACnBA,QADmB;;AAE3B,aAAOe,OAAO,CAAd,QAAc,CAAd;AA9HwB,KAAA,CAAA;;AAAA,IAAA,eAAA,gCAAA,UAAA,EAoIdf,UAAAA,QAAD,EAA6B;AACtC,UAAMgB,KAA0B,GAAG;AACjChB,QAAAA,QAAQ,EADyB,OAAA;AAEjCiB,QAAAA,MAAM,EAF2B,IAAA;AAGjCC,QAAAA,aAAa,EAAE;AAHkB,OAAnC;;AAMA,UAAIlB,QAAQ,KAARA,KAAAA,IAAsBA,QAAQ,KAAlC,QAAA,EAAiD;AAC/CgB,QAAAA,KAAK,CAALA,MAAAA,GAAAA,QAAAA;AACAA,QAAAA,KAAK,CAALA,SAAAA,GAAAA,QAAAA;AACD;;AAED,UAAIhB,QAAQ,CAARA,QAAAA,CAAJ,KAAIA,CAAJ,EAA8B;AAC5BgB,QAAAA,KAAK,CAALA,GAAAA,GAAAA,CAAAA;AACD;;AAED,UAAIhB,QAAQ,CAARA,QAAAA,CAAJ,QAAIA,CAAJ,EAAiC;AAC/BgB,QAAAA,KAAK,CAALA,MAAAA,GAAAA,CAAAA;AACD;;AAED,UAAI,CAAChB,QAAQ,CAARA,QAAAA,CAAL,MAAKA,CAAL,EAAgC;AAC9BgB,QAAAA,KAAK,CAALA,KAAAA,GAAAA,CAAAA;AACD;;AAED,UAAI,CAAChB,QAAQ,CAARA,QAAAA,CAAL,OAAKA,CAAL,EAAiC;AAC/BgB,QAAAA,KAAK,CAALA,IAAAA,GAAAA,CAAAA;AACD;;AAED,aAAA,KAAA;AAhKwB,KAAA,CAAA;;AAGxB,QAAM5B,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE,MADM,MAAA;AAEdC,MAAAA,QAAQ,EAAE,MAFI,QAAA;AAGdC,MAAAA,KAAK,EAAE,MAHO,UAAA;AAIdC,MAAAA,MAAM,EAAE,MAJM,WAAA;AAKdC,MAAAA,QAAQ,EAAE,MAAKC;AALD,KAAhB;AAQAC,IAAAA,KAAK,CAALA,MAAAA,CAAAA,OAAAA;AAXwB;AAYzB;AAED;;;;;;AAjCF;AAAA;AAAA,6BAsLW;AAAA;;AACP,aAAO,UAAU,CAAC,KAAX,KAAU,CAAV,CAAA,GAAA,CAA4BK,UAAAA,QAAD,EAAc;AAC9C,YAAMmB,MAAM,GAAG,MAAA,CAAA,KAAA,CAAf,QAAe,CAAf;AACA,eAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACE,UAAA,GAAG,EADL,QAAA;AAEE,UAAA,EAAE,EAAE,0BAFN,QAAA;AAGE,UAAA,KAAK,EAAE,MAAA,CAAA,QAAA,CAAA,QAAA;AAHT,SAAA,EAKGA,MAAM,CAANA,GAAAA,CAAYvB,UAAAA,KAAD;AAAA,iBAAA,aACV,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AAAO,YAAA,GAAG,EAAEA,KAAK,CAACC;AAAlB,WAAA,EAPN,KAOM,CAAA,CADU;AAAA,SAAXsB,CALH,CADF;AAFF,OAAO,CAAP;AAcD;AArMH;;AAAA;AAAA,EAAkCnC,KAAK,CAAhC,SAAP;;gBAAaD,Y,aAKM,C","sourcesContent":["import { objectKeys } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Toast } from \"./toast\"\nimport {\n  ToastId,\n  ToastMessage,\n  ToastOptions,\n  ToastPosition,\n} from \"./toast.types\"\nimport { findToast, getToastPosition } from \"./toast.utils\"\n\nexport interface Methods {\n  notify: (message: ToastMessage, options: CreateToastOptions) => ToastId\n  closeAll: () => void\n  close: (id: ToastId) => void\n  update: (id: ToastId, options: CreateToastOptions) => void\n  isActive: (id: ToastId) => boolean\n}\n\ninterface Props {\n  notify: (methods: Methods) => void\n}\n\ntype State = { [K in ToastPosition]: ToastOptions[] }\n\ntype CreateToastOptions = Partial<\n  Pick<\n    ToastOptions,\n    \"status\" | \"duration\" | \"position\" | \"id\" | \"onCloseComplete\"\n  >\n>\n\n/**\n * Manages the creation, and removal of toasts\n * across all corners (\"top\", \"bottom\", etc.)\n */\nexport class ToastManager extends React.Component<Props, State> {\n  /**\n   * Static id counter to create unique ids\n   * for each toast\n   */\n  static counter = 0\n\n  /**\n   * State to track all the toast across all positions\n   */\n  state: State = {\n    top: [],\n    \"top-left\": [],\n    \"top-right\": [],\n    \"bottom-left\": [],\n    bottom: [],\n    \"bottom-right\": [],\n  }\n\n  constructor(props: Props) {\n    super(props)\n\n    const methods = {\n      notify: this.notify,\n      closeAll: this.closeAll,\n      close: this.closeToast,\n      update: this.updateToast,\n      isActive: this.isVisible,\n    }\n\n    props.notify(methods)\n  }\n\n  /**\n   * Function to actually create a toast and add it\n   * to state at the specified position\n   */\n  notify = (message: ToastMessage, options: CreateToastOptions) => {\n    const toast = this.createToast(message, options)\n    const { position, id } = toast\n\n    this.setState((prevToasts) => {\n      /**\n       * - If the toast is positioned at the top edges, the\n       * recent toast stacks on top of the other toasts.\n       *\n       * - If the toast is positioned at the bottom edges, the recent\n       * toast stacks below the other toasts.\n       */\n      const isTop = position.includes(\"top\")\n\n      return {\n        ...prevToasts,\n        [position]: isTop\n          ? [toast, ...prevToasts[position]]\n          : [...prevToasts[position], toast],\n      }\n    })\n\n    return id\n  }\n\n  /**\n   * Update a specific toast with new options based on the\n   * passed `id`\n   */\n  updateToast = (id: ToastId, options: CreateToastOptions) => {\n    this.setState((prevState) => {\n      const nextState = { ...prevState }\n      const { position, index } = findToast(nextState, id)\n\n      if (position && index !== -1) {\n        nextState[position][index] = {\n          ...nextState[position][index],\n          ...options,\n        }\n      }\n\n      return nextState\n    })\n  }\n\n  /**\n   * Close all toasts at once\n   */\n  closeAll = () => {\n    objectKeys(this.state).forEach((position) => {\n      this.state[position].forEach((toast) => {\n        this.closeToast(toast.id)\n      })\n    })\n  }\n\n  /**\n   * Create properties for a new toast\n   */\n  createToast = (message: ToastMessage, options: CreateToastOptions) => {\n    const id = options.id ?? ++ToastManager.counter\n\n    const position = options.position ?? \"top\"\n\n    return {\n      id,\n      message,\n      position,\n      duration: options.duration,\n      onCloseComplete: options.onCloseComplete,\n      onRequestRemove: () => this.removeToast(String(id), position),\n      status: options.status,\n    }\n  }\n\n  /**\n   * Requests to close a toast based on it's id and position\n   */\n  closeToast = (id: ToastId) => {\n    this.setState((prevState) => {\n      const position = getToastPosition(prevState, id)\n\n      if (!position) return prevState\n\n      return {\n        ...prevState,\n        [position]: prevState[position].map((toast) => ({\n          ...toast,\n          requestClose: toast.id == id,\n        })),\n      }\n    })\n  }\n\n  /**\n   * Delete a toast record at it's position\n   */\n  removeToast = (id: ToastId, position: ToastPosition) => {\n    this.setState((prevState) => {\n      return {\n        ...prevState,\n        [position]: prevState[position].filter((toast) => toast.id != id),\n      }\n    })\n  }\n\n  isVisible = (id: ToastId) => {\n    const { position } = findToast(this.state, id)\n    return Boolean(position)\n  }\n\n  /**\n   * Compute the style of a toast based on it's position\n   */\n  getStyle = (position: ToastPosition) => {\n    const style: React.CSSProperties = {\n      position: \"fixed\",\n      zIndex: 5500,\n      pointerEvents: \"none\",\n    }\n\n    if (position === \"top\" || position === \"bottom\") {\n      style.margin = \"0 auto\"\n      style.textAlign = \"center\"\n    }\n\n    if (position.includes(\"top\")) {\n      style.top = 0\n    }\n\n    if (position.includes(\"bottom\")) {\n      style.bottom = 0\n    }\n\n    if (!position.includes(\"left\")) {\n      style.right = 0\n    }\n\n    if (!position.includes(\"right\")) {\n      style.left = 0\n    }\n\n    return style\n  }\n\n  render() {\n    return objectKeys(this.state).map((position) => {\n      const toasts = this.state[position]\n      return (\n        <span\n          key={position}\n          id={\"chakra-toast-manager-\" + position}\n          style={this.getStyle(position)}\n        >\n          {toasts.map((toast) => (\n            <Toast key={toast.id} {...toast} />\n          ))}\n        </span>\n      )\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}