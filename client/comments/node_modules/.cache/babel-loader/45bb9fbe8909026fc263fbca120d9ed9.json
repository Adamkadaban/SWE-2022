{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from \"react\";\nimport { __DEV__ } from \"@chakra-ui/utils\";\nimport { Transition } from \"./transition\";\n\nfunction createBaseStyle(placement) {\n  switch (placement) {\n    case \"bottom\":\n      {\n        return {\n          maxWidth: \"100vw\",\n          bottom: 0,\n          left: 0,\n          right: 0\n        };\n      }\n\n    case \"top\":\n      {\n        return {\n          maxWidth: \"100vw\",\n          top: 0,\n          left: 0,\n          right: 0\n        };\n      }\n\n    case \"left\":\n      {\n        return {\n          width: \"100%\",\n          height: \"100vh\",\n          left: 0,\n          top: 0\n        };\n      }\n\n    case \"right\":\n      {\n        return {\n          width: \"100%\",\n          right: 0,\n          top: 0,\n          height: \"100vh\"\n        };\n      }\n\n    default:\n      break;\n  }\n}\n\nvar getTransformStyle = function getTransformStyle(placement, value) {\n  var axis = \"\";\n  if (placement === \"left\" || placement === \"right\") axis = \"X\";\n  if (placement === \"top\" || placement === \"bottom\") axis = \"Y\";\n  return \"translate\" + axis + \"(\" + value + \")\";\n};\n\nfunction getTransitionStyles(placement) {\n  var offset = {\n    bottom: \"100%\",\n    top: \"-100%\",\n    left: \"-100%\",\n    right: \"100%\"\n  };\n  return {\n    init: {\n      transform: getTransformStyle(placement, offset[placement])\n    },\n    entered: {\n      transform: getTransformStyle(placement, \"0%\")\n    },\n    exiting: {\n      transform: getTransformStyle(placement, offset[placement])\n    }\n  };\n}\n\nexport var Slide = function Slide(props) {\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"left\" : _props$placement,\n      _props$timeout = props.timeout,\n      timeout = _props$timeout === void 0 ? 150 : _props$timeout,\n      children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, [\"placement\", \"timeout\", \"children\"]);\n\n  var styles = getTransitionStyles(placement);\n\n  var positionStyles = _extends({\n    position: \"fixed\",\n    willChange: \"transform\"\n  }, createBaseStyle(placement));\n\n  return /*#__PURE__*/React.createElement(Transition, _extends({\n    styles: styles,\n    transition: \"opacity \" + timeout + \"ms cubic-bezier(0, 0, 0.2, 1), transform \" + timeout + \"ms cubic-bezier(0, 0, 0.2, 1)\",\n    timeout: {\n      enter: 0,\n      exit: timeout\n    }\n  }, rest), function (styles) {\n    return children(_extends({}, positionStyles, styles));\n  });\n};\n\nif (__DEV__) {\n  Slide.displayName = \"Slide\";\n}","map":{"version":3,"sources":["../../src/slide.tsx"],"names":["maxWidth","bottom","left","right","top","width","height","getTransformStyle","axis","placement","offset","init","transform","entered","exiting","Slide","props","timeout","children","styles","getTransitionStyles","positionStyles","position","willChange","createBaseStyle","enter","exit"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport { Transition, TransitionProps } from \"./transition\"\n\ntype Placement = \"left\" | \"right\" | \"bottom\" | \"top\"\n\nfunction createBaseStyle(placement: Placement) {\n  switch (placement) {\n    case \"bottom\": {\n      return {\n        maxWidth: \"100vw\",\n        bottom: 0,\n        left: 0,\n        right: 0,\n      }\n    }\n    case \"top\": {\n      return {\n        maxWidth: \"100vw\",\n        top: 0,\n        left: 0,\n        right: 0,\n      }\n    }\n    case \"left\": {\n      return {\n        width: \"100%\",\n        height: \"100vh\",\n        left: 0,\n        top: 0,\n      }\n    }\n    case \"right\": {\n      return {\n        width: \"100%\",\n        right: 0,\n        top: 0,\n        height: \"100vh\",\n      }\n    }\n    default:\n      break\n  }\n}\n\nconst getTransformStyle = (placement: Placement, value: string) => {\n  let axis = \"\"\n  if (placement === \"left\" || placement === \"right\") axis = \"X\"\n  if (placement === \"top\" || placement === \"bottom\") axis = \"Y\"\n  return `translate${axis}(${value})`\n}\n\nfunction getTransitionStyles(placement: Placement) {\n  const offset = {\n    bottom: \"100%\",\n    top: \"-100%\",\n    left: \"-100%\",\n    right: \"100%\",\n  }\n\n  return {\n    init: {\n      transform: getTransformStyle(placement, offset[placement]),\n    },\n    entered: { transform: getTransformStyle(placement, \"0%\") },\n    exiting: {\n      transform: getTransformStyle(placement, offset[placement]),\n    },\n  }\n}\n\nexport type SlideProps = Omit<TransitionProps, \"styles\" | \"timeout\"> & {\n  /** The direction to slide drawer from */\n  placement?: Placement\n  /** The transition timeout */\n  timeout?: number\n}\n\nexport const Slide: React.FC<SlideProps> = (props) => {\n  const { placement = \"left\", timeout = 150, children, ...rest } = props\n\n  const styles = getTransitionStyles(placement)\n\n  const positionStyles: React.CSSProperties = {\n    position: \"fixed\",\n    willChange: \"transform\",\n    ...createBaseStyle(placement),\n  }\n\n  return (\n    <Transition\n      styles={styles}\n      transition={`opacity ${timeout}ms cubic-bezier(0, 0, 0.2, 1), transform ${timeout}ms cubic-bezier(0, 0, 0.2, 1)`}\n      timeout={{ enter: 0, exit: timeout }}\n      {...rest}\n    >\n      {(styles) => children({ ...positionStyles, ...styles })}\n    </Transition>\n  )\n}\n\nif (__DEV__) {\n  Slide.displayName = \"Slide\"\n}\n"]},"metadata":{},"sourceType":"module"}