{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from \"react\";\nimport { chakra, useStyleConfig, omitThemingProps, forwardRef } from \"@chakra-ui/system\";\nimport { __DEV__, cx } from \"@chakra-ui/utils\";\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/components/text\n */\n\nexport var Text = /*#__PURE__*/forwardRef(function Text(props, ref) {\n  var styles = useStyleConfig(\"Text\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      align = _omitThemingProps.align,\n      decoration = _omitThemingProps.decoration,\n      casing = _omitThemingProps.casing,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"className\", \"align\", \"decoration\", \"casing\"]);\n\n  return /*#__PURE__*/React.createElement(chakra.p, _extends({\n    ref: ref,\n    className: cx(\"chakra-text\", props.className),\n    textAlign: align,\n    textDecoration: decoration,\n    textTransform: casing\n  }, rest, {\n    __css: styles\n  }));\n});\n\nif (__DEV__) {\n  Text.displayName = \"Text\";\n}","map":{"version":3,"sources":["../../src/text.tsx"],"names":["Text","forwardRef","styles","useStyleConfig","casing","omitThemingProps","cx","props"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,MAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,UAAA,QAAA,mBAAA;AASA,SAAA,OAAA,EAAA,EAAA,QAAA,kBAAA;AAiBA;;;;;;AAKA,OAAO,IAAMA,IAAI,GAAA,aAAGC,UAAU,CAAiB,SAAA,IAAA,CAAA,KAAA,EAAA,GAAA,EAA0B;AACvE,MAAMC,MAAM,GAAGC,cAAc,CAAA,MAAA,EAA7B,KAA6B,CAA7B;;AACA,MAAA,iBAAA,GAA0DE,gBAAgB,CAA1E,KAA0E,CAA1E;AAAA,MAAM,KAAN,GAAA,iBAAA,CAAM,KAAN;AAAA,MAAM,UAAN,GAAA,iBAAA,CAAM,UAAN;AAAA,MAAsCD,MAAtC,GAAA,iBAAA,CAAsCA,MAAtC;AAAA,MAAA,IAAA,GAAA,6BAAA,CAAA,iBAAA,EAAA,CAAA,WAAA,EAAA,OAAA,EAAA,YAAA,EAAA,QAAA,CAAA,CAAA;;AAIA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,CAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EADL,GAAA;AAEE,IAAA,SAAS,EAAEE,EAAE,CAAA,aAAA,EAAgBC,KAAK,CAFpC,SAEe,CAFf;AAGE,IAAA,SAAS,EAHX,KAAA;AAIE,IAAA,cAAc,EAJhB,UAAA;AAKE,IAAA,aAAa,EAAEH;AALjB,GAAA,EAAA,IAAA,EAAA;AAOE,IAAA,KAAK,EAAEF;AAPT,GAAA,CAAA,CADF;AANK,CAAuB,CAAvB;;AAmBP,IAAA,OAAA,EAAa;AACXF,EAAAA,IAAI,CAAJA,WAAAA,GAAAA,MAAAA;AACD","sourcesContent":["import * as React from \"react\"\nimport {\n  chakra,\n  PropsOf,\n  useStyleConfig,\n  omitThemingProps,\n  ThemingProps,\n  forwardRef,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { __DEV__, cx } from \"@chakra-ui/utils\"\n\nexport interface TextProps extends PropsOf<typeof chakra.p>, ThemingProps {\n  /**\n   * The CSS `text-align` property\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/components/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } = omitThemingProps(\n    props,\n  )\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      textAlign={align}\n      textDecoration={decoration}\n      textTransform={casing}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Text.displayName = \"Text\"\n}\n"]},"metadata":{},"sourceType":"module"}