{"ast":null,"code":"import memoize from \"memoize-one\";\nimport { isFunction, __DEV__ } from \"./assertion\";\nexport function runIfFn(valueOrFn) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return isFunction(valueOrFn) ? valueOrFn.apply(void 0, args) : valueOrFn;\n}\nexport function callAllHandlers() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n\n  return function (event) {\n    fns.some(function (fn) {\n      fn && fn(event);\n      return event && event.defaultPrevented;\n    });\n  };\n}\nexport { memoize };\nexport function once(fn) {\n  var result;\n  return function () {\n    if (fn) {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      result = fn.apply(this, args);\n      fn = null;\n    }\n\n    return result;\n  };\n}\nexport var noop = function noop() {};\nexport var warn = once(function (options) {\n  var condition = options.condition,\n      message = options.message;\n\n  if (condition && __DEV__) {\n    console.warn(message);\n  }\n});\nexport var error = once(function (options) {\n  var condition = options.condition,\n      message = options.message;\n\n  if (condition && __DEV__) {\n    console.error(message);\n  }\n});","map":{"version":3,"sources":["../../src/function.ts"],"names":["args","isFunction","valueOrFn","fns","fn","event","result","noop","warn","once","options","message","condition","console","error"],"mappings":"AAAA,OAAA,OAAA,MAAA,aAAA;AACA,SAAA,UAAA,EAAA,OAAA,QAAA,aAAA;AAGA,OAAO,SAAA,OAAA,CAAA,SAAA,EAGF;AAAA,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EADAA,IACA,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AADAA,IAAAA,IACA,CAAA,IAAA,GAAA,CAAA,CADAA,GACA,SAAA,CAAA,IAAA,CADAA;AACA;;AACH,SAAOC,UAAU,CAAVA,SAAU,CAAVA,GAAwBC,SAAS,MAATA,SAAxBD,IAAwBC,CAAxBD,GAAP,SAAA;AACD;AAED,OAAO,SAAA,eAAA,GAEL;AAAA,OAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EADGE,GACH,GAAA,IAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AADGA,IAAAA,GACH,CAAA,KAAA,CADGA,GACH,SAAA,CAAA,KAAA,CADGA;AACH;;AACA,SAAO,UAAA,KAAA,EAA0C;AAC/CA,IAAAA,GAAG,CAAHA,IAAAA,CAAUC,UAAAA,EAAD,EAAQ;AACfA,MAAAA,EAAE,IAAIA,EAAE,CAARA,KAAQ,CAARA;AACA,aAAOC,KAAK,IAAIA,KAAK,CAArB,gBAAA;AAFFF,KAAAA;AADF,GAAA;AAMD;AAED,SAAA,OAAA;AAEA,OAAO,SAAA,IAAA,CAAA,EAAA,EAAoC;AACzC,MAAA,MAAA;AAEA,SAAO,YAAqC;AAC1C,QAAA,EAAA,EAAQ;AAAA,WAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EADqBH,IACrB,GAAA,IAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AADqBA,QAAAA,IACrB,CAAA,KAAA,CADqBA,GACrB,SAAA,CAAA,KAAA,CADqBA;AACrB;;AACNM,MAAAA,MAAM,GAAGF,EAAE,CAAFA,KAAAA,CAAAA,IAAAA,EAATE,IAASF,CAATE;AACAF,MAAAA,EAAE,GAAFA,IAAAA;AACD;;AAED,WAAA,MAAA;AANF,GAAA;AAQD;AAED,OAAO,IAAMG,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAnB,CAAA;AAOP,OAAO,IAAMC,IAAI,GAAGC,IAAI,CAAEC,UAAAA,OAAD,EAA6B;AAAA,MAC9C,SAD8C,GACpD,OADoD,CAC9C,SAD8C;AAAA,MACjCC,OADiC,GACpD,OADoD,CACjCA,OADiC;;AAEpD,MAAIC,SAAS,IAAb,OAAA,EAA0B;AACxBC,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,OAAAA;AACD;AAJI,CAAiB,CAAjB;AAOP,OAAO,IAAMC,KAAK,GAAGL,IAAI,CAAEC,UAAAA,OAAD,EAA6B;AAAA,MAC/C,SAD+C,GACrD,OADqD,CAC/C,SAD+C;AAAA,MAClCC,OADkC,GACrD,OADqD,CAClCA,OADkC;;AAErD,MAAIC,SAAS,IAAb,OAAA,EAA0B;AACxBC,IAAAA,OAAO,CAAPA,KAAAA,CAAAA,OAAAA;AACD;AAJI,CAAkB,CAAlB","sourcesContent":["import memoize from \"memoize-one\"\nimport { isFunction, __DEV__ } from \"./assertion\"\nimport { FunctionArguments } from \"./types\"\n\nexport function runIfFn<T, U>(\n  valueOrFn: T | ((...args: U[]) => T),\n  ...args: U[]\n): T {\n  return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn\n}\n\nexport function callAllHandlers<T extends (event: any) => void>(\n  ...fns: (T | undefined)[]\n) {\n  return function (event: FunctionArguments<T>[0]) {\n    fns.some((fn) => {\n      fn && fn(event)\n      return event && event.defaultPrevented\n    })\n  }\n}\n\nexport { memoize }\n\nexport function once(fn?: Function | null) {\n  let result: any\n\n  return function (this: any, ...args: any[]) {\n    if (fn) {\n      result = fn.apply(this, args)\n      fn = null\n    }\n\n    return result\n  }\n}\n\nexport const noop = () => {}\n\ntype MessageOptions = {\n  condition: boolean\n  message: string\n}\n\nexport const warn = once((options: MessageOptions) => {\n  const { condition, message } = options\n  if (condition && __DEV__) {\n    console.warn(message)\n  }\n})\n\nexport const error = once((options: MessageOptions) => {\n  const { condition, message } = options\n  if (condition && __DEV__) {\n    console.error(message)\n  }\n})\n"]},"metadata":{},"sourceType":"module"}