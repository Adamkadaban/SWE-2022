{"ast":null,"code":"import { memoize, isObject, isFunction } from \"@chakra-ui/utils\";\nimport { pseudoSelectors } from \"./pseudo.selector\";\n\nvar isPseudoProp = function isPseudoProp(prop) {\n  return prop in pseudoSelectors;\n};\n\nvar getPropName = memoize(function (prop) {\n  return isPseudoProp(prop) ? pseudoSelectors[prop] : prop;\n});\nexport function parsePseudo(props) {\n  var next = {};\n\n  for (var prop in props) {\n    var propValue = props[prop];\n    var propName = getPropName(prop);\n\n    if (isObject(propValue) && !isFunction(propValue)) {\n      next[propName] = parsePseudo(propValue);\n    } else {\n      next[propName] = propValue;\n    }\n  }\n\n  return next;\n}","map":{"version":3,"sources":["../../../src/pseudo/pseudo.utils.ts"],"names":["isPseudoProp","prop","getPropName","memoize","pseudoSelectors","next","propValue","props","propName","isObject","isFunction","parsePseudo"],"mappings":"AAAA,SAAA,OAAA,EAAA,QAAA,EAAA,UAAA,QAAA,kBAAA;AACA,SAAA,eAAA,QAAA,mBAAA;;AAEA,IAAMA,YAAY,GAAIC,SAAhBD,YAAgBC,CAAAA,IAAD;AAAA,SACnBA,IAAI,IADN,eAAqB;AAAA,CAArB;;AAGA,IAAMC,WAAW,GAAGC,OAAO,CAAEF,UAAAA,IAAD;AAAA,SAC1BD,YAAY,CAAZA,IAAY,CAAZA,GAAqBI,eAAe,CAApCJ,IAAoC,CAApCA,GADF,IAA4B;AAAA,CAAD,CAA3B;AAIA,OAAO,SAAA,WAAA,CAAA,KAAA,EAAkC;AACvC,MAAMK,IAAU,GAAhB,EAAA;;AAEA,OAAK,IAAL,IAAA,IAAA,KAAA,EAA0B;AACxB,QAAMC,SAAS,GAAGC,KAAK,CAAvB,IAAuB,CAAvB;AACA,QAAMC,QAAQ,GAAGN,WAAW,CAA5B,IAA4B,CAA5B;;AAEA,QAAIO,QAAQ,CAARA,SAAQ,CAARA,IAAuB,CAACC,UAAU,CAAtC,SAAsC,CAAtC,EAAmD;AACjDL,MAAAA,IAAI,CAAJA,QAAI,CAAJA,GAAiBM,WAAW,CAA5BN,SAA4B,CAA5BA;AADF,KAAA,MAEO;AACLA,MAAAA,IAAI,CAAJA,QAAI,CAAJA,GAAAA,SAAAA;AACD;AACF;;AAED,SAAA,IAAA;AACD","sourcesContent":["import { Dict, memoize, isObject, isFunction } from \"@chakra-ui/utils\"\nimport { pseudoSelectors, Pseudos } from \"./pseudo.selector\"\n\nconst isPseudoProp = (prop: string): prop is keyof Pseudos =>\n  prop in pseudoSelectors\n\nconst getPropName = memoize((prop: string) =>\n  isPseudoProp(prop) ? pseudoSelectors[prop] : prop,\n)\n\nexport function parsePseudo(props: Dict) {\n  const next: Dict = {}\n\n  for (const prop in props) {\n    const propValue = props[prop]\n    const propName = getPropName(prop)\n\n    if (isObject(propValue) && !isFunction(propValue)) {\n      next[propName] = parsePseudo(propValue)\n    } else {\n      next[propName] = propValue\n    }\n  }\n\n  return next\n}\n"]},"metadata":{},"sourceType":"module"}