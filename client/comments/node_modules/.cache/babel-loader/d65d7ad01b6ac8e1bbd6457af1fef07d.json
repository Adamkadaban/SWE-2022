{"ast":null,"code":"import _slicedToArray from \"/opt/reddit-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles, forwardRef } from \"@chakra-ui/system\";\nimport { createContext, cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { usePopover } from \"./use-popover\";\n\nvar _createContext = createContext({\n  name: \"PopoverContext\",\n  errorMessage: \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    PopoverProvider = _createContext2[0],\n    usePopoverContext = _createContext2[1];\n\nexport { usePopoverContext };\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\n\nexport var Popover = function Popover(props) {\n  var styles = useMultiStyleConfig(\"Popover\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      children = _omitThemingProps.children,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\"]);\n\n  var context = usePopover(rest);\n  return /*#__PURE__*/React.createElement(PopoverProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, runIfFn(children, {\n    isOpen: context.isOpen,\n    onClose: context.onClose\n  })));\n};\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\";\n}\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\n\n\nexport var PopoverTrigger = function PopoverTrigger(props) {\n  // enforce a single child\n  var child = React.Children.only(props.children);\n\n  var _usePopoverContext = usePopoverContext(),\n      getTriggerProps = _usePopoverContext.getTriggerProps;\n\n  return /*#__PURE__*/React.cloneElement(child, getTriggerProps(child.props, child.ref));\n};\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\";\n}\n/**\n * PopoverContent includes all accessibility\n * requirements for a popover\n */\n\n\nexport var PopoverContent = /*#__PURE__*/forwardRef(function PopoverContent(props, ref) {\n  var _usePopoverContext2 = usePopoverContext(),\n      getPopoverProps = _usePopoverContext2.getPopoverProps;\n\n  var popoverProps = getPopoverProps(props, ref);\n  var styles = useStyles();\n\n  var contentStyles = _extends({\n    position: \"relative\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  }, styles.content);\n\n  return /*#__PURE__*/React.createElement(chakra.section, _extends({\n    className: cx(\"chakra-popover__content\")\n  }, popoverProps, {\n    __css: contentStyles\n  }));\n});\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\";\n}\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it's first announced by screenreaders.\n */\n\n\nexport var PopoverHeader = /*#__PURE__*/forwardRef(function PopoverHeader(props, ref) {\n  var _usePopoverContext3 = usePopoverContext(),\n      headerId = _usePopoverContext3.headerId,\n      setHasHeader = _usePopoverContext3.setHasHeader;\n\n  React.useEffect(function () {\n    setHasHeader.on();\n    return function () {\n      return setHasHeader.off();\n    };\n  }, [setHasHeader]);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.header, _extends({}, props, {\n    className: cx(\"chakra-popover__header\", props.className),\n    id: headerId,\n    ref: ref,\n    __css: styles.header\n  }));\n});\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\";\n}\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\n\n\nexport var PopoverBody = /*#__PURE__*/forwardRef(function PopoverBody(props, ref) {\n  var _usePopoverContext4 = usePopoverContext(),\n      bodyId = _usePopoverContext4.bodyId,\n      setHasBody = _usePopoverContext4.setHasBody;\n\n  React.useEffect(function () {\n    setHasBody.on();\n    return function () {\n      return setHasBody.off();\n    };\n  }, [setHasBody]);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, props, {\n    className: cx(\"chakra-popover__body\", props.className),\n    id: bodyId,\n    ref: ref,\n    __css: styles.body\n  }));\n});\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\";\n}\n\nexport var PopoverFooter = function PopoverFooter(props) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.footer, _extends({}, props, {\n    className: cx(\"chakra-popover__footer\", props.className),\n    __css: styles.footer\n  }));\n};\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\";\n}\n\nexport var PopoverCloseButton = function PopoverCloseButton(props) {\n  var _usePopoverContext5 = usePopoverContext(),\n      onClose = _usePopoverContext5.onClose;\n\n  return /*#__PURE__*/React.createElement(CloseButton, _extends({\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    borderRadius: \"md\",\n    top: \"0.25rem\",\n    right: \"0.5rem\",\n    padding: \"0.5rem\"\n  }, props));\n};\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\";\n}\n\nexport var PopoverArrow = function PopoverArrow(props) {\n  var _usePopoverContext6 = usePopoverContext(),\n      getArrowProps = _usePopoverContext6.getArrowProps;\n\n  var arrowProps = getArrowProps(props);\n  var styles = useStyles();\n\n  var arrowStyles = _extends({\n    bg: \"inherit\"\n  }, styles.arrow);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, arrowProps, {\n    className: cx(\"chakra-popover__arrow\", props.className),\n    __css: arrowStyles\n  }));\n};\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\";\n}","map":{"version":3,"sources":["../../src/popover.tsx"],"names":["createContext","name","errorMessage","Popover","props","styles","useMultiStyleConfig","children","omitThemingProps","context","usePopover","runIfFn","isOpen","onClose","PopoverTrigger","child","React","getTriggerProps","usePopoverContext","PopoverContent","forwardRef","getPopoverProps","popoverProps","useStyles","contentStyles","position","display","flexDirection","cx","PopoverHeader","setHasHeader","header","PopoverBody","setHasBody","body","PopoverFooter","footer","PopoverCloseButton","PopoverArrow","getArrowProps","arrowProps","arrowStyles","bg"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  omitThemingProps,\n  PropsOf,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport {\n  createContext,\n  cx,\n  ReactNodeOrRenderProp,\n  runIfFn,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { usePopover, UsePopoverProps, UsePopoverReturn } from \"./use-popover\"\n\nconst [PopoverProvider, usePopoverContext] = createContext<UsePopoverReturn>({\n  name: \"PopoverContext\",\n  errorMessage:\n    \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\",\n})\n\nexport { usePopoverContext }\n\nexport interface PopoverProps extends UsePopoverProps, ThemingProps {\n  /**\n   * The content of the popover. It's usually the `PopoverTrigger`,\n   * and `PopoverContent`\n   */\n  children?: ReactNodeOrRenderProp<{\n    isOpen: boolean\n    onClose(): void\n  }>\n}\n\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\nexport const Popover: React.FC<PopoverProps> = (props) => {\n  const styles = useMultiStyleConfig(\"Popover\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const context = usePopover(rest)\n\n  return (\n    <PopoverProvider value={context}>\n      <StylesProvider value={styles}>\n        {runIfFn(children, {\n          isOpen: context.isOpen,\n          onClose: context.onClose,\n        })}\n      </StylesProvider>\n    </PopoverProvider>\n  )\n}\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\"\n}\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\nexport const PopoverTrigger: React.FC = (props) => {\n  // enforce a single child\n  const child: any = React.Children.only(props.children)\n  const { getTriggerProps } = usePopoverContext()\n  return React.cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\"\n}\n\nexport interface PopoverContentProps extends PropsOf<typeof chakra.section> {}\n\n/**\n * PopoverContent includes all accessibility\n * requirements for a popover\n */\nexport const PopoverContent = forwardRef<PopoverContentProps, \"section\">(\n  function PopoverContent(props, ref) {\n    const { getPopoverProps } = usePopoverContext()\n    const popoverProps = getPopoverProps(props, ref)\n\n    const styles = useStyles()\n    const contentStyles = {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      ...styles.content,\n    }\n\n    return (\n      <chakra.section\n        className={cx(\"chakra-popover__content\")}\n        {...popoverProps}\n        __css={contentStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\"\n}\n\nexport interface PopoverHeaderProps extends PropsOf<typeof chakra.header> {}\n\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it's first announced by screenreaders.\n */\nexport const PopoverHeader = forwardRef<PopoverHeaderProps, \"header\">(\n  function PopoverHeader(props, ref) {\n    const { headerId, setHasHeader } = usePopoverContext()\n\n    React.useEffect(() => {\n      setHasHeader.on()\n      return () => setHasHeader.off()\n    }, [setHasHeader])\n\n    const styles = useStyles()\n\n    return (\n      <chakra.header\n        {...props}\n        className={cx(\"chakra-popover__header\", props.className)}\n        id={headerId}\n        ref={ref}\n        __css={styles.header}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\"\n}\n\nexport interface PopoverBodyProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\nexport const PopoverBody = forwardRef<PopoverBodyProps, \"div\">(\n  function PopoverBody(props, ref) {\n    const { bodyId, setHasBody } = usePopoverContext()\n\n    React.useEffect(() => {\n      setHasBody.on()\n      return () => setHasBody.off()\n    }, [setHasBody])\n\n    const styles = useStyles()\n\n    return (\n      <chakra.div\n        {...props}\n        className={cx(\"chakra-popover__body\", props.className)}\n        id={bodyId}\n        ref={ref}\n        __css={styles.body}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\"\n}\nexport interface PopoverFooterProps extends PropsOf<typeof chakra.footer> {}\n\nexport const PopoverFooter: React.FC<PopoverFooterProps> = (props) => {\n  const styles = useStyles()\n  return (\n    <chakra.footer\n      {...props}\n      className={cx(\"chakra-popover__footer\", props.className)}\n      __css={styles.footer}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\"\n}\n\nexport type PopoverCloseButtonProps = CloseButtonProps\n\nexport const PopoverCloseButton: React.FC<CloseButtonProps> = (props) => {\n  const { onClose } = usePopoverContext()\n  return (\n    <CloseButton\n      size=\"sm\"\n      onClick={onClose}\n      position=\"absolute\"\n      borderRadius=\"md\"\n      top=\"0.25rem\"\n      right=\"0.5rem\"\n      padding=\"0.5rem\"\n      {...props}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\"\n}\n\nexport interface PopoverArrowProps extends PropsOf<typeof chakra.div> {}\n\nexport const PopoverArrow: React.FC<PopoverArrowProps> = (props) => {\n  const { getArrowProps } = usePopoverContext()\n  const arrowProps = getArrowProps(props)\n\n  const styles = useStyles()\n  const arrowStyles = {\n    bg: \"inherit\",\n    ...styles.arrow,\n  }\n\n  return (\n    <chakra.div\n      {...arrowProps}\n      className={cx(\"chakra-popover__arrow\", props.className)}\n      __css={arrowStyles}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\"\n}\n"]},"metadata":{},"sourceType":"module"}