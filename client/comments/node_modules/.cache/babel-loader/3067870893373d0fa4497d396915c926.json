{"ast":null,"code":"import _slicedToArray from \"/opt/reddit-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from \"react\";\nimport { isBrowser } from \"@chakra-ui/utils\";\n\nvar isSupported = function isSupported(api) {\n  return isBrowser && api in window;\n};\n\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nexport function useMediaQuery(query) {\n  var _React$useState = React.useState(function () {\n    if (!isSupported(\"matchMedia\")) return false;\n    return !!window.matchMedia(query).matches;\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      matches = _React$useState2[0],\n      setMatches = _React$useState2[1];\n\n  useSafeLayoutEffect(function () {\n    if (!isSupported(\"matchMedia\")) return;\n    var mediaQueryList = window.matchMedia(query);\n\n    var listener = function listener() {\n      return setMatches(!!mediaQueryList.matches);\n    };\n\n    mediaQueryList.addListener(listener);\n    listener();\n    return function () {\n      mediaQueryList.removeListener(listener);\n    };\n  }, [query]);\n  return [matches, setMatches];\n}","map":{"version":3,"sources":["../../src/use-media-query.ts"],"names":["isSupported","api","isBrowser","useSafeLayoutEffect","React","window","mediaQueryList","listener","setMatches"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,SAAA,QAAA,kBAAA;;AAEA,IAAMA,WAAW,GAAIC,SAAfD,WAAeC,CAAAA,GAAD;AAAA,SAAiBC,SAAS,IAAID,GAAG,IAArD,MAAoB;AAAA,CAApB;;AACA,IAAME,mBAAmB,GAAGD,SAAS,GAAGE,KAAK,CAAR,eAAA,GAA2BA,KAAK,CAArE,SAAA;AAEA;;;;;;AAKA,OAAO,SAAA,aAAA,CAAA,KAAA,EAAsC;AAAA,wBACb,KAAK,CAAL,QAAA,CAAe,YAAM;AACjD,QAAI,CAACJ,WAAW,CAAhB,YAAgB,CAAhB,EAAgC,OAAA,KAAA;AAChC,WAAO,CAAC,CAACK,MAAM,CAANA,UAAAA,CAAAA,KAAAA,EAAT,OAAA;AAFF,GAA8B,CADa;AAAA;AAAA,MACrC,OADqC;AAAA,MACrC,UADqC;;AAM3CF,EAAAA,mBAAmB,CAAC,YAAM;AACxB,QAAI,CAACH,WAAW,CAAhB,YAAgB,CAAhB,EAAgC;AAEhC,QAAMM,cAAc,GAAGD,MAAM,CAANA,UAAAA,CAAvB,KAAuBA,CAAvB;;AACA,QAAME,QAAQ,GAAG,SAAXA,QAAW;AAAA,aAAMC,UAAU,CAAC,CAAC,CAACF,cAAc,CAAlD,OAAiC,CAAhB;AAAA,KAAjB;;AAEAA,IAAAA,cAAc,CAAdA,WAAAA,CAAAA,QAAAA;AAEAC,IAAAA,QAAQ;AAER,WAAO,YAAM;AACXD,MAAAA,cAAc,CAAdA,cAAAA,CAAAA,QAAAA;AADF,KAAA;AAViB,GAAA,EAahB,CAbHH,KAaG,CAbgB,CAAnBA;AAeA,SAAO,CAAA,OAAA,EAAP,UAAO,CAAP;AACD","sourcesContent":["import * as React from \"react\"\nimport { isBrowser } from \"@chakra-ui/utils\"\n\nconst isSupported = (api: string) => isBrowser && api in window\nconst useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\nexport function useMediaQuery(query: string) {\n  const [matches, setMatches] = React.useState(() => {\n    if (!isSupported(\"matchMedia\")) return false\n    return !!window.matchMedia(query).matches\n  })\n\n  useSafeLayoutEffect(() => {\n    if (!isSupported(\"matchMedia\")) return\n\n    const mediaQueryList = window.matchMedia(query)\n    const listener = () => setMatches(!!mediaQueryList.matches)\n\n    mediaQueryList.addListener(listener)\n\n    listener()\n\n    return () => {\n      mediaQueryList.removeListener(listener)\n    }\n  }, [query])\n\n  return [matches, setMatches] as const\n}\n"]},"metadata":{},"sourceType":"module"}