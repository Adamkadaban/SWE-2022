{"ast":null,"code":"import _regeneratorRuntime from\"/opt/reddit-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/opt/reddit-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/opt/reddit-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{IconButton,Text,VStack}from\"@chakra-ui/core\";import React,{useEffect,useState}from\"react\";import{FiArrowDown,FiArrowUp}from\"react-icons/fi\";import db from\"../lib/firebase\";var VoteButtons=function VoteButtons(_ref){var post=_ref.post;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isVoting=_useState2[0],setVoting=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),votedPosts=_useState4[0],setVotedPosts=_useState4[1];useEffect(function(){// Fetch the previously voted items from localStorage. See https://stackoverflow.com/a/52607524/1928724 on why we need \"JSON.parse\" and update the item on localStorage. Return \"true\" if the user has already voted the post.\nvar votesFromLocalStorage=localStorage.getItem(\"votes\")||[];var previousVotes=[];try{// Parse the value of the item from localStorage. If the value of the\n// items isn't an array, then JS will throw an error.\npreviousVotes=JSON.parse(votesFromLocalStorage);}catch(error){console.error(error);}setVotedPosts(previousVotes);},[]);var handleDisablingOfVoting=function handleDisablingOfVoting(postId){// This function is responsible for disabling the voting button after a\n// user has voted. Fetch the previously voted items from localStorage. See\n// https://stackoverflow.com/a/52607524/1928724 on why we need \"JSON.parse\"\n// and update the item on localStorage.\nvar previousVotes=votedPosts;previousVotes.push(postId);setVotedPosts(previousVotes);// Update the voted items from localStorage. See https://stackoverflow.com/a/52607524/1928724 on why we need \"JSON.stringify\" and update the item on localStorage.\nlocalStorage.setItem(\"votes\",JSON.stringify(votedPosts));};var handleClick=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(type){var upVotesCount,downVotesCount,date;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setVoting(true);// Do calculation to save the vote.\nupVotesCount=post.upVotesCount;downVotesCount=post.downVotesCount;date=new Date();if(type===\"upvote\"){upVotesCount=upVotesCount+1;}else{downVotesCount=downVotesCount+1;}_context.next=7;return db.collection(\"posts\").doc(post.id).set({title:post.title,content:post.content,upVotesCount:upVotesCount,downVotesCount:downVotesCount,createdAt:post.createdAt,updatedAt:date.toUTCString()});case 7:// Disable the voting button once the voting is successful.\nhandleDisablingOfVoting(post.id);setVoting(false);case 9:case\"end\":return _context.stop();}}},_callee);}));return function handleClick(_x){return _ref2.apply(this,arguments);};}();var checkIfPostIsAlreadyVoted=function checkIfPostIsAlreadyVoted(){if(votedPosts.indexOf(post.id)>-1){return true;}else{return false;}};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(VStack,null,/*#__PURE__*/React.createElement(IconButton,{size:\"lg\",colorScheme:\"orange\",\"aria-label\":\"Upvote\",icon:/*#__PURE__*/React.createElement(FiArrowUp,null),onClick:function onClick(){return handleClick(\"upvote\");},isLoading:isVoting,isDisabled:checkIfPostIsAlreadyVoted()}),/*#__PURE__*/React.createElement(Text,{bg:\"gray.100\",rounded:\"md\",w:\"100%\",p:1},post.upVotesCount)),/*#__PURE__*/React.createElement(VStack,null,/*#__PURE__*/React.createElement(IconButton,{size:\"lg\",colorScheme:\"green\",\"aria-label\":\"Downvote\",icon:/*#__PURE__*/React.createElement(FiArrowDown,null),onClick:function onClick(){return handleClick(\"downvote\");},isLoading:isVoting,isDisabled:checkIfPostIsAlreadyVoted()}),/*#__PURE__*/React.createElement(Text,{bg:\"gray.100\",rounded:\"md\",w:\"100%\",p:1},post.downVotesCount)));};export default VoteButtons;","map":{"version":3,"sources":["/opt/reddit-clone/src/components/vote-buttons.js"],"names":["IconButton","Text","VStack","React","useEffect","useState","FiArrowDown","FiArrowUp","db","VoteButtons","post","isVoting","setVoting","votedPosts","setVotedPosts","votesFromLocalStorage","localStorage","getItem","previousVotes","JSON","parse","error","console","handleDisablingOfVoting","postId","push","setItem","stringify","handleClick","type","upVotesCount","downVotesCount","date","Date","collection","doc","id","set","title","content","createdAt","updatedAt","toUTCString","checkIfPostIsAlreadyVoted","indexOf"],"mappings":"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","sourcesContent":["import { IconButton, Text, VStack } from \"@chakra-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { FiArrowDown, FiArrowUp } from \"react-icons/fi\";\nimport db from \"../lib/firebase\";\n\nconst VoteButtons = ({ post }) => {\n  const [isVoting, setVoting] = useState(false);\n  const [votedPosts, setVotedPosts] = useState([]);\n\n  useEffect(() => {\n    // Fetch the previously voted items from localStorage. See https://stackoverflow.com/a/52607524/1928724 on why we need \"JSON.parse\" and update the item on localStorage. Return \"true\" if the user has already voted the post.\n    const votesFromLocalStorage = localStorage.getItem(\"votes\") || [];\n    let previousVotes = [];\n\n    try {\n      // Parse the value of the item from localStorage. If the value of the\n      // items isn't an array, then JS will throw an error.\n      previousVotes = JSON.parse(votesFromLocalStorage);\n    } catch (error) {\n      console.error(error);\n    }\n\n    setVotedPosts(previousVotes);\n  }, []);\n\n  const handleDisablingOfVoting = (postId) => {\n    // This function is responsible for disabling the voting button after a\n    // user has voted. Fetch the previously voted items from localStorage. See\n    // https://stackoverflow.com/a/52607524/1928724 on why we need \"JSON.parse\"\n    // and update the item on localStorage.\n    const previousVotes = votedPosts;\n    previousVotes.push(postId);\n\n    setVotedPosts(previousVotes);\n\n    // Update the voted items from localStorage. See https://stackoverflow.com/a/52607524/1928724 on why we need \"JSON.stringify\" and update the item on localStorage.\n    localStorage.setItem(\"votes\", JSON.stringify(votedPosts));\n  };\n\n  const handleClick = async (type) => {\n    setVoting(true);\n\n    // Do calculation to save the vote.\n    let upVotesCount = post.upVotesCount;\n    let downVotesCount = post.downVotesCount;\n\n    const date = new Date();\n\n    if (type === \"upvote\") {\n      upVotesCount = upVotesCount + 1;\n    } else {\n      downVotesCount = downVotesCount + 1;\n    }\n\n    await db.collection(\"posts\").doc(post.id).set({\n      title: post.title,\n\t  content: post.content,\n      upVotesCount,\n      downVotesCount,\n      createdAt: post.createdAt,\n      updatedAt: date.toUTCString(),\n    });\n\n    // Disable the voting button once the voting is successful.\n    handleDisablingOfVoting(post.id);\n\n    setVoting(false);\n  };\n\n  const checkIfPostIsAlreadyVoted = () => {\n    if (votedPosts.indexOf(post.id) > -1) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return (\n    <>\n      <VStack>\n        <IconButton\n          size=\"lg\"\n          colorScheme=\"orange\"\n          aria-label=\"Upvote\"\n          icon={<FiArrowUp />}\n          onClick={() => handleClick(\"upvote\")}\n          isLoading={isVoting}\n          isDisabled={checkIfPostIsAlreadyVoted()}\n        />\n        <Text bg=\"gray.100\" rounded=\"md\" w=\"100%\" p={1}>\n          {post.upVotesCount}\n        </Text>\n      </VStack>\n      <VStack>\n        <IconButton\n          size=\"lg\"\n          colorScheme=\"green\"\n          aria-label=\"Downvote\"\n          icon={<FiArrowDown />}\n          onClick={() => handleClick(\"downvote\")}\n          isLoading={isVoting}\n          isDisabled={checkIfPostIsAlreadyVoted()}\n        />\n        <Text bg=\"gray.100\" rounded=\"md\" w=\"100%\" p={1}>\n          {post.downVotesCount}\n        </Text>\n      </VStack>\n    </>\n  );\n};\n\nexport default VoteButtons;\n"]},"metadata":{},"sourceType":"module"}