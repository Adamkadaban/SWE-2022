{"ast":null,"code":"import { isBrowser, noop } from \"@chakra-ui/utils\";\nvar classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\"\n};\n/**\n * SSR: Graceful fallback for the `body` element\n */\n\nvar mockBody = {\n  classList: {\n    add: noop,\n    remove: noop\n  }\n};\nexport var body = isBrowser ? document.body : mockBody;\n/**\n * Function to add/remove class from `body` based on color mode\n */\n\nexport function syncBodyClassName(isDark) {\n  body.classList.add(isDark ? classNames.dark : classNames.light);\n  body.classList.remove(isDark ? classNames.light : classNames.dark);\n}\n/**\n * Check if JS media query matches the query string passed\n */\n\nfunction getMediaQuery(query) {\n  var mediaQueryList = window.matchMedia == null ? void 0 : window.matchMedia(query);\n  var matches = !!mediaQueryList.media === mediaQueryList.matches;\n  return matches;\n}\n\nexport var queries = {\n  light: \"(prefers-color-scheme: light)\",\n  dark: \"(prefers-color-scheme: dark)\"\n};\nexport var lightQuery = queries.light;\nexport var darkQuery = queries.dark;\nexport function getColorScheme() {\n  var isDark = getMediaQuery(queries.dark);\n  return isDark ? \"dark\" : \"light\";\n}\n/**\n * Adds system os color mode listener, and run the callback\n * once preference changes\n */\n\nexport function addListener(fn) {\n  if (!(\"matchMedia\" in window)) {\n    return noop;\n  }\n\n  var mediaQueryList = window.matchMedia(queries.dark);\n\n  var listener = function listener() {\n    fn(!!mediaQueryList.matches ? \"dark\" : \"light\");\n  };\n\n  listener();\n  mediaQueryList.addListener(listener);\n  return function () {\n    mediaQueryList.removeListener(listener);\n  };\n}","map":{"version":3,"sources":["../../src/color-mode.utils.ts"],"names":["classNames","light","dark","mockBody","classList","add","remove","noop","body","isBrowser","document","isDark","mediaQueryList","window","matches","queries","lightQuery","darkQuery","getMediaQuery","listener","fn"],"mappings":"AAAA,SAAA,SAAA,EAAA,IAAA,QAAA,kBAAA;AAEA,IAAMA,UAAU,GAAG;AACjBC,EAAAA,KAAK,EADY,iBAAA;AAEjBC,EAAAA,IAAI,EAAE;AAFW,CAAnB;AAOA;;;;AAGA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,SAAS,EAAE;AAAEC,IAAAA,GAAG,EAAL,IAAA;AAAaC,IAAAA,MAAM,EAAEC;AAArB;AADI,CAAjB;AAIA,OAAO,IAAMC,IAAI,GAAGC,SAAS,GAAGC,QAAQ,CAAX,IAAA,GAAtB,QAAA;AAEP;;;;AAGA,OAAO,SAAA,iBAAA,CAAA,MAAA,EAA4C;AACjDF,EAAAA,IAAI,CAAJA,SAAAA,CAAAA,GAAAA,CAAmBG,MAAM,GAAGX,UAAU,CAAb,IAAA,GAAqBA,UAAU,CAAxDQ,KAAAA;AACAA,EAAAA,IAAI,CAAJA,SAAAA,CAAAA,MAAAA,CAAsBG,MAAM,GAAGX,UAAU,CAAb,KAAA,GAAsBA,UAAU,CAA5DQ,IAAAA;AACD;AAED;;;;AAGA,SAAA,aAAA,CAAA,KAAA,EAAsC;AACpC,MAAMI,cAAc,GAAGC,MAAM,CAAT,UAAGA,IAAH,IAAGA,GAAH,KAAA,CAAGA,GAAAA,MAAM,CAANA,UAAAA,CAAvB,KAAuBA,CAAvB;AACA,MAAMC,OAAO,GAAG,CAAC,CAACF,cAAc,CAAhB,KAAA,KAA2BA,cAAc,CAAzD,OAAA;AACA,SAAA,OAAA;AACD;;AAED,OAAO,IAAMG,OAAO,GAAG;AACrBd,EAAAA,KAAK,EADgB,+BAAA;AAErBC,EAAAA,IAAI,EAAE;AAFe,CAAhB;AAKP,OAAO,IAAMc,UAAU,GAAGD,OAAO,CAA1B,KAAA;AACP,OAAO,IAAME,SAAS,GAAGF,OAAO,CAAzB,IAAA;AAEP,OAAO,SAAA,cAAA,GAA0B;AAC/B,MAAMJ,MAAM,GAAGO,aAAa,CAACH,OAAO,CAApC,IAA4B,CAA5B;AACA,SAAOJ,MAAM,GAAA,MAAA,GAAb,OAAA;AACD;AAED;;;;;AAIA,OAAO,SAAA,WAAA,CAAA,EAAA,EAAmC;AACxC,MAAI,EAAE,gBAAN,MAAI,CAAJ,EAA+B;AAC7B,WAAA,IAAA;AACD;;AAED,MAAMC,cAAc,GAAGC,MAAM,CAANA,UAAAA,CAAkBE,OAAO,CAAhD,IAAuBF,CAAvB;;AAEA,MAAMM,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBC,IAAAA,EAAE,CAAC,CAAC,CAACR,cAAc,CAAhB,OAAA,GAAA,MAAA,GAAHQ,OAAE,CAAFA;AADF,GAAA;;AAIAD,EAAAA,QAAQ;AACRP,EAAAA,cAAc,CAAdA,WAAAA,CAAAA,QAAAA;AAEA,SAAO,YAAM;AACXA,IAAAA,cAAc,CAAdA,cAAAA,CAAAA,QAAAA;AADF,GAAA;AAGD","sourcesContent":["import { isBrowser, noop } from \"@chakra-ui/utils\"\n\nconst classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\",\n}\n\nexport type ColorMode = \"light\" | \"dark\"\n\n/**\n * SSR: Graceful fallback for the `body` element\n */\nconst mockBody = {\n  classList: { add: noop, remove: noop },\n}\n\nexport const body = isBrowser ? document.body : mockBody\n\n/**\n * Function to add/remove class from `body` based on color mode\n */\nexport function syncBodyClassName(isDark: boolean) {\n  body.classList.add(isDark ? classNames.dark : classNames.light)\n  body.classList.remove(isDark ? classNames.light : classNames.dark)\n}\n\n/**\n * Check if JS media query matches the query string passed\n */\nfunction getMediaQuery(query: string) {\n  const mediaQueryList = window.matchMedia?.(query)\n  const matches = !!mediaQueryList.media === mediaQueryList.matches\n  return matches\n}\n\nexport const queries = {\n  light: \"(prefers-color-scheme: light)\",\n  dark: \"(prefers-color-scheme: dark)\",\n}\n\nexport const lightQuery = queries.light\nexport const darkQuery = queries.dark\n\nexport function getColorScheme() {\n  const isDark = getMediaQuery(queries.dark)\n  return isDark ? \"dark\" : \"light\"\n}\n\n/**\n * Adds system os color mode listener, and run the callback\n * once preference changes\n */\nexport function addListener(fn: Function) {\n  if (!(\"matchMedia\" in window)) {\n    return noop\n  }\n\n  const mediaQueryList = window.matchMedia(queries.dark)\n\n  const listener = () => {\n    fn(!!mediaQueryList.matches ? \"dark\" : \"light\")\n  }\n\n  listener()\n  mediaQueryList.addListener(listener)\n\n  return () => {\n    mediaQueryList.removeListener(listener)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}