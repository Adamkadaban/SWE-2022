{"ast":null,"code":"import _slicedToArray from \"/root/Desktop/SWE-2022/client/comments/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { FocusLock } from \"@chakra-ui/focus-lock\";\nimport { Portal } from \"@chakra-ui/portal\";\nimport { chakra, forwardRef, useMultiStyleConfig, StylesProvider, useStyles } from \"@chakra-ui/system\";\nimport { callAllHandlers, cx, __DEV__, createContext } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { useModal } from \"./use-modal\";\n\nvar _createContext = createContext({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage: \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    ModalContextProvider = _createContext2[0],\n    useModalContext = _createContext2[1];\n\nexport { ModalContextProvider, useModalContext };\n/**\n * Modal\n *\n * React component that provides context, theming, and accessbility properties\n * to all other modal components.\n *\n * It doesn't render any DOM node.\n */\n\nexport var Modal = function Modal(props) {\n  var getContainer = props.getContainer,\n      children = props.children,\n      autoFocus = props.autoFocus,\n      trapFocus = props.trapFocus,\n      initialFocusRef = props.initialFocusRef,\n      finalFocusRef = props.finalFocusRef,\n      returnFocusOnClose = props.returnFocusOnClose,\n      blockScrollOnMount = props.blockScrollOnMount,\n      allowPinchZoom = props.allowPinchZoom,\n      preserveScrollBarGap = props.preserveScrollBarGap;\n  var styles = useMultiStyleConfig(\"Modal\", props);\n  var modal = useModal(props);\n\n  var context = _extends({}, modal, {\n    autoFocus: autoFocus,\n    trapFocus: trapFocus,\n    initialFocusRef: initialFocusRef,\n    finalFocusRef: finalFocusRef,\n    returnFocusOnClose: returnFocusOnClose,\n    blockScrollOnMount: blockScrollOnMount,\n    allowPinchZoom: allowPinchZoom,\n    preserveScrollBarGap: preserveScrollBarGap\n  });\n\n  if (!context.isOpen) return null;\n  return /*#__PURE__*/React.createElement(ModalContextProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(Portal, {\n    getContainer: getContainer\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, children)));\n};\nModal.defaultProps = {\n  returnFocusOnClose: true,\n  scrollBehavior: \"outside\",\n  trapFocus: true,\n  autoFocus: true,\n  blockScrollOnMount: true,\n  allowPinchZoom: false\n};\n\nif (__DEV__) {\n  Modal.displayName = \"Modal\";\n}\n/**\n * ModalContent\n *\n * React component used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it's a modal modal\n */\n\n\nexport var ModalContent = /*#__PURE__*/forwardRef(function ModalContent(props, ref) {\n  var className = props.className,\n      children = props.children,\n      otherProps = _objectWithoutPropertiesLoose(props, [\"className\", \"children\"]);\n\n  var _useModalContext = useModalContext(),\n      getContentProps = _useModalContext.getContentProps;\n\n  var content = getContentProps(otherProps, ref);\n\n  var _className = cx(\"chakra-modal__content\", className);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.section, _extends({\n    className: _className\n  }, content, {\n    __css: _extends({\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0\n    }, styles.content)\n  }), children);\n});\n\nif (__DEV__) {\n  ModalContent.displayName = \"ModalContent\";\n}\n/**\n * ModalOverlay\n *\n * React component that renders a backdrop behind the modal. It's\n * also used as a wrapper for the modal content for better positioning.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\n\n\nexport var ModalOverlay = /*#__PURE__*/forwardRef(function ModalOverlay(props, ref) {\n  var className = props.className,\n      children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\"]);\n\n  var _useModalContext2 = useModalContext(),\n      getOverlayProps = _useModalContext2.getOverlayProps,\n      autoFocus = _useModalContext2.autoFocus,\n      trapFocus = _useModalContext2.trapFocus,\n      dialogRef = _useModalContext2.dialogRef,\n      initialFocusRef = _useModalContext2.initialFocusRef,\n      blockScrollOnMount = _useModalContext2.blockScrollOnMount,\n      allowPinchZoom = _useModalContext2.allowPinchZoom,\n      finalFocusRef = _useModalContext2.finalFocusRef,\n      returnFocusOnClose = _useModalContext2.returnFocusOnClose,\n      preserveScrollBarGap = _useModalContext2.preserveScrollBarGap;\n\n  var overlay = getOverlayProps(rest, ref);\n\n  var _className = cx(\"chakra-modal__overlay\", className);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(FocusLock, {\n    autoFocus: autoFocus,\n    isDisabled: !trapFocus,\n    initialFocusRef: initialFocusRef,\n    finalFocusRef: finalFocusRef,\n    restoreFocus: returnFocusOnClose,\n    contentRef: dialogRef\n  }, /*#__PURE__*/React.createElement(RemoveScroll, {\n    removeScrollBar: !preserveScrollBarGap,\n    allowPinchZoom: allowPinchZoom,\n    enabled: blockScrollOnMount\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, overlay, {\n    className: _className,\n    __css: _extends({\n      width: \"100vw\",\n      height: \"100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0\n    }, styles.overlay)\n  }), children)));\n});\n\nif (__DEV__) {\n  ModalOverlay.displayName = \"ModalOverlay\";\n}\n/**\n * ModalHeader\n *\n * React component that houses the title of the modal.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\n\n\nexport var ModalHeader = /*#__PURE__*/forwardRef(function ModalHeader(props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  var _useModalContext3 = useModalContext(),\n      headerId = _useModalContext3.headerId,\n      setHeaderMounted = _useModalContext3.setHeaderMounted;\n  /**\n   * Notify us if this component was rendered or used\n   * so we can append `aria-labelledby` automatically\n   */\n\n\n  React.useEffect(function () {\n    setHeaderMounted(true);\n    return function () {\n      return setHeaderMounted(false);\n    };\n  }, [setHeaderMounted]);\n\n  var _className = cx(\"chakra-modal__header\", className);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.header, _extends({\n    ref: ref,\n    className: _className,\n    id: headerId\n  }, rest, {\n    __css: _extends({\n      flex: 0\n    }, styles.header)\n  }));\n});\n\nif (__DEV__) {\n  ModalHeader.displayName = \"ModalHeader\";\n}\n/**\n * ModalBody\n *\n * React component that houses the main content of the modal.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\n\n\nexport var ModalBody = /*#__PURE__*/forwardRef(function ModalBody(props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  var _useModalContext4 = useModalContext(),\n      bodyId = _useModalContext4.bodyId,\n      setBodyMounted = _useModalContext4.setBodyMounted;\n  /**\n   * Notify us if this component was rendered or used\n   * so we can append `aria-describedby` automatically\n   */\n\n\n  React.useEffect(function () {\n    setBodyMounted(true);\n    return function () {\n      return setBodyMounted(false);\n    };\n  }, [setBodyMounted]);\n\n  var _className = cx(\"chakra-modal__body\", className);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    className: _className,\n    id: bodyId\n  }, rest, {\n    __css: styles.body\n  }));\n});\n\nif (__DEV__) {\n  ModalBody.displayName = \"ModalBody\";\n}\n/**\n * ModalFooter\n *\n * React component that houses the action buttons of the modal.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\n\n\nexport var ModalFooter = /*#__PURE__*/forwardRef(function ModalFooter(props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  var _className = cx(\"chakra-modal__footer\", className);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.footer, _extends({\n    ref: ref\n  }, rest, {\n    __css: _extends({\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      flex: 0\n    }, styles.footer),\n    className: _className\n  }));\n});\n\nif (__DEV__) {\n  ModalFooter.displayName = \"ModalFooter\";\n}\n/**\n * ModalCloseButton\n *\n * React component used closes the modal. You don't need\n * to pass the `onClick` to it, it's reads the `onClose` action from the\n * modal context.\n */\n\n\nexport var ModalCloseButton = /*#__PURE__*/forwardRef(function ModalCloseButton(props, ref) {\n  var onClick = props.onClick,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"onClick\", \"className\"]);\n\n  var _useModalContext5 = useModalContext(),\n      onClose = _useModalContext5.onClose;\n\n  var _className = cx(\"chakra-modal__close-btn\", className);\n\n  return /*#__PURE__*/React.createElement(CloseButton, _extends({\n    ref: ref,\n    position: \"absolute\",\n    top: \"8px\",\n    right: \"12px\",\n    className: _className,\n    onClick: callAllHandlers(onClick, function (event) {\n      event.stopPropagation();\n      onClose();\n    })\n  }, rest));\n});\n\nif (__DEV__) {\n  ModalCloseButton.displayName = \"ModalCloseButton\";\n}","map":{"version":3,"sources":["../../src/modal.tsx"],"names":["createContext","strict","name","errorMessage","Modal","props","preserveScrollBarGap","styles","useMultiStyleConfig","modal","useModal","context","autoFocus","trapFocus","initialFocusRef","finalFocusRef","returnFocusOnClose","blockScrollOnMount","allowPinchZoom","getContainer","scrollBehavior","ModalContent","forwardRef","children","getContentProps","useModalContext","content","_className","cx","useStyles","display","flexDirection","position","width","outline","ModalOverlay","overlay","getOverlayProps","dialogRef","height","left","top","ModalHeader","className","setHeaderMounted","React","headerId","flex","ModalBody","setBodyMounted","bodyId","body","ModalFooter","ref","alignItems","justifyContent","ModalCloseButton","onClose","callAllHandlers","event"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport { FocusLock } from \"@chakra-ui/focus-lock\"\nimport { Portal, PortalProps } from \"@chakra-ui/portal\"\nimport {\n  chakra,\n  forwardRef,\n  PropsOf,\n  ThemingProps,\n  useMultiStyleConfig,\n  StylesProvider,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { callAllHandlers, cx, __DEV__, createContext } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { RemoveScroll } from \"react-remove-scroll\"\nimport { useModal, UseModalProps, UseModalReturn } from \"./use-modal\"\n\ninterface ModalOptions {\n  /**\n   * If `false`, focus lock will be disabled completely.\n   *\n   * This is useful in situations where you still need to interact with\n   * other surrounding elements.\n   *\n   * 🚨Warning: We don't recommend doing this because it hurts the\n   * accessbility of the modal, based on WAI-ARIA specifications.\n   *\n   * @default true\n   */\n  trapFocus?: boolean\n  /**\n   * If `true`, the modal will autofocus the first enabled and interative\n   * element within the `ModalContent`\n   *\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * The `ref` of element to receive focus when the modal opens.\n   */\n  initialFocusRef?: React.RefObject<HTMLElement>\n  /**\n   * The `ref` of element to receive focus when the modal closes.\n   */\n  finalFocusRef?: React.RefObject<HTMLElement>\n  /**\n   * If `true`, the modal will return focus to the element that triggered it when it closes.\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, scrolling will be disabled on the `body` when the modal opens.\n   *  @default true\n   */\n  blockScrollOnMount?: boolean\n  /**\n   * Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.\n   * Defaults to `false`.\n   */\n  allowPinchZoom?: boolean\n  /**\n   * If `true`, a `padding-right` will be applied to the body element\n   * that's equal to the width of the scrollbar.\n   *\n   * This can help prevent some unpleasant flickering effect\n   * and content adjustment when the modal opens\n   */\n  preserveScrollBarGap?: boolean\n}\nexport interface ModalProps extends UseModalProps, ModalOptions, ThemingProps {\n  children?: React.ReactNode\n  /**\n   *  If `true`, the modal will be centered on screen.\n   * @default false\n   */\n  isCentered?: boolean\n  /**\n   * Where scroll behaviour should originate.\n   * - If set to `inside`, scroll only occurs within the `ModalBody`.\n   * - If set to `outside`, the entire `ModalContent` will scroll within the viewport.\n   *\n   * @default \"outside\"\n   */\n  scrollBehavior?: \"inside\" | \"outside\"\n\n  /**\n   * Function that will be called to get the parent element\n   * that the modal will be attached to.\n   */\n  getContainer?: PortalProps[\"getContainer\"]\n}\n\ninterface ModalContext extends ModalOptions, UseModalReturn {}\n\nconst [ModalContextProvider, useModalContext] = createContext<ModalContext>({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage:\n    \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\",\n})\n\nexport { ModalContextProvider, useModalContext }\n\n/**\n * Modal\n *\n * React component that provides context, theming, and accessbility properties\n * to all other modal components.\n *\n * It doesn't render any DOM node.\n */\nexport const Modal: React.FC<ModalProps> = (props) => {\n  const {\n    getContainer,\n    children,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n  } = props\n\n  const styles = useMultiStyleConfig(\"Modal\", props)\n  const modal = useModal(props)\n\n  const context = {\n    ...modal,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n  }\n\n  if (!context.isOpen) return null\n\n  return (\n    <ModalContextProvider value={context}>\n      <Portal getContainer={getContainer}>\n        <StylesProvider value={styles}>{children}</StylesProvider>\n      </Portal>\n    </ModalContextProvider>\n  )\n}\n\nModal.defaultProps = {\n  returnFocusOnClose: true,\n  scrollBehavior: \"outside\",\n  trapFocus: true,\n  autoFocus: true,\n  blockScrollOnMount: true,\n  allowPinchZoom: false,\n}\n\nif (__DEV__) {\n  Modal.displayName = \"Modal\"\n}\n\nexport interface ModalContentProps extends PropsOf<typeof chakra.section> {}\n\n/**\n * ModalContent\n *\n * React component used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it's a modal modal\n */\nexport const ModalContent = forwardRef<ModalContentProps, \"section\">(\n  function ModalContent(props, ref) {\n    const { className, children, ...otherProps } = props\n\n    const { getContentProps } = useModalContext()\n\n    const content = getContentProps(otherProps, ref)\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useStyles()\n\n    return (\n      <chakra.section\n        className={_className}\n        {...content}\n        __css={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          position: \"relative\",\n          width: \"100%\",\n          outline: 0,\n          ...styles.content,\n        }}\n      >\n        {children}\n      </chakra.section>\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalContent.displayName = \"ModalContent\"\n}\n\nexport interface ModalOverlayProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * ModalOverlay\n *\n * React component that renders a backdrop behind the modal. It's\n * also used as a wrapper for the modal content for better positioning.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalOverlay = forwardRef<ModalOverlayProps, \"div\">(\n  function ModalOverlay(props, ref) {\n    const { className, children, ...rest } = props\n\n    const {\n      getOverlayProps,\n      autoFocus,\n      trapFocus,\n      dialogRef,\n      initialFocusRef,\n      blockScrollOnMount,\n      allowPinchZoom,\n      finalFocusRef,\n      returnFocusOnClose,\n      preserveScrollBarGap,\n    } = useModalContext()\n\n    const overlay = getOverlayProps(rest, ref)\n    const _className = cx(\"chakra-modal__overlay\", className)\n\n    const styles = useStyles()\n\n    return (\n      <FocusLock\n        autoFocus={autoFocus}\n        isDisabled={!trapFocus}\n        initialFocusRef={initialFocusRef}\n        finalFocusRef={finalFocusRef}\n        restoreFocus={returnFocusOnClose}\n        contentRef={dialogRef}\n      >\n        <RemoveScroll\n          removeScrollBar={!preserveScrollBarGap}\n          allowPinchZoom={allowPinchZoom}\n          enabled={blockScrollOnMount}\n        >\n          <chakra.div\n            {...overlay}\n            className={_className}\n            __css={{\n              width: \"100vw\",\n              height: \"100vh\",\n              position: \"fixed\",\n              left: 0,\n              top: 0,\n              ...styles.overlay,\n            }}\n          >\n            {children}\n          </chakra.div>\n        </RemoveScroll>\n      </FocusLock>\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalOverlay.displayName = \"ModalOverlay\"\n}\n\nexport interface ModalHeaderProps extends PropsOf<typeof chakra.header> {}\n\n/**\n * ModalHeader\n *\n * React component that houses the title of the modal.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalHeader = forwardRef<ModalHeaderProps, \"header\">(\n  function ModalHeader(props, ref) {\n    const { className, ...rest } = props\n\n    const { headerId, setHeaderMounted } = useModalContext()\n\n    /**\n     * Notify us if this component was rendered or used\n     * so we can append `aria-labelledby` automatically\n     */\n    React.useEffect(() => {\n      setHeaderMounted(true)\n      return () => setHeaderMounted(false)\n    }, [setHeaderMounted])\n\n    const _className = cx(\"chakra-modal__header\", className)\n    const styles = useStyles()\n\n    return (\n      <chakra.header\n        ref={ref}\n        className={_className}\n        id={headerId}\n        {...rest}\n        __css={{\n          flex: 0,\n          ...styles.header,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalHeader.displayName = \"ModalHeader\"\n}\n\nexport interface ModalBodyProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * ModalBody\n *\n * React component that houses the main content of the modal.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalBody = forwardRef<ModalBodyProps, \"div\">(function ModalBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const { bodyId, setBodyMounted } = useModalContext()\n\n  /**\n   * Notify us if this component was rendered or used\n   * so we can append `aria-describedby` automatically\n   */\n  React.useEffect(() => {\n    setBodyMounted(true)\n    return () => setBodyMounted(false)\n  }, [setBodyMounted])\n\n  const _className = cx(\"chakra-modal__body\", className)\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={_className}\n      id={bodyId}\n      {...rest}\n      __css={styles.body}\n    />\n  )\n})\n\nif (__DEV__) {\n  ModalBody.displayName = \"ModalBody\"\n}\n\nexport interface ModalFooterProps extends PropsOf<typeof chakra.footer> {}\n\n/**\n * ModalFooter\n *\n * React component that houses the action buttons of the modal.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalFooter = forwardRef<ModalFooterProps, \"footer\">(\n  function ModalFooter(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-modal__footer\", className)\n    const styles = useStyles()\n    return (\n      <chakra.footer\n        ref={ref}\n        {...rest}\n        __css={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n          flex: 0,\n          ...styles.footer,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalFooter.displayName = \"ModalFooter\"\n}\n\n/**\n * ModalCloseButton\n *\n * React component used closes the modal. You don't need\n * to pass the `onClick` to it, it's reads the `onClose` action from the\n * modal context.\n */\nexport const ModalCloseButton = forwardRef<CloseButtonProps, \"button\">(\n  function ModalCloseButton(props, ref) {\n    const { onClick, className, ...rest } = props\n    const { onClose } = useModalContext()\n\n    const _className = cx(\"chakra-modal__close-btn\", className)\n\n    return (\n      <CloseButton\n        ref={ref}\n        position=\"absolute\"\n        top=\"8px\"\n        right=\"12px\"\n        className={_className}\n        onClick={callAllHandlers(onClick, (event) => {\n          event.stopPropagation()\n          onClose()\n        })}\n        {...rest}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalCloseButton.displayName = \"ModalCloseButton\"\n}\n"]},"metadata":{},"sourceType":"module"}