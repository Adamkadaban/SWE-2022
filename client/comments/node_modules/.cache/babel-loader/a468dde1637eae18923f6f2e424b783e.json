{"ast":null,"code":"var _jsxFileName = \"/opt/reddit-clone/src/app.js\";\nimport { Container, Flex, Spinner, VStack } from \"@chakra-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport Navbar from \"./components/navbar\";\nimport Post from \"./components/post\";\nimport db from \"./lib/firebase\";\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    // Hook to handle the initial fetching of posts\n    db.collection(\"posts\").orderBy(\"createdAt\", \"desc\").get().then(querySnapshot => {\n      const data = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setPosts(data);\n      setLoading(false);\n    });\n  }, []);\n  useEffect(() => {\n    // Hook to handle the real-time updating of posts whenever there is a\n    // change in the datastore (https://firebase.google.com/docs/firestore/query-data/listen#view_changes_between_snapshots)\n    db.collection(\"posts\").orderBy(\"createdAt\", \"desc\").onSnapshot(querySnapshot => {\n      const _posts = [];\n      querySnapshot.forEach(doc => {\n        _posts.push({\n          id: doc.id,\n          ...doc.data()\n        });\n      });\n      setPosts(_posts);\n    });\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(Flex, {\n      minH: \"100vh\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    maxW: \"md\",\n    centerContent: true,\n    p: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(VStack, {\n    spacing: 8,\n    w: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, posts.map(post => /*#__PURE__*/React.createElement(Post, {\n    post: post,\n    key: post.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default App;","map":{"version":3,"sources":["/opt/reddit-clone/src/app.js"],"names":["Container","Flex","Spinner","VStack","React","useEffect","useState","Navbar","Post","db","App","posts","setPosts","isLoading","setLoading","collection","orderBy","get","then","querySnapshot","data","docs","map","doc","id","onSnapshot","_posts","forEach","push","post"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,MAAnC,QAAiD,iBAAjD;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,EAAP,MAAe,gBAAf;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,SAAD,EAAYC,UAAZ,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AAEAI,IAAAA,EAAE,CAACM,UAAH,CAAc,OAAd,EACGC,OADH,CACW,WADX,EACwB,MADxB,EAEGC,GAFH,GAGGC,IAHH,CAGSC,aAAD,IAAmB;AACvB,YAAMC,IAAI,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAwBC,GAAD,KAAU;AAC5CC,QAAAA,EAAE,EAAED,GAAG,CAACC,EADoC;AAE5C,WAAGD,GAAG,CAACH,IAAJ;AAFyC,OAAV,CAAvB,CAAb;AAKAR,MAAAA,QAAQ,CAACQ,IAAD,CAAR;AACAN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAXH;AAYD,GAfQ,EAeN,EAfM,CAAT;AAiBAT,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AAEAI,IAAAA,EAAE,CAACM,UAAH,CAAc,OAAd,EACGC,OADH,CACW,WADX,EACwB,MADxB,EAEGS,UAFH,CAEeN,aAAD,IAAmB;AAC7B,YAAMO,MAAM,GAAG,EAAf;AAEAP,MAAAA,aAAa,CAACQ,OAAd,CAAuBJ,GAAD,IAAS;AAC7BG,QAAAA,MAAM,CAACE,IAAP,CAAY;AACVJ,UAAAA,EAAE,EAAED,GAAG,CAACC,EADE;AAEV,aAAGD,GAAG,CAACH,IAAJ;AAFO,SAAZ;AAID,OALD;AAOAR,MAAAA,QAAQ,CAACc,MAAD,CAAR;AACD,KAbH;AAcD,GAlBQ,EAkBN,EAlBM,CAAT;;AAoBA,MAAIb,SAAJ,EAAe;AACb,wBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,OAAX;AAAmB,MAAA,cAAc,EAAC,QAAlC;AAA2C,MAAA,UAAU,EAAC,QAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAED,sBACE,uDACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,IAAhB;AAAqB,IAAA,aAAa,MAAlC;AAAmC,IAAA,CAAC,EAAE,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,CAAjB;AAAoB,IAAA,CAAC,EAAC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,KAAK,CAACW,GAAN,CAAWO,IAAD,iBACT,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,IAAZ;AAAkB,IAAA,GAAG,EAAEA,IAAI,CAACL,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF,CAFF,CADF;AAYD,CA7DD;;AA+DA,eAAed,GAAf","sourcesContent":["import { Container, Flex, Spinner, VStack } from \"@chakra-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport Navbar from \"./components/navbar\";\nimport Post from \"./components/post\";\nimport db from \"./lib/firebase\";\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Hook to handle the initial fetching of posts\n\n    db.collection(\"posts\")\n      .orderBy(\"createdAt\", \"desc\")\n      .get()\n      .then((querySnapshot) => {\n        const data = querySnapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n\n        setPosts(data);\n        setLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    // Hook to handle the real-time updating of posts whenever there is a\n    // change in the datastore (https://firebase.google.com/docs/firestore/query-data/listen#view_changes_between_snapshots)\n\n    db.collection(\"posts\")\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((querySnapshot) => {\n        const _posts = [];\n\n        querySnapshot.forEach((doc) => {\n          _posts.push({\n            id: doc.id,\n            ...doc.data(),\n          });\n        });\n\n        setPosts(_posts);\n      });\n  }, []);\n\n  if (isLoading) {\n    return (\n      <Flex minH=\"100vh\" justifyContent=\"center\" alignItems=\"center\">\n        <Spinner />\n      </Flex>\n    );\n  }\n\n  return (\n    <>\n      <Navbar />\n      <Container maxW=\"md\" centerContent p={8}>\n        <VStack spacing={8} w=\"100%\">\n          {posts.map((post) => (\n            <Post post={post} key={post.id} />\n          ))}\n        </VStack>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}