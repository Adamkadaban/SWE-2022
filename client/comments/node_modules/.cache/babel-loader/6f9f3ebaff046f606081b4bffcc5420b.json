{"ast":null,"code":"import { Transition } from \"@chakra-ui/transition\";\nimport { focus, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useMenuContext } from \"./use-menu\";\nexport var MenuTransition = props => {\n  var {\n    children,\n    styles\n  } = props;\n  var menu = useMenuContext();\n  var defaultStyles = {\n    init: {\n      opacity: 0.01,\n      transform: \"scale(0.8)\",\n      transitionTimingFunction: \"cubic-bezier(0.175, 0.885, 0.320, 1.175)\",\n      transitionProperty: \"opacity, transform\",\n      willChange: \"opacity, transform\"\n    },\n    entered: {\n      opacity: 1,\n      transitionDuration: \"200ms\",\n      transform: \"scale(1)\"\n    },\n    exiting: {\n      opacity: 0.01,\n      transitionDuration: \"100ms\",\n      transform: \"scale(0.8)\"\n    }\n  };\n  return /*#__PURE__*/React.createElement(Transition, {\n    onEnter: node => {\n      node.hidden = false;\n    },\n    onExited: node => {\n      node.hidden = true;\n      node.style.pointerEvents = \"auto\";\n      var menuEl = menu.buttonRef.current;\n\n      if (menuEl && document.activeElement !== menuEl) {\n        focus(menuEl);\n      }\n    },\n    onExit: node => {\n      node.hidden = false;\n    },\n    onExiting: node => {\n      node.style.pointerEvents = \"none\";\n    },\n    timeout: {\n      enter: 0,\n      exit: menu.isOpen ? 200 : 100\n    },\n    in: menu.isOpen,\n    styles: styles != null ? styles : defaultStyles,\n    unmountOnExit: false,\n    children: children\n  });\n};\n\nif (__DEV__) {\n  MenuTransition.displayName = \"MenuTransition\";\n}","map":{"version":3,"sources":["../../src/menu.transition.tsx"],"names":["MenuTransition","props","styles","menu","useMenuContext","defaultStyles","init","opacity","transform","transitionTimingFunction","transitionProperty","willChange","entered","transitionDuration","exiting","node","menuEl","document","focus","enter","exit","children"],"mappings":"AAAA,SAAA,UAAA,QAAA,uBAAA;AAKA,SAAA,KAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,cAAA,QAAA,YAAA;AAQA,OAAO,IAAMA,cAA6C,GAAIC,KAAD,IAAW;AACtE,MAAM;AAAA,IAAA,QAAA;AAAYC,IAAAA;AAAZ,MAAN,KAAA;AACA,MAAMC,IAAI,GAAGC,cAAb,EAAA;AAEA,MAAMC,aAA+B,GAAG;AACtCC,IAAAA,IAAI,EAAE;AACJC,MAAAA,OAAO,EADH,IAAA;AAEJC,MAAAA,SAAS,EAFL,YAAA;AAGJC,MAAAA,wBAAwB,EAHpB,0CAAA;AAIJC,MAAAA,kBAAkB,EAJd,oBAAA;AAKJC,MAAAA,UAAU,EAAE;AALR,KADgC;AAQtCC,IAAAA,OAAO,EAAE;AACPL,MAAAA,OAAO,EADA,CAAA;AAEPM,MAAAA,kBAAkB,EAFX,OAAA;AAGPL,MAAAA,SAAS,EAAE;AAHJ,KAR6B;AAatCM,IAAAA,OAAO,EAAE;AACPP,MAAAA,OAAO,EADA,IAAA;AAEPM,MAAAA,kBAAkB,EAFX,OAAA;AAGPL,MAAAA,SAAS,EAAE;AAHJ;AAb6B,GAAxC;AAoBA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACE,IAAA,OAAO,EAAGO,IAAD,IAAU;AACjBA,MAAAA,IAAI,CAAJA,MAAAA,GAAAA,KAAAA;AAFJ,KAAA;AAIE,IAAA,QAAQ,EAAGA,IAAD,IAAU;AAClBA,MAAAA,IAAI,CAAJA,MAAAA,GAAAA,IAAAA;AACAA,MAAAA,IAAI,CAAJA,KAAAA,CAAAA,aAAAA,GAAAA,MAAAA;AACA,UAAMC,MAAM,GAAGb,IAAI,CAAJA,SAAAA,CAAf,OAAA;;AACA,UAAIa,MAAM,IAAIC,QAAQ,CAARA,aAAAA,KAAd,MAAA,EAAiD;AAC/CC,QAAAA,KAAK,CAALA,MAAK,CAALA;AACD;AAVL,KAAA;AAYE,IAAA,MAAM,EAAGH,IAAD,IAAU;AAChBA,MAAAA,IAAI,CAAJA,MAAAA,GAAAA,KAAAA;AAbJ,KAAA;AAeE,IAAA,SAAS,EAAGA,IAAD,IAAU;AACnBA,MAAAA,IAAI,CAAJA,KAAAA,CAAAA,aAAAA,GAAAA,MAAAA;AAhBJ,KAAA;AAkBE,IAAA,OAAO,EAAE;AAAEI,MAAAA,KAAK,EAAP,CAAA;AAAYC,MAAAA,IAAI,EAAEjB,IAAI,CAAJA,MAAAA,GAAAA,GAAAA,GAAoB;AAAtC,KAlBX;AAmBE,IAAA,EAAE,EAAEA,IAAI,CAnBV,MAAA;AAoBE,IAAA,MAAM,EAAED,MAAF,IAAA,IAAEA,GAAF,MAAEA,GApBV,aAAA;AAqBE,IAAA,aAAa,EArBf,KAAA;AAsBE,IAAA,QAAQ,EAAEmB;AAtBZ,GAAA,CADF;AAxBK,CAAA;;AAoDP,IAAA,OAAA,EAAa;AACXrB,EAAAA,cAAc,CAAdA,WAAAA,GAAAA,gBAAAA;AACD","sourcesContent":["import {\n  Transition,\n  TransitionProps,\n  TransitionStyles,\n} from \"@chakra-ui/transition\"\nimport { focus, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useMenuContext } from \"./use-menu\"\nimport { SystemStyleObject } from \"@chakra-ui/system\"\n\nexport interface MenuTransitionProps {\n  children: (styles: SystemStyleObject) => React.ReactNode\n  styles?: TransitionProps[\"styles\"]\n}\n\nexport const MenuTransition: React.FC<MenuTransitionProps> = (props) => {\n  const { children, styles } = props\n  const menu = useMenuContext()\n\n  const defaultStyles: TransitionStyles = {\n    init: {\n      opacity: 0.01,\n      transform: \"scale(0.8)\",\n      transitionTimingFunction: \"cubic-bezier(0.175, 0.885, 0.320, 1.175)\",\n      transitionProperty: \"opacity, transform\",\n      willChange: \"opacity, transform\",\n    },\n    entered: {\n      opacity: 1,\n      transitionDuration: \"200ms\",\n      transform: \"scale(1)\",\n    },\n    exiting: {\n      opacity: 0.01,\n      transitionDuration: \"100ms\",\n      transform: \"scale(0.8)\",\n    },\n  }\n\n  return (\n    <Transition\n      onEnter={(node) => {\n        node.hidden = false\n      }}\n      onExited={(node) => {\n        node.hidden = true\n        node.style.pointerEvents = \"auto\"\n        const menuEl = menu.buttonRef.current\n        if (menuEl && document.activeElement !== menuEl) {\n          focus(menuEl)\n        }\n      }}\n      onExit={(node) => {\n        node.hidden = false\n      }}\n      onExiting={(node) => {\n        node.style.pointerEvents = \"none\"\n      }}\n      timeout={{ enter: 0, exit: menu.isOpen ? 200 : 100 }}\n      in={menu.isOpen}\n      styles={styles ?? defaultStyles}\n      unmountOnExit={false}\n      children={children}\n    />\n  )\n}\n\nif (__DEV__) {\n  MenuTransition.displayName = \"MenuTransition\"\n}\n"]},"metadata":{},"sourceType":"module"}