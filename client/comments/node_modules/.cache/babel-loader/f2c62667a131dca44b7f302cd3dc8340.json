{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { objectKeys } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { Toast } from \"./toast\";\nimport { findToast, getToastPosition } from \"./toast.utils\";\n/**\n * Manages the creation, and removal of toasts\n * across all corners (\"top\", \"bottom\", etc.)\n */\n\nexport class ToastManager extends React.Component {\n  /**\n   * Static id counter to create unique ids\n   * for each toast\n   */\n\n  /**\n   * State to track all the toast across all positions\n   */\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      top: [],\n      \"top-left\": [],\n      \"top-right\": [],\n      \"bottom-left\": [],\n      bottom: [],\n      \"bottom-right\": []\n    });\n\n    _defineProperty(this, \"notify\", (message, options) => {\n      var toast = this.createToast(message, options);\n      var {\n        position,\n        id\n      } = toast;\n      this.setState(prevToasts => {\n        /**\n         * - If the toast is positioned at the top edges, the\n         * recent toast stacks on top of the other toasts.\n         *\n         * - If the toast is positioned at the bottom edges, the recent\n         * toast stacks below the other toasts.\n         */\n        var isTop = position.includes(\"top\");\n        return _extends({}, prevToasts, {\n          [position]: isTop ? [toast, ...prevToasts[position]] : [...prevToasts[position], toast]\n        });\n      });\n      return id;\n    });\n\n    _defineProperty(this, \"updateToast\", (id, options) => {\n      this.setState(prevState => {\n        var nextState = _extends({}, prevState);\n\n        var {\n          position,\n          index\n        } = findToast(nextState, id);\n\n        if (position && index !== -1) {\n          nextState[position][index] = _extends({}, nextState[position][index], options);\n        }\n\n        return nextState;\n      });\n    });\n\n    _defineProperty(this, \"closeAll\", () => {\n      objectKeys(this.state).forEach(position => {\n        this.state[position].forEach(toast => {\n          this.closeToast(toast.id);\n        });\n      });\n    });\n\n    _defineProperty(this, \"createToast\", (message, options) => {\n      var _options$id, _options$position;\n\n      var id = (_options$id = options.id) != null ? _options$id : ++ToastManager.counter;\n      var position = (_options$position = options.position) != null ? _options$position : \"top\";\n      return {\n        id,\n        message,\n        position,\n        duration: options.duration,\n        onCloseComplete: options.onCloseComplete,\n        onRequestRemove: () => this.removeToast(String(id), position),\n        status: options.status\n      };\n    });\n\n    _defineProperty(this, \"closeToast\", id => {\n      this.setState(prevState => {\n        var position = getToastPosition(prevState, id);\n        if (!position) return prevState;\n        return _extends({}, prevState, {\n          [position]: prevState[position].map(toast => _extends({}, toast, {\n            requestClose: toast.id == id\n          }))\n        });\n      });\n    });\n\n    _defineProperty(this, \"removeToast\", (id, position) => {\n      this.setState(prevState => {\n        return _extends({}, prevState, {\n          [position]: prevState[position].filter(toast => toast.id != id)\n        });\n      });\n    });\n\n    _defineProperty(this, \"isVisible\", id => {\n      var {\n        position\n      } = findToast(this.state, id);\n      return Boolean(position);\n    });\n\n    _defineProperty(this, \"getStyle\", position => {\n      var style = {\n        position: \"fixed\",\n        zIndex: 5500,\n        pointerEvents: \"none\"\n      };\n\n      if (position === \"top\" || position === \"bottom\") {\n        style.margin = \"0 auto\";\n        style.textAlign = \"center\";\n      }\n\n      if (position.includes(\"top\")) {\n        style.top = 0;\n      }\n\n      if (position.includes(\"bottom\")) {\n        style.bottom = 0;\n      }\n\n      if (!position.includes(\"left\")) {\n        style.right = 0;\n      }\n\n      if (!position.includes(\"right\")) {\n        style.left = 0;\n      }\n\n      return style;\n    });\n\n    var methods = {\n      notify: this.notify,\n      closeAll: this.closeAll,\n      close: this.closeToast,\n      update: this.updateToast,\n      isActive: this.isVisible\n    };\n    props.notify(methods);\n  }\n  /**\n   * Function to actually create a toast and add it\n   * to state at the specified position\n   */\n\n\n  render() {\n    return objectKeys(this.state).map(position => {\n      var toasts = this.state[position];\n      return /*#__PURE__*/React.createElement(\"span\", {\n        key: position,\n        id: \"chakra-toast-manager-\" + position,\n        style: this.getStyle(position)\n      }, toasts.map(toast => /*#__PURE__*/React.createElement(Toast, _extends({\n        key: toast.id\n      }, toast))));\n    });\n  }\n\n}\n\n_defineProperty(ToastManager, \"counter\", 0);","map":{"version":3,"sources":["../../src/toast-manager.tsx"],"names":["ToastManager","React","top","bottom","constructor","methods","notify","closeAll","close","update","isActive","isVisible","props","toast","id","prevToasts","isTop","position","prevState","nextState","index","findToast","objectKeys","options","duration","onCloseComplete","onRequestRemove","String","status","getToastPosition","requestClose","Boolean","style","zIndex","pointerEvents","render","toasts"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,UAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,KAAA,QAAA,SAAA;AAOA,SAAA,SAAA,EAAA,gBAAA,QAAA,eAAA;AAuBA;;;;;AAIA,OAAO,MAAA,YAAA,SAA2BC,KAAK,CAAhC,SAAA,CAAyD;AAC9D;;;;;AAMA;;;AAYAG,EAAAA,WAAW,CAAA,KAAA,EAAe;AACxB,UAAA,KAAA;;AADwB,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EATX;AACbF,MAAAA,GAAG,EADU,EAAA;AAEb,kBAFa,EAAA;AAGb,mBAHa,EAAA;AAIb,qBAJa,EAAA;AAKbC,MAAAA,MAAM,EALO,EAAA;AAMb,sBAAgB;AANH,KASW,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAkBjB,CAAA,OAAA,EAAA,OAAA,KAAwD;AAC/D,UAAMU,KAAK,GAAG,KAAA,WAAA,CAAA,OAAA,EAAd,OAAc,CAAd;AACA,UAAM;AAAA,QAAA,QAAA;AAAYC,QAAAA;AAAZ,UAAN,KAAA;AAEA,WAAA,QAAA,CAAeC,UAAD,IAAgB;AAC5B;;;;;;;AAOA,YAAMC,KAAK,GAAGC,QAAQ,CAARA,QAAAA,CAAd,KAAcA,CAAd;AAEA,eAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAEE,WAAA,QAAA,GAAYD,KAAK,GACb,CAAA,KAAA,EAAQ,GAAGD,UAAU,CADR,QACQ,CAArB,CADa,GAEb,CAAC,GAAGA,UAAU,CAAd,QAAc,CAAd,EAAA,KAAA;AAJN,SAAA,CAAA;AAVF,OAAA;AAkBA,aAAA,EAAA;AAxCwB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EA+CZ,CAAA,EAAA,EAAA,OAAA,KAA8C;AAC1D,WAAA,QAAA,CAAeG,SAAD,IAAe;AAC3B,YAAMC,SAAS,GAAA,QAAA,CAAA,EAAA,EAAf,SAAe,CAAf;;AACA,YAAM;AAAA,UAAA,QAAA;AAAYC,UAAAA;AAAZ,YAAsBC,SAAS,CAAA,SAAA,EAArC,EAAqC,CAArC;;AAEA,YAAIJ,QAAQ,IAAIG,KAAK,KAAK,CAA1B,CAAA,EAA8B;AAC5BD,UAAAA,SAAS,CAATA,QAAS,CAATA,CAAAA,KAAAA,IAAAA,QAAAA,CAAAA,EAAAA,EACKA,SAAS,CAATA,QAAS,CAATA,CADLA,KACKA,CADLA,EAAAA,OAAAA,CAAAA;AAID;;AAED,eAAA,SAAA;AAXF,OAAA;AAhDwB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAkEf,MAAM;AACfG,MAAAA,UAAU,CAAC,KAAXA,KAAU,CAAVA,CAAAA,OAAAA,CAAgCL,QAAD,IAAc;AAC3C,aAAA,KAAA,CAAA,QAAA,EAAA,OAAA,CAA8BJ,KAAD,IAAW;AACtC,eAAA,UAAA,CAAgBA,KAAK,CAArB,EAAA;AADF,SAAA;AADFS,OAAAA;AAnEwB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EA6EZ,CAAA,OAAA,EAAA,OAAA,KAAwD;AAAA,UAAA,WAAA,EAAA,iBAAA;;AACpE,UAAMR,EAAE,GAAA,CAAA,WAAA,GAAGS,OAAO,CAAV,EAAA,KAAA,IAAA,GAAA,WAAA,GAAiB,EAAEvB,YAAY,CAAvC,OAAA;AAEA,UAAMiB,QAAQ,GAAA,CAAA,iBAAA,GAAGM,OAAO,CAAV,QAAA,KAAA,IAAA,GAAA,iBAAA,GAAd,KAAA;AAEA,aAAO;AAAA,QAAA,EAAA;AAAA,QAAA,OAAA;AAAA,QAAA,QAAA;AAILC,QAAAA,QAAQ,EAAED,OAAO,CAJZ,QAAA;AAKLE,QAAAA,eAAe,EAAEF,OAAO,CALnB,eAAA;AAMLG,QAAAA,eAAe,EAAE,MAAM,KAAA,WAAA,CAAiBC,MAAM,CAAvB,EAAuB,CAAvB,EANlB,QAMkB,CANlB;AAOLC,QAAAA,MAAM,EAAEL,OAAO,CAACK;AAPX,OAAP;AAlFwB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAgGZd,EAAD,IAAiB;AAC5B,WAAA,QAAA,CAAeI,SAAD,IAAe;AAC3B,YAAMD,QAAQ,GAAGY,gBAAgB,CAAA,SAAA,EAAjC,EAAiC,CAAjC;AAEA,YAAI,CAAJ,QAAA,EAAe,OAAA,SAAA;AAEf,eAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAEE,WAAA,QAAA,GAAY,SAAS,CAAT,QAAS,CAAT,CAAA,GAAA,CAAyBhB,KAAD,IAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAElCiB,YAAAA,YAAY,EAAEjB,KAAK,CAALA,EAAAA,IAAYC;AAFQ,WAAA,CAAxB;AAFd,SAAA,CAAA;AALF,OAAA;AAjGwB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAmHZ,CAAA,EAAA,EAAA,QAAA,KAA0C;AACtD,WAAA,QAAA,CAAeI,SAAD,IAAe;AAC3B,eAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAEE,WAAA,QAAA,GAAYA,SAAS,CAATA,QAAS,CAATA,CAAAA,MAAAA,CAA4BL,KAAD,IAAWA,KAAK,CAALA,EAAAA,IAAtCK,EAAAA;AAFd,SAAA,CAAA;AADF,OAAA;AApHwB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EA4HbJ,EAAD,IAAiB;AAC3B,UAAM;AAAEG,QAAAA;AAAF,UAAeI,SAAS,CAAC,KAAD,KAAA,EAA9B,EAA8B,CAA9B;AACA,aAAOU,OAAO,CAAd,QAAc,CAAd;AA9HwB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAoIdd,QAAD,IAA6B;AACtC,UAAMe,KAA0B,GAAG;AACjCf,QAAAA,QAAQ,EADyB,OAAA;AAEjCgB,QAAAA,MAAM,EAF2B,IAAA;AAGjCC,QAAAA,aAAa,EAAE;AAHkB,OAAnC;;AAMA,UAAIjB,QAAQ,KAARA,KAAAA,IAAsBA,QAAQ,KAAlC,QAAA,EAAiD;AAC/Ce,QAAAA,KAAK,CAALA,MAAAA,GAAAA,QAAAA;AACAA,QAAAA,KAAK,CAALA,SAAAA,GAAAA,QAAAA;AACD;;AAED,UAAIf,QAAQ,CAARA,QAAAA,CAAJ,KAAIA,CAAJ,EAA8B;AAC5Be,QAAAA,KAAK,CAALA,GAAAA,GAAAA,CAAAA;AACD;;AAED,UAAIf,QAAQ,CAARA,QAAAA,CAAJ,QAAIA,CAAJ,EAAiC;AAC/Be,QAAAA,KAAK,CAALA,MAAAA,GAAAA,CAAAA;AACD;;AAED,UAAI,CAACf,QAAQ,CAARA,QAAAA,CAAL,MAAKA,CAAL,EAAgC;AAC9Be,QAAAA,KAAK,CAALA,KAAAA,GAAAA,CAAAA;AACD;;AAED,UAAI,CAACf,QAAQ,CAARA,QAAAA,CAAL,OAAKA,CAAL,EAAiC;AAC/Be,QAAAA,KAAK,CAALA,IAAAA,GAAAA,CAAAA;AACD;;AAED,aAAA,KAAA;AAhKwB,KAAA,CAAA;;AAGxB,QAAM3B,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE,KADM,MAAA;AAEdC,MAAAA,QAAQ,EAAE,KAFI,QAAA;AAGdC,MAAAA,KAAK,EAAE,KAHO,UAAA;AAIdC,MAAAA,MAAM,EAAE,KAJM,WAAA;AAKdC,MAAAA,QAAQ,EAAE,KAAKC;AALD,KAAhB;AAQAC,IAAAA,KAAK,CAALA,MAAAA,CAAAA,OAAAA;AACD;AAED;;;;;;AAqJAuB,EAAAA,MAAM,GAAG;AACP,WAAO,UAAU,CAAC,KAAX,KAAU,CAAV,CAAA,GAAA,CAA4BlB,QAAD,IAAc;AAC9C,UAAMmB,MAAM,GAAG,KAAA,KAAA,CAAf,QAAe,CAAf;AACA,aAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACE,QAAA,GAAG,EADL,QAAA;AAEE,QAAA,EAAE,EAAE,0BAFN,QAAA;AAGE,QAAA,KAAK,EAAE,KAAA,QAAA,CAAA,QAAA;AAHT,OAAA,EAKGA,MAAM,CAANA,GAAAA,CAAYvB,KAAD,IAAA,aACV,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AAAO,QAAA,GAAG,EAAEA,KAAK,CAACC;AAAlB,OAAA,EAPN,KAOM,CAAA,CADDsB,CALH,CADF;AAFF,KAAO,CAAP;AAcD;;AArM6D;;gBAAnDpC,Y,aAKM,C","sourcesContent":["import { objectKeys } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Toast } from \"./toast\"\nimport {\n  ToastId,\n  ToastMessage,\n  ToastOptions,\n  ToastPosition,\n} from \"./toast.types\"\nimport { findToast, getToastPosition } from \"./toast.utils\"\n\nexport interface Methods {\n  notify: (message: ToastMessage, options: CreateToastOptions) => ToastId\n  closeAll: () => void\n  close: (id: ToastId) => void\n  update: (id: ToastId, options: CreateToastOptions) => void\n  isActive: (id: ToastId) => boolean\n}\n\ninterface Props {\n  notify: (methods: Methods) => void\n}\n\ntype State = { [K in ToastPosition]: ToastOptions[] }\n\ntype CreateToastOptions = Partial<\n  Pick<\n    ToastOptions,\n    \"status\" | \"duration\" | \"position\" | \"id\" | \"onCloseComplete\"\n  >\n>\n\n/**\n * Manages the creation, and removal of toasts\n * across all corners (\"top\", \"bottom\", etc.)\n */\nexport class ToastManager extends React.Component<Props, State> {\n  /**\n   * Static id counter to create unique ids\n   * for each toast\n   */\n  static counter = 0\n\n  /**\n   * State to track all the toast across all positions\n   */\n  state: State = {\n    top: [],\n    \"top-left\": [],\n    \"top-right\": [],\n    \"bottom-left\": [],\n    bottom: [],\n    \"bottom-right\": [],\n  }\n\n  constructor(props: Props) {\n    super(props)\n\n    const methods = {\n      notify: this.notify,\n      closeAll: this.closeAll,\n      close: this.closeToast,\n      update: this.updateToast,\n      isActive: this.isVisible,\n    }\n\n    props.notify(methods)\n  }\n\n  /**\n   * Function to actually create a toast and add it\n   * to state at the specified position\n   */\n  notify = (message: ToastMessage, options: CreateToastOptions) => {\n    const toast = this.createToast(message, options)\n    const { position, id } = toast\n\n    this.setState((prevToasts) => {\n      /**\n       * - If the toast is positioned at the top edges, the\n       * recent toast stacks on top of the other toasts.\n       *\n       * - If the toast is positioned at the bottom edges, the recent\n       * toast stacks below the other toasts.\n       */\n      const isTop = position.includes(\"top\")\n\n      return {\n        ...prevToasts,\n        [position]: isTop\n          ? [toast, ...prevToasts[position]]\n          : [...prevToasts[position], toast],\n      }\n    })\n\n    return id\n  }\n\n  /**\n   * Update a specific toast with new options based on the\n   * passed `id`\n   */\n  updateToast = (id: ToastId, options: CreateToastOptions) => {\n    this.setState((prevState) => {\n      const nextState = { ...prevState }\n      const { position, index } = findToast(nextState, id)\n\n      if (position && index !== -1) {\n        nextState[position][index] = {\n          ...nextState[position][index],\n          ...options,\n        }\n      }\n\n      return nextState\n    })\n  }\n\n  /**\n   * Close all toasts at once\n   */\n  closeAll = () => {\n    objectKeys(this.state).forEach((position) => {\n      this.state[position].forEach((toast) => {\n        this.closeToast(toast.id)\n      })\n    })\n  }\n\n  /**\n   * Create properties for a new toast\n   */\n  createToast = (message: ToastMessage, options: CreateToastOptions) => {\n    const id = options.id ?? ++ToastManager.counter\n\n    const position = options.position ?? \"top\"\n\n    return {\n      id,\n      message,\n      position,\n      duration: options.duration,\n      onCloseComplete: options.onCloseComplete,\n      onRequestRemove: () => this.removeToast(String(id), position),\n      status: options.status,\n    }\n  }\n\n  /**\n   * Requests to close a toast based on it's id and position\n   */\n  closeToast = (id: ToastId) => {\n    this.setState((prevState) => {\n      const position = getToastPosition(prevState, id)\n\n      if (!position) return prevState\n\n      return {\n        ...prevState,\n        [position]: prevState[position].map((toast) => ({\n          ...toast,\n          requestClose: toast.id == id,\n        })),\n      }\n    })\n  }\n\n  /**\n   * Delete a toast record at it's position\n   */\n  removeToast = (id: ToastId, position: ToastPosition) => {\n    this.setState((prevState) => {\n      return {\n        ...prevState,\n        [position]: prevState[position].filter((toast) => toast.id != id),\n      }\n    })\n  }\n\n  isVisible = (id: ToastId) => {\n    const { position } = findToast(this.state, id)\n    return Boolean(position)\n  }\n\n  /**\n   * Compute the style of a toast based on it's position\n   */\n  getStyle = (position: ToastPosition) => {\n    const style: React.CSSProperties = {\n      position: \"fixed\",\n      zIndex: 5500,\n      pointerEvents: \"none\",\n    }\n\n    if (position === \"top\" || position === \"bottom\") {\n      style.margin = \"0 auto\"\n      style.textAlign = \"center\"\n    }\n\n    if (position.includes(\"top\")) {\n      style.top = 0\n    }\n\n    if (position.includes(\"bottom\")) {\n      style.bottom = 0\n    }\n\n    if (!position.includes(\"left\")) {\n      style.right = 0\n    }\n\n    if (!position.includes(\"right\")) {\n      style.left = 0\n    }\n\n    return style\n  }\n\n  render() {\n    return objectKeys(this.state).map((position) => {\n      const toasts = this.state[position]\n      return (\n        <span\n          key={position}\n          id={\"chakra-toast-manager-\" + position}\n          style={this.getStyle(position)}\n        >\n          {toasts.map((toast) => (\n            <Toast key={toast.id} {...toast} />\n          ))}\n        </span>\n      )\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}