{"ast":null,"code":"import { getClosestValue } from \"./media-query.utils\";\nimport { useBreakpoint } from \"./use-breakpoint\";\nimport { isArray, arrayToObjectNotation, fromEntries } from \"@chakra-ui/utils\";\nimport { useTheme } from \"@chakra-ui/system\";\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\nexport function useBreakpointValue(values) {\n  var breakpoint = useBreakpoint();\n  var {\n    breakpoints\n  } = useTheme();\n\n  if (!breakpoint) {\n    return;\n  }\n\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(_ref => {\n    var [_, value] = _ref;\n    return [value, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint);\n}","map":{"version":3,"sources":["../../src/use-breakpoint-value.ts"],"names":["breakpoint","useBreakpoint","breakpoints","useTheme","obj","fromEntries","arrayToObjectNotation","getClosestValue"],"mappings":"AAAA,SAAA,eAAA,QAAA,qBAAA;AACA,SAAA,aAAA,QAAA,kBAAA;AACA,SAAA,OAAA,EAAA,qBAAA,EAAA,WAAA,QAAA,kBAAA;AACA,SAAA,QAAA,QAAA,mBAAA;AAEA;;;;;;;;AAOA,OAAO,SAAA,kBAAA,CAAA,MAAA,EAEU;AACf,MAAMA,UAAU,GAAGC,aAAnB,EAAA;AACA,MAAM;AAAEC,IAAAA;AAAF,MAAkBC,QAAxB,EAAA;;AAEA,MAAI,CAAJ,UAAA,EAAiB;AACf;AACD;;AAED,MAAMC,GAAG,GAAG,OAAO,CAAP,MAAO,CAAP,GACRC,WAAW,CACT,MAAM,CAAN,OAAA,CACEC,qBAAqB,CAAA,MAAA,EADvB,WACuB,CADvB,EAAA,GAAA,CAEM,IAAA,IAAA;AAAA,QAAC,CAAA,CAAA,EAAD,KAAC,IAAD,IAAA;AAAA,WAAgB,CAAA,KAAA,EAAhB,KAAgB,CAAhB;AAJA,GAEN,CADS,CADH,GAAZ,MAAA;AAQA,SAAOC,eAAe,CAAA,GAAA,EAAtB,UAAsB,CAAtB;AACD","sourcesContent":["import { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint } from \"./use-breakpoint\"\nimport { isArray, arrayToObjectNotation, fromEntries } from \"@chakra-ui/utils\"\nimport { useTheme } from \"@chakra-ui/system\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\nexport function useBreakpointValue<T = any>(\n  values: Record<string, T> | T[],\n): T | undefined {\n  const breakpoint = useBreakpoint()\n  const { breakpoints } = useTheme()\n\n  if (!breakpoint) {\n    return\n  }\n\n  const obj = isArray(values)\n    ? fromEntries<Record<string, T>>(\n        Object.entries(\n          arrayToObjectNotation(values, breakpoints),\n        ).map(([_, value]) => [value, value]),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint)\n}\n"]},"metadata":{},"sourceType":"module"}