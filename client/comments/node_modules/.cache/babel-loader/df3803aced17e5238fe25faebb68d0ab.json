{"ast":null,"code":"import * as React from \"react\";\nimport { isBrowser } from \"@chakra-ui/utils\";\nimport { useLatestRef } from \"./use-latest-ref\";\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n */\n\nexport function useEventListener(event, handler, doc, options) {\n  if (doc === void 0) {\n    doc = isBrowser ? document : null;\n  }\n\n  var savedHandler = useLatestRef(handler);\n  React.useEffect(() => {\n    if (!doc) return;\n\n    var listener = event => {\n      savedHandler.current(event);\n    };\n\n    doc.addEventListener(event, listener, options);\n    return () => {\n      doc.removeEventListener(event, listener, options);\n    };\n  }, [event, doc, options, savedHandler]);\n  return () => {\n    var _doc;\n\n    (_doc = doc) == null ? void 0 : _doc.removeEventListener(event, savedHandler.current, options);\n  };\n}","map":{"version":3,"sources":["../../src/use-event-listener.ts"],"names":["doc","isBrowser","savedHandler","useLatestRef","React","listener","event"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,SAAA,QAAA,kBAAA;AACA,SAAA,YAAA,QAAA,kBAAA;AAEA;;;;;;;;;AAQA,OAAO,SAAA,gBAAA,CAAA,KAAA,EAAA,OAAA,EAAA,GAAA,EAAA,OAAA,EAKL;AAAA,MAFAA,GAEA,KAAA,KAAA,CAAA,EAAA;AAFAA,IAAAA,GAEA,GAFuBC,SAAS,GAAA,QAAA,GAAc,IAA9CD;AAEA;;AACA,MAAME,YAAY,GAAGC,YAAY,CAAjC,OAAiC,CAAjC;AAEAC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,QAAI,CAAJ,GAAA,EAAU;;AAEV,QAAMC,QAAQ,GAAIC,KAAD,IAAgB;AAC/BJ,MAAAA,YAAY,CAAZA,OAAAA,CAAAA,KAAAA;AADF,KAAA;;AAIAF,IAAAA,GAAG,CAAHA,gBAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,OAAAA;AAEA,WAAO,MAAM;AACXA,MAAAA,GAAG,CAAHA,mBAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,OAAAA;AADF,KAAA;AATFI,GAAAA,EAYG,CAAA,KAAA,EAAA,GAAA,EAAA,OAAA,EAZHA,YAYG,CAZHA;AAcA,SAAO,MAAM;AAAA,QAAA,IAAA;;AACX,KAAA,IAAA,GAAA,GAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,IAAA,CAAA,mBAAA,CAAA,KAAA,EAAgCF,YAAY,CAA5C,OAAA,EAAA,OAAA,CAAA;AADF,GAAA;AAGD","sourcesContent":["import * as React from \"react\"\nimport { isBrowser } from \"@chakra-ui/utils\"\nimport { useLatestRef } from \"./use-latest-ref\"\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n */\nexport function useEventListener(\n  event: keyof WindowEventMap,\n  handler: (event: any) => void,\n  doc: Document | null = isBrowser ? document : null,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const savedHandler = useLatestRef(handler)\n\n  React.useEffect(() => {\n    if (!doc) return\n\n    const listener = (event: any) => {\n      savedHandler.current(event)\n    }\n\n    doc.addEventListener(event, listener, options)\n\n    return () => {\n      doc.removeEventListener(event, listener, options)\n    }\n  }, [event, doc, options, savedHandler])\n\n  return () => {\n    doc?.removeEventListener(event, savedHandler.current, options)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}