{"ast":null,"code":"import { isNumber, isCustomBreakpoint } from \"@chakra-ui/utils\";\nimport calculateMeasurement from \"calculate-measurement\";\n\nfunction createMediaQueries(breakpoints) {\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   *\n   * reverse to begin with the largest\n   */\n  var keys = Object.keys(breakpoints).filter(isCustomBreakpoint).reverse();\n  /**\n   * create a min-max media query string\n   */\n\n  return keys.map(function (breakpoint, index) {\n    var minWidth = breakpoints[breakpoint];\n    var next = keys[index - 1];\n    var maxWidth = next ? breakpoints[next] : undefined;\n    var query = createMediaQueryString(minWidth, maxWidth);\n    return {\n      breakpoint: breakpoint,\n      maxWidth: maxWidth,\n      minWidth: minWidth,\n      query: query\n    };\n  });\n}\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\n\n\nfunction createMediaQueryString(minWidth, maxWidth) {\n  var hasMinWidth = parseInt(minWidth) >= 0;\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\";\n  }\n\n  var query = \"(min-width: \" + toMediaString(minWidth) + \")\";\n\n  if (!maxWidth) {\n    return query;\n  }\n\n  if (query) {\n    query += \" and \";\n  }\n\n  query += \"(max-width: \" + toMediaString(subtract(maxWidth)) + \")\";\n  return query;\n}\n\nfunction subtract(value) {\n  return calculateMeasurement(value, -0.01);\n}\n/**\n * Convert media query value to string\n */\n\n\nfunction toMediaString(value) {\n  return isNumber(value) ? value + \"px\" : value;\n}\n\nexport default createMediaQueries;","map":{"version":3,"sources":["../../src/create-media-query.ts"],"names":["keys","Object","minWidth","breakpoints","next","index","maxWidth","query","createMediaQueryString","breakpoint","hasMinWidth","parseInt","toMediaString","subtract","calculateMeasurement","isNumber","value"],"mappings":"AAAA,SAAA,QAAA,EAAA,kBAAA,QAAA,kBAAA;AACA,OAAA,oBAAA,MAAA,uBAAA;;AAEA,SAAA,kBAAA,CAAA,WAAA,EAAiE;AAC/D;;;;;AAKA,MAAMA,IAAI,GAAGC,MAAM,CAANA,IAAAA,CAAAA,WAAAA,EAAAA,MAAAA,CAAAA,kBAAAA,EAAb,OAAaA,EAAb;AAEA;;;;AAGA,SAAO,IAAI,CAAJ,GAAA,CAAS,UAAA,UAAA,EAAA,KAAA,EAAuB;AACrC,QAAMC,QAAQ,GAAGC,WAAW,CAA5B,UAA4B,CAA5B;AAEA,QAAMC,IAAI,GAAGJ,IAAI,CAACK,KAAK,GAAvB,CAAiB,CAAjB;AACA,QAAMC,QAAQ,GAAGF,IAAI,GAAGD,WAAW,CAAd,IAAc,CAAd,GAArB,SAAA;AAEA,QAAMI,KAAK,GAAGC,sBAAsB,CAAA,QAAA,EAApC,QAAoC,CAApC;AAEA,WAAO;AACLC,MAAAA,UADK,EACLA,UADK;AAELH,MAAAA,QAFK,EAELA,QAFK;AAGLJ,MAAAA,QAHK,EAGLA,QAHK;AAILK,MAAAA,KAAAA,EAAAA;AAJK,KAAP;AARF,GAAO,CAAP;AAeD;AAED;;;;;;AAIA,SAAA,sBAAA,CAAA,QAAA,EAAA,QAAA,EAAqE;AACnE,MAAMG,WAAW,GAAGC,QAAQ,CAARA,QAAQ,CAARA,IAApB,CAAA;;AAEA,MAAI,CAAA,WAAA,IAAgB,CAApB,QAAA,EAA+B;AAC7B,WAAA,EAAA;AACD;;AAED,MAAIJ,KAAK,GAAA,iBAAkBK,aAAa,CAA/B,QAA+B,CAA/B,GAAT,GAAA;;AAEA,MAAI,CAAJ,QAAA,EAAe;AACb,WAAA,KAAA;AACD;;AAED,MAAA,KAAA,EAAW;AACTL,IAAAA,KAAK,IAALA,OAAAA;AACD;;AAEDA,EAAAA,KAAK,IAAA,iBAAmBK,aAAa,CAACC,QAAQ,CAAzC,QAAyC,CAAT,CAAhC,GAALN,GAAAA;AAEA,SAAA,KAAA;AACD;;AASD,SAAA,QAAA,CAAA,KAAA,EAA8B;AAC5B,SAAOO,oBAAoB,CAAA,KAAA,EAAQ,CAAnC,IAA2B,CAA3B;AACD;AAED;;;;;AAGA,SAAA,aAAA,CAAA,KAAA,EAAmC;AACjC,SAAOC,QAAQ,CAARA,KAAQ,CAARA,GAAqBC,KAArBD,GAAAA,IAAAA,GAAP,KAAA;AACD;;AAED,eAAA,kBAAA","sourcesContent":["import { isNumber, isCustomBreakpoint } from \"@chakra-ui/utils\"\nimport calculateMeasurement from \"calculate-measurement\"\n\nfunction createMediaQueries(breakpoints: string[]): MediaQuery[] {\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   *\n   * reverse to begin with the largest\n   */\n  const keys = Object.keys(breakpoints).filter(isCustomBreakpoint).reverse()\n\n  /**\n   * create a min-max media query string\n   */\n  return keys.map((breakpoint, index) => {\n    const minWidth = breakpoints[breakpoint]\n\n    const next = keys[index - 1]\n    const maxWidth = next ? breakpoints[next] : undefined\n\n    const query = createMediaQueryString(minWidth, maxWidth)\n\n    return {\n      breakpoint,\n      maxWidth,\n      minWidth,\n      query,\n    }\n  })\n}\n\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\nfunction createMediaQueryString(minWidth: string, maxWidth?: string) {\n  const hasMinWidth = parseInt(minWidth) >= 0\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\"\n  }\n\n  let query = `(min-width: ${toMediaString(minWidth)})`\n\n  if (!maxWidth) {\n    return query\n  }\n\n  if (query) {\n    query += \" and \"\n  }\n\n  query += `(max-width: ${toMediaString(subtract(maxWidth))})`\n\n  return query\n}\n\ninterface MediaQuery {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n  query: string\n}\n\nfunction subtract(value: any) {\n  return calculateMeasurement(value, -0.01)\n}\n\n/**\n * Convert media query value to string\n */\nfunction toMediaString(value: any) {\n  return isNumber(value) ? `${value}px` : value\n}\n\nexport default createMediaQueries\n"]},"metadata":{},"sourceType":"module"}