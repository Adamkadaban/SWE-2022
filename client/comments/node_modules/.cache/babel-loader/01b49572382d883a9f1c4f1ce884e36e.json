{"ast":null,"code":"var oppositeDirections = {\n  top: \"bottom\",\n  bottom: \"top\",\n  right: \"left\",\n  left: \"right\"\n};\nexport var getOppositePosition = position => oppositeDirections[position];\n\nvar splitPlacement = placement => placement.split(\"-\");\n\nexport function getArrowStyles(placement, arrowSize, arrowShadowColor) {\n  if (typeof placement !== \"string\") return {};\n  var [position] = splitPlacement(placement);\n  var oppositePosition = getOppositePosition(position);\n  if (!oppositePosition) return {};\n  return {\n    [oppositePosition]: \"-\" + arrowSize / 2 + \"px\",\n    width: arrowSize,\n    height: arrowSize,\n    position: \"absolute\",\n    transform: \"rotate(45deg)\",\n    boxShadow: arrowShadowColor ? getBoxShadow(placement, arrowShadowColor) : undefined\n  };\n}\nexport function getBoxShadow(placement, color) {\n  if (placement.includes(\"top\")) {\n    return \"2px 2px 2px 0 \" + color;\n  }\n\n  if (placement.includes(\"bottom\")) {\n    return \"-1px -1px 1px 0 \" + color;\n  }\n\n  if (placement.includes(\"right\")) {\n    return \"-1px 1px 1px 0 \" + color;\n  }\n\n  if (placement.includes(\"left\")) {\n    return \"1px -1px 1px 0 \" + color;\n  }\n}\nvar transformEnum = {\n  top: \"bottom center\",\n  \"top-start\": \"bottom left\",\n  \"top-end\": \"bottom right\",\n  bottom: \"top center\",\n  \"bottom-start\": \"top left\",\n  \"bottom-end\": \"top right\",\n  left: \"right center\",\n  \"left-start\": \"right top\",\n  \"left-end\": \"right bottom\",\n  right: \"left center\",\n  \"right-start\": \"left top\",\n  \"right-end\": \"left bottom\"\n};\nexport var toTransformOrigin = placement => transformEnum[placement];","map":{"version":3,"sources":["../../src/popper.utils.ts"],"names":["oppositeDirections","top","bottom","right","left","getOppositePosition","position","splitPlacement","placement","oppositePosition","arrowSize","width","height","transform","boxShadow","arrowShadowColor","getBoxShadow","undefined","transformEnum","toTransformOrigin"],"mappings":"AAEA,IAAMA,kBAAkB,GAAG;AACzBC,EAAAA,GAAG,EADsB,QAAA;AAEzBC,EAAAA,MAAM,EAFmB,KAAA;AAGzBC,EAAAA,KAAK,EAHoB,MAAA;AAIzBC,EAAAA,IAAI,EAAE;AAJmB,CAA3B;AASA,OAAO,IAAMC,mBAAmB,GAAIC,QAAD,IACjCN,kBAAkB,CADb,QACa,CADb;;AAGP,IAAMO,cAAc,GAAIC,SAAD,IACrBA,SAAS,CAATA,KAAAA,CADF,GACEA,CADF;;AAGA,OAAO,SAAA,cAAA,CAAA,SAAA,EAAA,SAAA,EAAA,gBAAA,EAIgB;AACrB,MAAI,OAAA,SAAA,KAAJ,QAAA,EAAmC,OAAA,EAAA;AAEnC,MAAM,CAAA,QAAA,IAAaD,cAAc,CAAjC,SAAiC,CAAjC;AACA,MAAME,gBAAgB,GAAGJ,mBAAmB,CAA5C,QAA4C,CAA5C;AAEA,MAAI,CAAJ,gBAAA,EAAuB,OAAA,EAAA;AAEvB,SAAO;AACL,KAAA,gBAAA,GAAA,MAAwBK,SAAS,GAAjC,CAAA,GADK,IAAA;AAELC,IAAAA,KAAK,EAFA,SAAA;AAGLC,IAAAA,MAAM,EAHD,SAAA;AAILN,IAAAA,QAAQ,EAJH,UAAA;AAKLO,IAAAA,SAAS,EALJ,eAAA;AAMLC,IAAAA,SAAS,EAAEC,gBAAgB,GACvBC,YAAY,CAAA,SAAA,EADW,gBACX,CADW,GAEvBC;AARC,GAAP;AAUD;AAED,OAAO,SAAA,YAAA,CAAA,SAAA,EAAA,KAAA,EAA2D;AAChE,MAAIT,SAAS,CAATA,QAAAA,CAAJ,KAAIA,CAAJ,EAA+B;AAC7B,WAAA,mBAAA,KAAA;AACD;;AAED,MAAIA,SAAS,CAATA,QAAAA,CAAJ,QAAIA,CAAJ,EAAkC;AAChC,WAAA,qBAAA,KAAA;AACD;;AAED,MAAIA,SAAS,CAATA,QAAAA,CAAJ,OAAIA,CAAJ,EAAiC;AAC/B,WAAA,oBAAA,KAAA;AACD;;AAED,MAAIA,SAAS,CAATA,QAAAA,CAAJ,MAAIA,CAAJ,EAAgC;AAC9B,WAAA,oBAAA,KAAA;AACD;AACF;AAED,IAAMU,aAAa,GAAG;AACpBjB,EAAAA,GAAG,EADiB,eAAA;AAEpB,eAFoB,aAAA;AAGpB,aAHoB,cAAA;AAKpBC,EAAAA,MAAM,EALc,YAAA;AAMpB,kBANoB,UAAA;AAOpB,gBAPoB,WAAA;AASpBE,EAAAA,IAAI,EATgB,cAAA;AAUpB,gBAVoB,WAAA;AAWpB,cAXoB,cAAA;AAapBD,EAAAA,KAAK,EAbe,aAAA;AAcpB,iBAdoB,UAAA;AAepB,eAAa;AAfO,CAAtB;AAkBA,OAAO,IAAMgB,iBAAiB,GAAIX,SAAD,IAC/BU,aAAa,CADR,SACQ,CADR","sourcesContent":["import { Placement } from \"@popperjs/core\"\n\nconst oppositeDirections = {\n  top: \"bottom\",\n  bottom: \"top\",\n  right: \"left\",\n  left: \"right\",\n}\n\ntype Direction = keyof typeof oppositeDirections\n\nexport const getOppositePosition = (position: Direction) =>\n  oppositeDirections[position]\n\nconst splitPlacement = (placement: Placement) =>\n  placement.split(\"-\") as Direction[]\n\nexport function getArrowStyles(\n  placement: Placement | undefined,\n  arrowSize: number,\n  arrowShadowColor?: string,\n): React.CSSProperties {\n  if (typeof placement !== \"string\") return {}\n\n  const [position] = splitPlacement(placement)\n  const oppositePosition = getOppositePosition(position)\n\n  if (!oppositePosition) return {}\n\n  return {\n    [oppositePosition]: `-${arrowSize / 2}px`,\n    width: arrowSize,\n    height: arrowSize,\n    position: \"absolute\",\n    transform: \"rotate(45deg)\",\n    boxShadow: arrowShadowColor\n      ? getBoxShadow(placement, arrowShadowColor)\n      : undefined,\n  }\n}\n\nexport function getBoxShadow(placement: Placement, color: string) {\n  if (placement.includes(\"top\")) {\n    return `2px 2px 2px 0 ${color}`\n  }\n\n  if (placement.includes(\"bottom\")) {\n    return `-1px -1px 1px 0 ${color}`\n  }\n\n  if (placement.includes(\"right\")) {\n    return `-1px 1px 1px 0 ${color}`\n  }\n\n  if (placement.includes(\"left\")) {\n    return `1px -1px 1px 0 ${color}`\n  }\n}\n\nconst transformEnum = {\n  top: \"bottom center\",\n  \"top-start\": \"bottom left\",\n  \"top-end\": \"bottom right\",\n\n  bottom: \"top center\",\n  \"bottom-start\": \"top left\",\n  \"bottom-end\": \"top right\",\n\n  left: \"right center\",\n  \"left-start\": \"right top\",\n  \"left-end\": \"right bottom\",\n\n  right: \"left center\",\n  \"right-start\": \"left top\",\n  \"right-end\": \"left bottom\",\n}\n\nexport const toTransformOrigin = (placement: Placement) =>\n  transformEnum[placement]\n"]},"metadata":{},"sourceType":"module"}