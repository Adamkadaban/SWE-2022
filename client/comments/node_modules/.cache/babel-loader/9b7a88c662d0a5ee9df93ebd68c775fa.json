{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport CSSTransition from \"react-transition-group/CSSTransition\";\nexport var HiddenTransition = props => {\n  var {\n    nodeRef,\n    children,\n    onEnter: _onEnter,\n    onExited: _onExited,\n    onExit: _onExit,\n    onExiting: _onExiting\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"nodeRef\", \"children\", \"onEnter\", \"onExited\", \"onExit\", \"onExiting\"]);\n\n  return /*#__PURE__*/React.createElement(CSSTransition, _extends({}, rest, {\n    nodeRef: nodeRef,\n    addEndListener: done => {\n      var _nodeRef$current;\n\n      (_nodeRef$current = nodeRef.current) == null ? void 0 : _nodeRef$current.addEventListener(\"transitionend\", done, false);\n    },\n    onEnter: isAppearing => {\n      if (nodeRef.current) {\n        nodeRef.current.hidden = false;\n      }\n\n      _onEnter == null ? void 0 : _onEnter(isAppearing);\n    },\n    onExited: () => {\n      if (nodeRef.current) {\n        nodeRef.current.hidden = true;\n        nodeRef.current.style.pointerEvents = \"auto\";\n      }\n\n      _onExited == null ? void 0 : _onExited();\n    },\n    onExit: () => {\n      if (nodeRef.current) {\n        nodeRef.current.hidden = false;\n      }\n\n      _onExit == null ? void 0 : _onExit();\n    },\n    onExiting: () => {\n      if (nodeRef.current) {\n        nodeRef.current.style.pointerEvents = \"none\";\n      }\n\n      _onExiting == null ? void 0 : _onExiting();\n    }\n  }), children);\n};\n\nif (__DEV__) {\n  HiddenTransition.displayName = \"HiddenTransition\";\n}","map":{"version":3,"sources":["../../src/hidden-transition.tsx"],"names":["HiddenTransition","props","onEnter","onExited","onExit","onExiting","rest","done","isAppearing","nodeRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,aAAA,MAAA,sCAAA;AAyBA,OAAO,IAAMA,gBAAiD,GAAIC,KAAD,IAAW;AAC1E,MAAM;AAAA,IAAA,OAAA;AAAA,IAAA,QAAA;AAGJC,IAAAA,OAAO,EAHH,QAAA;AAIJC,IAAAA,QAAQ,EAJJ,SAAA;AAKJC,IAAAA,MAAM,EALF,OAAA;AAMJC,IAAAA,SAAS,EAATA;AANI,MAAN,KAAA;AAAA,MAOKC,IAPL,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,SAAA,EAAA,UAAA,EAAA,SAAA,EAAA,UAAA,EAAA,QAAA,EAAA,WAAA,CAAA,CAAA;;AAUA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,OAAO,EAFT,OAAA;AAGE,IAAA,cAAc,EAAGC,IAAD,IAAU;AAAA,UAAA,gBAAA;;AACxB,OAAA,gBAAA,GAAA,OAAO,CAAP,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,gBAAA,CAAA,gBAAA,CAAA,eAAA,EAAA,IAAA,EAAA,KAAA,CAAA;AAJJ,KAAA;AAME,IAAA,OAAO,EAAGC,WAAD,IAAiB;AACxB,UAAIC,OAAO,CAAX,OAAA,EAAqB;AACnBA,QAAAA,OAAO,CAAPA,OAAAA,CAAAA,MAAAA,GAAAA,KAAAA;AACD;;AACDP,MAAAA,QAAO,IAAPA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAO,CAAPA,WAAO,CAAPA;AAVJ,KAAA;AAYE,IAAA,QAAQ,EAAE,MAAM;AACd,UAAIO,OAAO,CAAX,OAAA,EAAqB;AACnBA,QAAAA,OAAO,CAAPA,OAAAA,CAAAA,MAAAA,GAAAA,IAAAA;AACAA,QAAAA,OAAO,CAAPA,OAAAA,CAAAA,KAAAA,CAAAA,aAAAA,GAAAA,MAAAA;AACD;;AACDN,MAAAA,SAAQ,IAARA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,SAAQ,EAARA;AAjBJ,KAAA;AAmBE,IAAA,MAAM,EAAE,MAAM;AACZ,UAAIM,OAAO,CAAX,OAAA,EAAqB;AACnBA,QAAAA,OAAO,CAAPA,OAAAA,CAAAA,MAAAA,GAAAA,KAAAA;AACD;;AACDL,MAAAA,OAAM,IAANA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAM,EAANA;AAvBJ,KAAA;AAyBE,IAAA,SAAS,EAAE,MAAM;AACf,UAAIK,OAAO,CAAX,OAAA,EAAqB;AACnBA,QAAAA,OAAO,CAAPA,OAAAA,CAAAA,KAAAA,CAAAA,aAAAA,GAAAA,MAAAA;AACD;;AACDJ,MAAAA,UAAS,IAATA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAS,EAATA;AACD;AA9BH,GAAA,CAAA,EADF,QACE,CADF;AAXK,CAAA;;AAiDP,IAAA,OAAA,EAAa;AACXL,EAAAA,gBAAgB,CAAhBA,WAAAA,GAAAA,kBAAAA;AACD","sourcesContent":["import { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport CSSTransition, {\n  CSSTransitionProps,\n} from \"react-transition-group/CSSTransition\"\n\ntype Picked =\n  | \"onEnter\"\n  | \"onEntered\"\n  | \"timeout\"\n  | \"onExited\"\n  | \"onExit\"\n  | \"classNames\"\n  | \"onExiting\"\n  | \"in\"\n  | \"unmountOnExit\"\n  | \"mountOnEnter\"\n\nexport type HiddenTransitionProps = Pick<\n  CSSTransitionProps<HTMLElement>,\n  Picked\n> & {\n  nodeRef: React.RefObject<HTMLElement>\n  children: React.ReactNode\n  appear?: boolean\n}\n\nexport const HiddenTransition: React.FC<HiddenTransitionProps> = (props) => {\n  const {\n    nodeRef,\n    children,\n    onEnter,\n    onExited,\n    onExit,\n    onExiting,\n    ...rest\n  } = props\n\n  return (\n    <CSSTransition\n      {...rest}\n      nodeRef={nodeRef}\n      addEndListener={(done) => {\n        nodeRef.current?.addEventListener(\"transitionend\", done, false)\n      }}\n      onEnter={(isAppearing) => {\n        if (nodeRef.current) {\n          nodeRef.current.hidden = false\n        }\n        onEnter?.(isAppearing)\n      }}\n      onExited={() => {\n        if (nodeRef.current) {\n          nodeRef.current.hidden = true\n          nodeRef.current.style.pointerEvents = \"auto\"\n        }\n        onExited?.()\n      }}\n      onExit={() => {\n        if (nodeRef.current) {\n          nodeRef.current.hidden = false\n        }\n        onExit?.()\n      }}\n      onExiting={() => {\n        if (nodeRef.current) {\n          nodeRef.current.style.pointerEvents = \"none\"\n        }\n        onExiting?.()\n      }}\n    >\n      {children}\n    </CSSTransition>\n  )\n}\n\nif (__DEV__) {\n  HiddenTransition.displayName = \"HiddenTransition\"\n}\n"]},"metadata":{},"sourceType":"module"}