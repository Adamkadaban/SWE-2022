{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/** @jsx jsx */\n\n\nimport AnimateHeight from \"react-animate-height\";\nimport { chakra, jsx, forwardRef } from \"@chakra-ui/system\";\nimport { __DEV__ } from \"@chakra-ui/utils\";\nexport var Collapse = /*#__PURE__*/forwardRef(function Collapse(props, ref) {\n  var {\n    isOpen,\n    animateOpacity = true,\n    onAnimationStart,\n    onAnimationEnd,\n    duration,\n    easing = \"ease\",\n    startingHeight = 0,\n    endingHeight = \"auto\"\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"isOpen\", \"animateOpacity\", \"onAnimationStart\", \"onAnimationEnd\", \"duration\", \"easing\", \"startingHeight\", \"endingHeight\"]);\n\n  return jsx(AnimateHeight, {\n    duration: duration,\n    easing: easing,\n    animateOpacity: animateOpacity,\n    height: isOpen ? endingHeight : startingHeight,\n    applyInlineTransitions: false,\n    onAnimationStart: onAnimationStart,\n    onAnimationEnd: onAnimationEnd,\n    css: {\n      transition: \"height 0.2s ease,opacity 0.2s ease-in-out,transform 0.2s ease-in-out\",\n      \"&.rah-animating--to-height-zero\": {\n        opacity: 0,\n        transform: \"translateY(-0.625rem)\"\n      }\n    }\n  }, jsx(chakra.div, _extends({\n    ref: ref\n  }, rest)));\n});\n\nif (__DEV__) {\n  Collapse.displayName = \"Collapse\";\n}\n\nexport default Collapse;","map":{"version":3,"sources":["../../src/collapse.tsx"],"names":["Collapse","forwardRef","animateOpacity","easing","startingHeight","endingHeight","rest","isOpen","transition","opacity","transform","ref"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA,OAAA,aAAA,MAAA,sBAAA;AAGA,SAAA,MAAA,EAAA,GAAA,EAAA,UAAA,QAAA,mBAAA;AACA,SAAA,OAAA,QAAA,kBAAA;AAqDA,OAAO,IAAMA,QAAQ,GAAA,aAAGC,UAAU,CAAuB,SAAA,QAAA,CAAA,KAAA,EAAA,GAAA,EAGvD;AACA,MAAM;AAAA,IAAA,MAAA;AAEJC,IAAAA,cAAc,GAFV,IAAA;AAAA,IAAA,gBAAA;AAAA,IAAA,cAAA;AAAA,IAAA,QAAA;AAMJC,IAAAA,MAAM,GANF,MAAA;AAOJC,IAAAA,cAAc,GAPV,CAAA;AAQJC,IAAAA,YAAY,GAAG;AARX,MAAN,KAAA;AAAA,MASKC,IATL,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,QAAA,EAAA,gBAAA,EAAA,kBAAA,EAAA,gBAAA,EAAA,UAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,cAAA,CAAA,CAAA;;AAYA,SACE,GAAA,CAAA,aAAA,EAAA;AACE,IAAA,QAAQ,EADV,QAAA;AAEE,IAAA,MAAM,EAFR,MAAA;AAGE,IAAA,cAAc,EAHhB,cAAA;AAIE,IAAA,MAAM,EAAEC,MAAM,GAAA,YAAA,GAJhB,cAAA;AAKE,IAAA,sBAAsB,EALxB,KAAA;AAME,IAAA,gBAAgB,EANlB,gBAAA;AAOE,IAAA,cAAc,EAPhB,cAAA;AAQE,IAAA,GAAG,EAAE;AACHC,MAAAA,UAAU,EADP,sEAAA;AAGH,yCAAmC;AACjCC,QAAAA,OAAO,EAD0B,CAAA;AAEjCC,QAAAA,SAAS,EAAE;AAFsB;AAHhC;AARP,GAAA,EAiBE,GAAA,CAAC,MAAD,CAAA,GAAA,EAAA,QAAA,CAAA;AAAY,IAAA,GAAG,EAAEC;AAAjB,GAAA,EAlBJ,IAkBI,CAAA,CAjBF,CADF;AAhBK,CAA2B,CAA3B;;AAuCP,IAAA,OAAA,EAAa;AACXX,EAAAA,QAAQ,CAARA,WAAAA,GAAAA,UAAAA;AACD;;AAED,eAAA,QAAA","sourcesContent":["/** @jsx jsx */\nimport AnimateHeight, {\n  AnimateHeightProps as AnimateProps,\n} from \"react-animate-height\"\nimport { chakra, jsx, PropsOf, forwardRef } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\n\ntype AnimateHeightProps = Pick<\n  AnimateProps,\n  | \"animationStateClasses\"\n  | \"applyInlineTransitions\"\n  | \"delay\"\n  | \"easing\"\n  | \"style\"\n  | \"children\"\n>\n\nexport interface CollapseOptions {\n  /**\n   * If `true`, the content will be visible\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the opacity of the content will be animated\n   */\n  animateOpacity?: boolean\n  /**\n   * The duration of the animation in `ms`\n   */\n  duration?: number\n  /**\n   * The height you want the content in it's collapsed state. Set to `0` by default\n   */\n  startingHeight?: number | string\n  /**\n   * The height you want the content in it's expanded state. Set to `auto` by default\n   */\n  endingHeight?: number | string\n  /**\n   * The function to be called when the collapse animation starts. It provides the `newHeight` as an argument\n   */\n  onAnimationEnd?(props: { newHeight: number }): void\n  /**\n   * The function to be called when the collapse animation ends. It provides the `newHeight` as an argument\n   */\n  onAnimationStart?(props: { newHeight: number }): void\n}\n\nexport type ICollapse = CollapseProps\n\nexport interface CollapseProps\n  extends AnimateHeightProps,\n    CollapseOptions,\n    Omit<\n      PropsOf<typeof chakra.div>,\n      \"onAnimationEnd\" | \"onAnimationStart\" | \"children\"\n    > {}\n\nexport const Collapse = forwardRef<CollapseProps, \"div\">(function Collapse(\n  props,\n  ref,\n) {\n  const {\n    isOpen,\n    animateOpacity = true,\n    onAnimationStart,\n    onAnimationEnd,\n    duration,\n    easing = \"ease\",\n    startingHeight = 0,\n    endingHeight = \"auto\",\n    ...rest\n  } = props\n\n  return (\n    <AnimateHeight\n      duration={duration}\n      easing={easing}\n      animateOpacity={animateOpacity}\n      height={isOpen ? endingHeight : startingHeight}\n      applyInlineTransitions={false}\n      onAnimationStart={onAnimationStart}\n      onAnimationEnd={onAnimationEnd}\n      css={{\n        transition:\n          \"height 0.2s ease,opacity 0.2s ease-in-out,transform 0.2s ease-in-out\",\n        \"&.rah-animating--to-height-zero\": {\n          opacity: 0,\n          transform: \"translateY(-0.625rem)\",\n        },\n      }}\n    >\n      <chakra.div ref={ref} {...rest} />\n    </AnimateHeight>\n  )\n})\n\nif (__DEV__) {\n  Collapse.displayName = \"Collapse\"\n}\n\nexport default Collapse\n"]},"metadata":{},"sourceType":"module"}