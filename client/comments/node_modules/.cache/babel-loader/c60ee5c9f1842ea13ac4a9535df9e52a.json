{"ast":null,"code":"import _slicedToArray from \"/opt/reddit-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useTheme } from \"@chakra-ui/system\";\nimport { memoizedGet as get, runIfFn, createContext } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { transitionConfigToCSS } from \"./transition-config\";\nexport function useTransitionConfig(themeKey, props, classNames) {\n  var theme = useTheme();\n  var path = \"components.\" + themeKey + \".transition\";\n  var defaultConfig = get(theme, path);\n  var configObjectOrFn = props.transitionConfig || defaultConfig;\n  var config = runIfFn(configObjectOrFn, props);\n  var partsTransitionRef = React.useRef({});\n  return React.useMemo(function () {\n    if (config) {\n      var partsTransition = {};\n\n      for (var _part in config) {\n        var _classNames$_part;\n\n        var _config$_part$timeout = config[_part].timeout,\n            timeout = _config$_part$timeout === void 0 ? 0 : _config$_part$timeout;\n        var className = (_classNames$_part = classNames == null ? void 0 : classNames[_part]) != null ? _classNames$_part : themeKey.toLowerCase();\n        var styles = transitionConfigToCSS(config[_part], className);\n        partsTransition[_part] = {\n          styles: styles,\n          timeout: timeout,\n          className: className\n        };\n      }\n\n      var prevTransitionString = JSON.stringify(partsTransitionRef.current);\n      var nextTransitionString = JSON.stringify(partsTransition);\n\n      if (nextTransitionString !== prevTransitionString) {\n        partsTransitionRef.current = partsTransition;\n      }\n    }\n\n    return partsTransitionRef.current;\n  }, [classNames, config, themeKey]);\n}\n\nvar _createContext = createContext({\n  errorMessage: \"useTransitions: `context` is undefined or null. Seems you forgot to wrap the components within <TransitionsProvider />\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    TransitionsProvider = _createContext2[0],\n    useTransitions = _createContext2[1];\n\nexport { TransitionsProvider, useTransitions };","map":{"version":3,"sources":["../../src/use-transition-config.ts"],"names":["memoizedGet","theme","useTheme","path","defaultConfig","get","configObjectOrFn","props","config","runIfFn","partsTransitionRef","React","partsTransition","timeout","className","classNames","themeKey","styles","transitionConfigToCSS","prevTransitionString","JSON","nextTransitionString","createContext","errorMessage"],"mappings":";AAAA,SAAA,QAAA,QAAA,mBAAA;AACA,SAEEA,WAAW,IAFb,GAAA,EAAA,OAAA,EAAA,aAAA,QAAA,kBAAA;AAMA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,qBAAA,QAAA,qBAAA;AAeA,OAAO,SAAA,mBAAA,CAAA,QAAA,EAAA,KAAA,EAAA,UAAA,EAIL;AACA,MAAMC,KAAK,GAAGC,QAAd,EAAA;AACA,MAAMC,IAAI,GAAA,gBAAA,QAAA,GAAV,aAAA;AAEA,MAAMC,aAAa,GAAGC,GAAG,CAAA,KAAA,EAAzB,IAAyB,CAAzB;AACA,MAAMC,gBAAgB,GAAIC,KAAK,CAALA,gBAAAA,IAA1B,aAAA;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAAA,gBAAA,EAAtB,KAAsB,CAAtB;AAEA,MAAMC,kBAAkB,GAAGC,KAAK,CAALA,MAAAA,CAA3B,EAA2BA,CAA3B;AAEA,SAAO,KAAK,CAAL,OAAA,CAAc,YAAM;AACzB,QAAA,MAAA,EAAY;AACV,UAAMC,eAA+B,GAArC,EAAA;;AAEA,WAAK,IAAL,KAAA,IAAA,MAAA,EAA2B;AAAA,YAAA,iBAAA;;AAAA,oCACDJ,MAAM,CAA9B,KAA8B,CADL,CACjBK,OADiB;AAAA,YACjBA,OADiB,sCACP,CADO;AAEzB,YAAMC,SAAS,GAAA,CAAA,iBAAA,GAAGC,UAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAAA,UAAU,CAAb,KAAa,CAAb,KAAA,IAAA,GAAA,iBAAA,GAAyBC,QAAQ,CAAhD,WAAwCA,EAAxC;AACA,YAAMC,MAAM,GAAGC,qBAAqB,CAACV,MAAM,CAAP,KAAO,CAAP,EAApC,SAAoC,CAApC;AACAI,QAAAA,eAAe,CAAfA,KAAe,CAAfA,GAAwB;AAAEK,UAAAA,MAAF,EAAEA,MAAF;AAAUJ,UAAAA,OAAV,EAAUA,OAAV;AAAmBC,UAAAA,SAAAA,EAAAA;AAAnB,SAAxBF;AACD;;AAED,UAAMO,oBAAoB,GAAGC,IAAI,CAAJA,SAAAA,CAAeV,kBAAkB,CAA9D,OAA6BU,CAA7B;AACA,UAAMC,oBAAoB,GAAGD,IAAI,CAAJA,SAAAA,CAA7B,eAA6BA,CAA7B;;AAEA,UAAIC,oBAAoB,KAAxB,oBAAA,EAAmD;AACjDX,QAAAA,kBAAkB,CAAlBA,OAAAA,GAAAA,eAAAA;AACD;AACF;;AAED,WAAOA,kBAAkB,CAAzB,OAAA;AAnBK,GAAA,EAoBJ,CAAA,UAAA,EAAA,MAAA,EApBH,QAoBG,CApBI,CAAP;AAqBD;;qBAQ6CY,aAAa,CAEzD;AACAC,EAAAA,YAAY,EACV;AAFF,CAFyD,C;;IAArD,mB;IAAA,c;;AAON,SAAA,mBAAA,EAAA,cAAA","sourcesContent":["import { SystemStyleObject, useTheme } from \"@chakra-ui/system\"\nimport {\n  Dict,\n  memoizedGet as get,\n  runIfFn,\n  createContext,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { TransitionConfig, transitionConfigToCSS } from \"./transition-config\"\n\ntype MaybeTransitionConfig =\n  | { [part: string]: TransitionConfig }\n  | ((props: Dict) => { [part: string]: TransitionConfig })\n  | undefined\n\ntype Timeout = TransitionConfig[\"timeout\"]\n\ntype PartTransition = Dict<{\n  styles: SystemStyleObject\n  timeout: NonNullable<Timeout>\n  className: string\n}>\n\nexport function useTransitionConfig(\n  themeKey: string,\n  props: Dict,\n  classNames?: Dict<string>,\n) {\n  const theme = useTheme()\n  const path = `components.${themeKey}.transition`\n\n  const defaultConfig = get(theme, path)\n  const configObjectOrFn = (props.transitionConfig ||\n    defaultConfig) as MaybeTransitionConfig\n  const config = runIfFn(configObjectOrFn, props)\n\n  const partsTransitionRef = React.useRef<PartTransition>({})\n\n  return React.useMemo(() => {\n    if (config) {\n      const partsTransition: PartTransition = {}\n\n      for (const part in config) {\n        const { timeout = 0 } = config[part]\n        const className = classNames?.[part] ?? themeKey.toLowerCase()\n        const styles = transitionConfigToCSS(config[part], className)\n        partsTransition[part] = { styles, timeout, className }\n      }\n\n      const prevTransitionString = JSON.stringify(partsTransitionRef.current)\n      const nextTransitionString = JSON.stringify(partsTransition)\n\n      if (nextTransitionString !== prevTransitionString) {\n        partsTransitionRef.current = partsTransition\n      }\n    }\n\n    return partsTransitionRef.current\n  }, [classNames, config, themeKey])\n}\n\nexport type UseTransitionConfigReturn = ReturnType<typeof useTransitionConfig>\n\nexport type TransitionConfigProps = {\n  transitionConfig?: Record<string, TransitionConfig>\n}\n\nconst [TransitionsProvider, useTransitions] = createContext<\n  UseTransitionConfigReturn\n>({\n  errorMessage:\n    \"useTransitions: `context` is undefined or null. Seems you forgot to wrap the components within <TransitionsProvider />\",\n})\n\nexport { TransitionsProvider, useTransitions }\n"]},"metadata":{},"sourceType":"module"}