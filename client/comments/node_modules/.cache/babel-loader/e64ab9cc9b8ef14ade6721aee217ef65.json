{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { callAllHandlers, mergeRefs } from \"@chakra-ui/utils\";\nimport { useCallback, useEffect, useRef } from \"react\";\nexport function useTooltip(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      _props$openDelay = _props.openDelay,\n      openDelay = _props$openDelay === void 0 ? 0 : _props$openDelay,\n      _props$closeDelay = _props.closeDelay,\n      closeDelay = _props$closeDelay === void 0 ? 0 : _props$closeDelay,\n      _props$closeOnClick = _props.closeOnClick,\n      closeOnClick = _props$closeOnClick === void 0 ? true : _props$closeOnClick,\n      closeOnMouseDown = _props.closeOnMouseDown,\n      onOpenProp = _props.onOpen,\n      onCloseProp = _props.onClose,\n      placement = _props.placement,\n      id = _props.id,\n      isOpenProp = _props.isOpen,\n      defaultIsOpen = _props.defaultIsOpen,\n      _props$arrowSize = _props.arrowSize,\n      arrowSize = _props$arrowSize === void 0 ? 10 : _props$arrowSize,\n      modifiers = _props.modifiers,\n      isDisabled = _props.isDisabled,\n      gutter = _props.gutter,\n      offset = _props.offset,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"openDelay\", \"closeDelay\", \"closeOnClick\", \"closeOnMouseDown\", \"onOpen\", \"onClose\", \"placement\", \"id\", \"isOpen\", \"defaultIsOpen\", \"arrowSize\", \"modifiers\", \"isDisabled\", \"gutter\", \"offset\"]);\n\n  var _useDisclosure = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen: defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp\n  }),\n      isOpen = _useDisclosure.isOpen,\n      onOpen = _useDisclosure.onOpen,\n      onClose = _useDisclosure.onClose;\n\n  var popper = usePopper({\n    forceUpdate: isOpen,\n    placement: placement,\n    arrowSize: arrowSize,\n    modifiers: modifiers,\n    gutter: gutter,\n    offset: offset\n  });\n  var tooltipId = useId(id, \"tooltip\");\n  var ref = useRef(null);\n  var triggerRef = mergeRefs(ref, popper.reference.ref);\n  var enterTimeout = useRef();\n  var exitTimeout = useRef();\n  var openWithDelay = useCallback(function () {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay);\n    }\n  }, [isDisabled, onOpen, openDelay]);\n  var closeWithDelay = useCallback(function () {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n    }\n\n    exitTimeout.current = window.setTimeout(onClose, closeDelay);\n  }, [closeDelay, onClose]);\n  var onClick = useCallback(function () {\n    if (closeOnClick) {\n      closeWithDelay();\n    }\n  }, [closeOnClick, closeWithDelay]);\n  var onMouseDown = useCallback(function () {\n    if (closeOnMouseDown) {\n      closeWithDelay();\n    }\n  }, [closeOnMouseDown, closeWithDelay]);\n\n  var onKeyDown = function onKeyDown(event) {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay();\n    }\n  };\n\n  useEventListener(\"keydown\", onKeyDown);\n  useEffect(function () {\n    return function () {\n      clearTimeout(enterTimeout.current);\n      clearTimeout(exitTimeout.current);\n    };\n  }, []);\n  var getTriggerProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, triggerRef),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, closeWithDelay),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n      onClick: callAllHandlers(props.onClick, onClick),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n      onFocus: callAllHandlers(props.onFocus, openWithDelay),\n      onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n      \"aria-describedby\": isOpen ? tooltipId : undefined\n    });\n  }, [closeWithDelay, isOpen, onClick, onMouseDown, openWithDelay, tooltipId, triggerRef]);\n  var getTooltipProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, htmlProps, props, {\n      id: tooltipId,\n      role: \"tooltip\",\n      ref: mergeRefs(ref, popper.popper.ref),\n      style: _extends({}, props.style, popper.popper.style)\n    });\n  }, [htmlProps, popper.popper.ref, popper.popper.style, tooltipId]);\n  var getArrowProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, popper.arrow.ref),\n      style: _extends({}, props.style, popper.arrow.style)\n    });\n  }, [popper.arrow.ref, popper.arrow.style]);\n  return {\n    isOpen: isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    placement: popper.placement,\n    getTriggerProps: getTriggerProps,\n    getTooltipProps: getTooltipProps,\n    getArrowProps: getArrowProps\n  };\n}","map":{"version":3,"sources":["../../src/use-tooltip.ts"],"names":["props","openDelay","closeDelay","closeOnClick","onOpen","onClose","isOpen","arrowSize","offset","useDisclosure","defaultIsOpen","onCloseProp","popper","usePopper","forceUpdate","placement","modifiers","gutter","tooltipId","useId","ref","useRef","triggerRef","mergeRefs","enterTimeout","exitTimeout","openWithDelay","useCallback","window","closeWithDelay","clearTimeout","onClick","onMouseDown","onKeyDown","event","useEventListener","useEffect","getTriggerProps","onMouseLeave","callAllHandlers","onMouseEnter","onFocus","onBlur","undefined","getTooltipProps","id","role","style","getArrowProps","show","hide"],"mappings":"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","sourcesContent":["import { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\"\nimport { Placement, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { callAllHandlers, mergeRefs, PropGetter } from \"@chakra-ui/utils\"\nimport { useCallback, useEffect, useRef } from \"react\"\n\nexport interface UseTooltipProps\n  extends Pick<\n    UsePopperProps,\n    \"arrowSize\" | \"modifiers\" | \"gutter\" | \"offset\"\n  > {\n  /**\n   * Delay (in ms) before showing the tooltip\n   * @default 0ms\n   */\n  openDelay?: number\n  /**\n   * Delay (in ms) before hiding the tooltip\n   * @default 0ms\n   */\n  closeDelay?: number\n  /**\n   * If `true`, the tooltip will hide on click\n   */\n  closeOnClick?: boolean\n  /**\n   * If `true`, the tooltip will hide while the mouse\n   * is down\n   */\n  closeOnMouseDown?: boolean\n  /**\n   * Callback to run when the tooltip shows\n   */\n  onOpen?(): void\n  /**\n   * Callback to run when the tooltip hides\n   */\n  onClose?(): void\n  /**\n   * The Popper.js placement of the tooltip\n   */\n  placement?: Placement\n  /**\n   * Custom `id` to use in place of `uuid`\n   */\n  id?: string\n  /**\n   * If `true`, the tooltip will be shown (in controlled mode)\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the tooltip will be initially shown\n   */\n  defaultIsOpen?: boolean\n  isDisabled?: boolean\n}\n\nexport function useTooltip(props: UseTooltipProps = {}) {\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    ...htmlProps\n  } = props\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n\n  const popper = usePopper({\n    forceUpdate: isOpen,\n    placement,\n    arrowSize,\n    modifiers,\n    gutter,\n    offset,\n  })\n\n  const tooltipId = useId(id, \"tooltip\")\n\n  const ref = useRef<any>(null)\n  const triggerRef = mergeRefs(ref, popper.reference.ref)\n\n  const enterTimeout = useRef<number>()\n  const exitTimeout = useRef<number>()\n\n  const openWithDelay = useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay)\n    }\n  }, [isDisabled, onOpen, openDelay])\n\n  const closeWithDelay = useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current)\n    }\n    exitTimeout.current = window.setTimeout(onClose, closeDelay)\n  }, [closeDelay, onClose])\n\n  const onClick = useCallback(() => {\n    if (closeOnClick) {\n      closeWithDelay()\n    }\n  }, [closeOnClick, closeWithDelay])\n\n  const onMouseDown = useCallback(() => {\n    if (closeOnMouseDown) {\n      closeWithDelay()\n    }\n  }, [closeOnMouseDown, closeWithDelay])\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay()\n    }\n  }\n\n  useEventListener(\"keydown\", onKeyDown)\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(enterTimeout.current)\n      clearTimeout(exitTimeout.current)\n    }\n  }, [])\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, triggerRef),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, closeWithDelay),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n      onClick: callAllHandlers(props.onClick, onClick),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n      onFocus: callAllHandlers(props.onFocus, openWithDelay),\n      onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n      \"aria-describedby\": isOpen ? tooltipId : undefined,\n    }),\n    [\n      closeWithDelay,\n      isOpen,\n      onClick,\n      onMouseDown,\n      openWithDelay,\n      tooltipId,\n      triggerRef,\n    ],\n  )\n\n  const getTooltipProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...htmlProps,\n      ...props,\n      id: tooltipId,\n      role: \"tooltip\",\n      ref: mergeRefs(ref, popper.popper.ref),\n      style: {\n        ...props.style,\n        ...popper.popper.style,\n      },\n    }),\n    [htmlProps, popper.popper.ref, popper.popper.style, tooltipId],\n  )\n\n  const getArrowProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, popper.arrow.ref),\n      style: { ...props.style, ...popper.arrow.style },\n    }),\n    [popper.arrow.ref, popper.arrow.style],\n  )\n\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    placement: popper.placement,\n    getTriggerProps,\n    getTooltipProps,\n    getArrowProps,\n  }\n}\n\nexport type UseTooltipReturn = ReturnType<typeof useTooltip>\n"]},"metadata":{},"sourceType":"module"}