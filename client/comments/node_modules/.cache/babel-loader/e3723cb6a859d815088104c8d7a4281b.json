{"ast":null,"code":"import _objectSpread from\"/root/Desktop/SWE-2022/client/comments/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/root/Desktop/SWE-2022/client/comments/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Container,Flex,Spinner,VStack}from\"@chakra-ui/core\";import React,{useEffect,useState}from\"react\";import Navbar from\"./components/navbar\";import Post from\"./components/post\";import db from\"./lib/firebase\";var App=function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),posts=_useState2[0],setPosts=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),isLoading=_useState4[0],setLoading=_useState4[1];useEffect(function(){// Hook to handle the initial fetching of posts\ndb.collection(\"posts\").orderBy(\"createdAt\",\"desc\").get().then(function(querySnapshot){var data=querySnapshot.docs.map(function(doc){return _objectSpread({id:doc.id},doc.data());});setPosts(data);setLoading(false);});},[]);useEffect(function(){// Hook to handle the real-time updating of posts whenever there is a\n// change in the datastore (https://firebase.google.com/docs/firestore/query-data/listen#view_changes_between_snapshots)\ndb.collection(\"posts\").orderBy(\"createdAt\",\"desc\").onSnapshot(function(querySnapshot){var _posts=[];querySnapshot.forEach(function(doc){_posts.push(_objectSpread({id:doc.id},doc.data()));});setPosts(_posts);});},[]);if(isLoading){return/*#__PURE__*/React.createElement(Flex,{minH:\"100vh\",justifyContent:\"center\",alignItems:\"center\"},/*#__PURE__*/React.createElement(Spinner,null));}return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Navbar,null),/*#__PURE__*/React.createElement(Container,{maxW:\"md\",centerContent:true,p:8},/*#__PURE__*/React.createElement(VStack,{spacing:8,w:\"100%\"},posts.map(function(post){return/*#__PURE__*/React.createElement(Post,{post:post,key:post.id});}))));};export default App;","map":{"version":3,"sources":["/root/Desktop/SWE-2022/client/comments/src/app.js"],"names":["Container","Flex","Spinner","VStack","React","useEffect","useState","Navbar","Post","db","App","posts","setPosts","isLoading","setLoading","collection","orderBy","get","then","querySnapshot","data","docs","map","doc","id","onSnapshot","_posts","forEach","push","post"],"mappings":"yTAAA,OAASA,SAAT,CAAoBC,IAApB,CAA0BC,OAA1B,CAAmCC,MAAnC,KAAiD,iBAAjD,CACA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,mBAAjB,CACA,MAAOC,CAAAA,EAAP,KAAe,gBAAf,CAEA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,EAAM,eACUJ,QAAQ,CAAC,EAAD,CADlB,wCACTK,KADS,eACFC,QADE,8BAEgBN,QAAQ,CAAC,IAAD,CAFxB,yCAETO,SAFS,eAEEC,UAFF,eAIhBT,SAAS,CAAC,UAAM,CACd;AAEAI,EAAE,CAACM,UAAH,CAAc,OAAd,EACGC,OADH,CACW,WADX,CACwB,MADxB,EAEGC,GAFH,GAGGC,IAHH,CAGQ,SAACC,aAAD,CAAmB,CACvB,GAAMC,CAAAA,IAAI,CAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuB,SAACC,GAAD,wBAClCC,EAAE,CAAED,GAAG,CAACC,EAD0B,EAE/BD,GAAG,CAACH,IAAJ,EAF+B,GAAvB,CAAb,CAKAR,QAAQ,CAACQ,IAAD,CAAR,CACAN,UAAU,CAAC,KAAD,CAAV,CACD,CAXH,EAYD,CAfQ,CAeN,EAfM,CAAT,CAiBAT,SAAS,CAAC,UAAM,CACd;AACA;AAEAI,EAAE,CAACM,UAAH,CAAc,OAAd,EACGC,OADH,CACW,WADX,CACwB,MADxB,EAEGS,UAFH,CAEc,SAACN,aAAD,CAAmB,CAC7B,GAAMO,CAAAA,MAAM,CAAG,EAAf,CAEAP,aAAa,CAACQ,OAAd,CAAsB,SAACJ,GAAD,CAAS,CAC7BG,MAAM,CAACE,IAAP,gBACEJ,EAAE,CAAED,GAAG,CAACC,EADV,EAEKD,GAAG,CAACH,IAAJ,EAFL,GAID,CALD,EAOAR,QAAQ,CAACc,MAAD,CAAR,CACD,CAbH,EAcD,CAlBQ,CAkBN,EAlBM,CAAT,CAoBA,GAAIb,SAAJ,CAAe,CACb,mBACE,oBAAC,IAAD,EAAM,IAAI,CAAC,OAAX,CAAmB,cAAc,CAAC,QAAlC,CAA2C,UAAU,CAAC,QAAtD,eACE,oBAAC,OAAD,MADF,CADF,CAKD,CAED,mBACE,qDACE,oBAAC,MAAD,MADF,cAEE,oBAAC,SAAD,EAAW,IAAI,CAAC,IAAhB,CAAqB,aAAa,KAAlC,CAAmC,CAAC,CAAE,CAAtC,eACE,oBAAC,MAAD,EAAQ,OAAO,CAAE,CAAjB,CAAoB,CAAC,CAAC,MAAtB,EACGF,KAAK,CAACW,GAAN,CAAU,SAACO,IAAD,qBACT,oBAAC,IAAD,EAAM,IAAI,CAAEA,IAAZ,CAAkB,GAAG,CAAEA,IAAI,CAACL,EAA5B,EADS,EAAV,CADH,CADF,CAFF,CADF,CAYD,CA7DD,CA+DA,cAAed,CAAAA,GAAf","sourcesContent":["import { Container, Flex, Spinner, VStack } from \"@chakra-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport Navbar from \"./components/navbar\";\nimport Post from \"./components/post\";\nimport db from \"./lib/firebase\";\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Hook to handle the initial fetching of posts\n\n    db.collection(\"posts\")\n      .orderBy(\"createdAt\", \"desc\")\n      .get()\n      .then((querySnapshot) => {\n        const data = querySnapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n\n        setPosts(data);\n        setLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    // Hook to handle the real-time updating of posts whenever there is a\n    // change in the datastore (https://firebase.google.com/docs/firestore/query-data/listen#view_changes_between_snapshots)\n\n    db.collection(\"posts\")\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((querySnapshot) => {\n        const _posts = [];\n\n        querySnapshot.forEach((doc) => {\n          _posts.push({\n            id: doc.id,\n            ...doc.data(),\n          });\n        });\n\n        setPosts(_posts);\n      });\n  }, []);\n\n  if (isLoading) {\n    return (\n      <Flex minH=\"100vh\" justifyContent=\"center\" alignItems=\"center\">\n        <Spinner />\n      </Flex>\n    );\n  }\n\n  return (\n    <>\n      <Navbar />\n      <Container maxW=\"md\" centerContent p={8}>\n        <VStack spacing={8} w=\"100%\">\n          {posts.map((post) => (\n            <Post post={post} key={post.id} />\n          ))}\n        </VStack>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}