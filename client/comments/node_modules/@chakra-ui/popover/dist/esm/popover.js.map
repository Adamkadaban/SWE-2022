{"version":3,"sources":["../../src/popover.tsx"],"names":["CloseButton","chakra","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","forwardRef","createContext","cx","runIfFn","__DEV__","React","usePopover","PopoverProvider","usePopoverContext","name","errorMessage","Popover","props","styles","children","rest","context","isOpen","onClose","displayName","PopoverTrigger","child","Children","only","getTriggerProps","cloneElement","ref","PopoverContent","getPopoverProps","popoverProps","contentStyles","position","display","flexDirection","content","PopoverHeader","headerId","setHasHeader","useEffect","on","off","className","header","PopoverBody","bodyId","setHasBody","body","PopoverFooter","footer","PopoverCloseButton","PopoverArrow","getArrowProps","arrowProps","arrowStyles","bg","arrow"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  omitThemingProps,\n  PropsOf,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport {\n  createContext,\n  cx,\n  ReactNodeOrRenderProp,\n  runIfFn,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { usePopover, UsePopoverProps, UsePopoverReturn } from \"./use-popover\"\n\nconst [PopoverProvider, usePopoverContext] = createContext<UsePopoverReturn>({\n  name: \"PopoverContext\",\n  errorMessage:\n    \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\",\n})\n\nexport { usePopoverContext }\n\nexport interface PopoverProps extends UsePopoverProps, ThemingProps {\n  /**\n   * The content of the popover. It's usually the `PopoverTrigger`,\n   * and `PopoverContent`\n   */\n  children?: ReactNodeOrRenderProp<{\n    isOpen: boolean\n    onClose(): void\n  }>\n}\n\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\nexport const Popover: React.FC<PopoverProps> = (props) => {\n  const styles = useMultiStyleConfig(\"Popover\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const context = usePopover(rest)\n\n  return (\n    <PopoverProvider value={context}>\n      <StylesProvider value={styles}>\n        {runIfFn(children, {\n          isOpen: context.isOpen,\n          onClose: context.onClose,\n        })}\n      </StylesProvider>\n    </PopoverProvider>\n  )\n}\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\"\n}\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\nexport const PopoverTrigger: React.FC = (props) => {\n  // enforce a single child\n  const child: any = React.Children.only(props.children)\n  const { getTriggerProps } = usePopoverContext()\n  return React.cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\"\n}\n\nexport interface PopoverContentProps extends PropsOf<typeof chakra.section> {}\n\n/**\n * PopoverContent includes all accessibility\n * requirements for a popover\n */\nexport const PopoverContent = forwardRef<PopoverContentProps, \"section\">(\n  function PopoverContent(props, ref) {\n    const { getPopoverProps } = usePopoverContext()\n    const popoverProps = getPopoverProps(props, ref)\n\n    const styles = useStyles()\n    const contentStyles = {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      ...styles.content,\n    }\n\n    return (\n      <chakra.section\n        className={cx(\"chakra-popover__content\")}\n        {...popoverProps}\n        __css={contentStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\"\n}\n\nexport interface PopoverHeaderProps extends PropsOf<typeof chakra.header> {}\n\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it's first announced by screenreaders.\n */\nexport const PopoverHeader = forwardRef<PopoverHeaderProps, \"header\">(\n  function PopoverHeader(props, ref) {\n    const { headerId, setHasHeader } = usePopoverContext()\n\n    React.useEffect(() => {\n      setHasHeader.on()\n      return () => setHasHeader.off()\n    }, [setHasHeader])\n\n    const styles = useStyles()\n\n    return (\n      <chakra.header\n        {...props}\n        className={cx(\"chakra-popover__header\", props.className)}\n        id={headerId}\n        ref={ref}\n        __css={styles.header}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\"\n}\n\nexport interface PopoverBodyProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\nexport const PopoverBody = forwardRef<PopoverBodyProps, \"div\">(\n  function PopoverBody(props, ref) {\n    const { bodyId, setHasBody } = usePopoverContext()\n\n    React.useEffect(() => {\n      setHasBody.on()\n      return () => setHasBody.off()\n    }, [setHasBody])\n\n    const styles = useStyles()\n\n    return (\n      <chakra.div\n        {...props}\n        className={cx(\"chakra-popover__body\", props.className)}\n        id={bodyId}\n        ref={ref}\n        __css={styles.body}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\"\n}\nexport interface PopoverFooterProps extends PropsOf<typeof chakra.footer> {}\n\nexport const PopoverFooter: React.FC<PopoverFooterProps> = (props) => {\n  const styles = useStyles()\n  return (\n    <chakra.footer\n      {...props}\n      className={cx(\"chakra-popover__footer\", props.className)}\n      __css={styles.footer}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\"\n}\n\nexport type PopoverCloseButtonProps = CloseButtonProps\n\nexport const PopoverCloseButton: React.FC<CloseButtonProps> = (props) => {\n  const { onClose } = usePopoverContext()\n  return (\n    <CloseButton\n      size=\"sm\"\n      onClick={onClose}\n      position=\"absolute\"\n      borderRadius=\"md\"\n      top=\"0.25rem\"\n      right=\"0.5rem\"\n      padding=\"0.5rem\"\n      {...props}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\"\n}\n\nexport interface PopoverArrowProps extends PropsOf<typeof chakra.div> {}\n\nexport const PopoverArrow: React.FC<PopoverArrowProps> = (props) => {\n  const { getArrowProps } = usePopoverContext()\n  const arrowProps = getArrowProps(props)\n\n  const styles = useStyles()\n  const arrowStyles = {\n    bg: \"inherit\",\n    ...styles.arrow,\n  }\n\n  return (\n    <chakra.div\n      {...arrowProps}\n      className={cx(\"chakra-popover__arrow\", props.className)}\n      __css={arrowStyles}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\"\n}\n"],"file":"popover.js"}