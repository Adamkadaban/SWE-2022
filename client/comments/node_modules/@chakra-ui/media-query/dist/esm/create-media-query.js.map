{"version":3,"sources":["../../src/create-media-query.ts"],"names":["isNumber","isCustomBreakpoint","calculateMeasurement","createMediaQueries","breakpoints","keys","Object","filter","reverse","map","breakpoint","index","minWidth","next","maxWidth","undefined","query","createMediaQueryString","hasMinWidth","parseInt","toMediaString","subtract","value"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,kBAAnB,QAA6C,kBAA7C;AACA,OAAOC,oBAAP,MAAiC,uBAAjC;;AAEA,SAASC,kBAAT,CAA4BC,WAA5B,EAAiE;AAC/D;;;;;AAKA,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,WAAZ,EAAyBG,MAAzB,CAAgCN,kBAAhC,EAAoDO,OAApD,EAAb;AAEA;;;;AAGA,SAAOH,IAAI,CAACI,GAAL,CAAS,CAACC,UAAD,EAAaC,KAAb,KAAuB;AACrC,QAAMC,QAAQ,GAAGR,WAAW,CAACM,UAAD,CAA5B;AAEA,QAAMG,IAAI,GAAGR,IAAI,CAACM,KAAK,GAAG,CAAT,CAAjB;AACA,QAAMG,QAAQ,GAAGD,IAAI,GAAGT,WAAW,CAACS,IAAD,CAAd,GAAuBE,SAA5C;AAEA,QAAMC,KAAK,GAAGC,sBAAsB,CAACL,QAAD,EAAWE,QAAX,CAApC;AAEA,WAAO;AACLJ,MAAAA,UADK;AAELI,MAAAA,QAFK;AAGLF,MAAAA,QAHK;AAILI,MAAAA;AAJK,KAAP;AAMD,GAdM,CAAP;AAeD;AAED;;;;;;AAIA,SAASC,sBAAT,CAAgCL,QAAhC,EAAkDE,QAAlD,EAAqE;AACnE,MAAMI,WAAW,GAAGC,QAAQ,CAACP,QAAD,CAAR,IAAsB,CAA1C;;AAEA,MAAI,CAACM,WAAD,IAAgB,CAACJ,QAArB,EAA+B;AAC7B,WAAO,EAAP;AACD;;AAED,MAAIE,KAAK,oBAAkBI,aAAa,CAACR,QAAD,CAA/B,MAAT;;AAEA,MAAI,CAACE,QAAL,EAAe;AACb,WAAOE,KAAP;AACD;;AAED,MAAIA,KAAJ,EAAW;AACTA,IAAAA,KAAK,IAAI,OAAT;AACD;;AAEDA,EAAAA,KAAK,qBAAmBI,aAAa,CAACC,QAAQ,CAACP,QAAD,CAAT,CAAhC,MAAL;AAEA,SAAOE,KAAP;AACD;;AASD,SAASK,QAAT,CAAkBC,KAAlB,EAA8B;AAC5B,SAAOpB,oBAAoB,CAACoB,KAAD,EAAQ,CAAC,IAAT,CAA3B;AACD;AAED;;;;;AAGA,SAASF,aAAT,CAAuBE,KAAvB,EAAmC;AACjC,SAAOtB,QAAQ,CAACsB,KAAD,CAAR,GAAqBA,KAArB,UAAiCA,KAAxC;AACD;;AAED,eAAenB,kBAAf","sourcesContent":["import { isNumber, isCustomBreakpoint } from \"@chakra-ui/utils\"\nimport calculateMeasurement from \"calculate-measurement\"\n\nfunction createMediaQueries(breakpoints: string[]): MediaQuery[] {\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   *\n   * reverse to begin with the largest\n   */\n  const keys = Object.keys(breakpoints).filter(isCustomBreakpoint).reverse()\n\n  /**\n   * create a min-max media query string\n   */\n  return keys.map((breakpoint, index) => {\n    const minWidth = breakpoints[breakpoint]\n\n    const next = keys[index - 1]\n    const maxWidth = next ? breakpoints[next] : undefined\n\n    const query = createMediaQueryString(minWidth, maxWidth)\n\n    return {\n      breakpoint,\n      maxWidth,\n      minWidth,\n      query,\n    }\n  })\n}\n\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\nfunction createMediaQueryString(minWidth: string, maxWidth?: string) {\n  const hasMinWidth = parseInt(minWidth) >= 0\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\"\n  }\n\n  let query = `(min-width: ${toMediaString(minWidth)})`\n\n  if (!maxWidth) {\n    return query\n  }\n\n  if (query) {\n    query += \" and \"\n  }\n\n  query += `(max-width: ${toMediaString(subtract(maxWidth))})`\n\n  return query\n}\n\ninterface MediaQuery {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n  query: string\n}\n\nfunction subtract(value: any) {\n  return calculateMeasurement(value, -0.01)\n}\n\n/**\n * Convert media query value to string\n */\nfunction toMediaString(value: any) {\n  return isNumber(value) ? `${value}px` : value\n}\n\nexport default createMediaQueries\n"],"file":"create-media-query.js"}