"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _utils = require("@chakra-ui/utils");

var _calculateMeasurement = _interopRequireDefault(require("calculate-measurement"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function createMediaQueries(breakpoints) {
  /**
   * Get the non-number breakpoint keys from the provided breakpoints
   *
   * reverse to begin with the largest
   */
  var keys = Object.keys(breakpoints).filter(_utils.isCustomBreakpoint).reverse();
  /**
   * create a min-max media query string
   */

  return keys.map(function (breakpoint, index) {
    var minWidth = breakpoints[breakpoint];
    var next = keys[index - 1];
    var maxWidth = next ? breakpoints[next] : undefined;
    var query = createMediaQueryString(minWidth, maxWidth);
    return {
      breakpoint: breakpoint,
      maxWidth: maxWidth,
      minWidth: minWidth,
      query: query
    };
  });
}
/**
 * Create a media query string from the breakpoints,
 * using a combination of `min-width` and `max-width`.
 */


function createMediaQueryString(minWidth, maxWidth) {
  var hasMinWidth = parseInt(minWidth) >= 0;

  if (!hasMinWidth && !maxWidth) {
    return "";
  }

  var query = "(min-width: " + toMediaString(minWidth) + ")";

  if (!maxWidth) {
    return query;
  }

  if (query) {
    query += " and ";
  }

  query += "(max-width: " + toMediaString(subtract(maxWidth)) + ")";
  return query;
}

function subtract(value) {
  return (0, _calculateMeasurement["default"])(value, -0.01);
}
/**
 * Convert media query value to string
 */


function toMediaString(value) {
  return (0, _utils.isNumber)(value) ? value + "px" : value;
}

var _default = createMediaQueries;
exports["default"] = _default;
//# sourceMappingURL=create-media-query.js.map