{"version":3,"sources":["../../src/use-breakpoint-value.ts"],"names":["useBreakpointValue","values","breakpoint","breakpoints","obj","Object","entries","map","_","value"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;AAOO,SAASA,kBAAT,CACLC,MADK,EAEU;AACf,MAAMC,UAAU,GAAG,mCAAnB;;AADe,kBAES,uBAFT;AAAA,MAEPC,WAFO,aAEPA,WAFO;;AAIf,MAAI,CAACD,UAAL,EAAiB;AACf;AACD;;AAED,MAAME,GAAG,GAAG,oBAAQH,MAAR,IACR,wBACEI,MAAM,CAACC,OAAP,CACE,kCAAsBL,MAAtB,EAA8BE,WAA9B,CADF,EAEEI,GAFF,CAEM;AAAA,QAAEC,CAAF;AAAA,QAAKC,KAAL;AAAA,WAAgB,CAACA,KAAD,EAAQA,KAAR,CAAhB;AAAA,GAFN,CADF,CADQ,GAMRR,MANJ;AAQA,SAAO,iCAAgBG,GAAhB,EAAqBF,UAArB,CAAP;AACD","sourcesContent":["import { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint } from \"./use-breakpoint\"\nimport { isArray, arrayToObjectNotation, fromEntries } from \"@chakra-ui/utils\"\nimport { useTheme } from \"@chakra-ui/system\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\nexport function useBreakpointValue<T = any>(\n  values: Record<string, T> | T[],\n): T | undefined {\n  const breakpoint = useBreakpoint()\n  const { breakpoints } = useTheme()\n\n  if (!breakpoint) {\n    return\n  }\n\n  const obj = isArray(values)\n    ? fromEntries<Record<string, T>>(\n        Object.entries(\n          arrayToObjectNotation(values, breakpoints),\n        ).map(([_, value]) => [value, value]),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint)\n}\n"],"file":"use-breakpoint-value.js"}