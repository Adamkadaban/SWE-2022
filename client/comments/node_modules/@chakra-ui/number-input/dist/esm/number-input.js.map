{"version":3,"sources":["../../src/number-input.tsx"],"names":["TriangleDownIcon","TriangleUpIcon","chakra","forwardRef","StylesProvider","useStyles","omitThemingProps","useMultiStyleConfig","createContext","__DEV__","React","useNumberInput","NumberInputProvider","useNumberInputContext","name","errorMessage","NumberInput","props","ref","styles","ownProps","htmlProps","context","ctx","useMemo","position","zIndex","displayName","NumberInputStepper","display","flexDirection","top","right","margin","height","stepperGroup","NumberInputField","getInputProps","input","width","field","StyledStepper","baseStyle","justifyContent","alignItems","flex","transition","userSelect","cursor","lineHeight","NumberDecrementStepper","getDecrementButtonProps","decrement","stepper","children","NumberIncrementStepper","getIncrementButtonProps","increment"],"mappings":";;;;AAAA,SAASA,gBAAT,EAA2BC,cAA3B,QAAiD,SAAjD;AACA,SACEC,MADF,EAGEC,UAHF,EAIEC,cAJF,EAKEC,SALF,EAMEC,gBANF,EAOEC,mBAPF,QASO,mBATP;AAUA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,kBAAvC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,cADF,QAIO,oBAJP;;AAQA;;;AAGA,IAAM,CAACC,mBAAD,EAAsBC,qBAAtB,IAA+CL,aAAa,CAEhE;AACAM,EAAAA,IAAI,EAAE,oBADN;AAEAC,EAAAA,YAAY,EACV;AAHF,CAFgE,CAAlE;;AAoCA;;;;;;;;;;AAUA,OAAO,IAAMC,WAAW,gBAAGb,UAAU,CACnC,SAASa,WAAT,CAAqBC,KAArB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAMC,MAAM,GAAGZ,mBAAmB,CAAC,aAAD,EAAgBU,KAAhB,CAAlC;AACA,MAAMG,QAAQ,GAAGd,gBAAgB,CAACW,KAAD,CAAjC;;AAEA,wBAAkCN,cAAc,CAACS,QAAD,CAAhD;AAAA,MAAM;AAAEC,IAAAA;AAAF,GAAN;AAAA,MAAsBC,OAAtB;;AACA,MAAMC,GAAG,GAAGb,KAAK,CAACc,OAAN,CAAc,MAAMF,OAApB,EAA6B,CAACA,OAAD,CAA7B,CAAZ;AAEA,sBACE,oBAAC,mBAAD;AAAqB,IAAA,KAAK,EAAEC;AAA5B,kBACE,oBAAC,cAAD;AAAgB,IAAA,KAAK,EAAEJ;AAAvB,kBACE,oBAAC,MAAD,CAAQ,GAAR;AACE,IAAA,GAAG,EAAED;AADP,KAEMG,SAFN;AAGE,IAAA,KAAK,EAAE;AACLI,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,MAAM,EAAE;AAFH;AAHT,KADF,CADF,CADF;AAcD,CAtBkC,CAA9B;;AAyBP,IAAIjB,OAAJ,EAAa;AACXO,EAAAA,WAAW,CAACW,WAAZ,GAA0B,aAA1B;AACD;;AAID;;;;;;;;;;AAUA,OAAO,IAAMC,kBAAkB,gBAAGzB,UAAU,CAC1C,SAASyB,kBAAT,CAA4BX,KAA5B,EAAmCC,GAAnC,EAAwC;AACtC,MAAMC,MAAM,GAAGd,SAAS,EAAxB;AACA,sBACE,oBAAC,MAAD,CAAQ,GAAR;AACE,uBADF;AAEE,IAAA,GAAG,EAAEa;AAFP,KAGMD,KAHN;AAIE,IAAA,KAAK;AACHY,MAAAA,OAAO,EAAE,MADN;AAEHC,MAAAA,aAAa,EAAE,QAFZ;AAGHL,MAAAA,QAAQ,EAAE,UAHP;AAIHM,MAAAA,GAAG,EAAE,GAJF;AAKHC,MAAAA,KAAK,EAAE,KALJ;AAMHC,MAAAA,MAAM,EAAE,KANL;AAOHC,MAAAA,MAAM,EAAE,kBAPL;AAQHR,MAAAA,MAAM,EAAE;AARL,OASAP,MAAM,CAACgB,YATP;AAJP,KADF;AAkBD,CArByC,CAArC;;AAwBP,IAAI1B,OAAJ,EAAa;AACXmB,EAAAA,kBAAkB,CAACD,WAAnB,GAAiC,oBAAjC;AACD;;AAID;;;;;;;;;;;AAWA,OAAO,IAAMS,gBAAgB,gBAAGjC,UAAU,CACxC,SAASiC,gBAAT,CAA0BnB,KAA1B,EAAiCC,GAAjC,EAAsC;AACpC,MAAM;AAAEmB,IAAAA;AAAF,MAAoBxB,qBAAqB,EAA/C;AAEA,MAAMyB,KAAK,GAAGD,aAAa,CAACpB,KAAD,EAAQC,GAAR,CAA3B;AACA,MAAMC,MAAM,GAAGd,SAAS,EAAxB;AAEA,sBACE,oBAAC,MAAD,CAAQ,KAAR,eACMiC,KADN;AAEE,IAAA,KAAK;AACHC,MAAAA,KAAK,EAAE;AADJ,OAEApB,MAAM,CAACqB,KAFP;AAFP,KADF;AASD,CAhBuC,CAAnC;;AAmBP,IAAI/B,OAAJ,EAAa;AACX2B,EAAAA,gBAAgB,CAACT,WAAjB,GAA+B,kBAA/B;AACD;;AAED,OAAO,IAAMc,aAAa,GAAGvC,MAAM,CAAC,KAAD,EAAQ;AACzCwC,EAAAA,SAAS,EAAE;AACTb,IAAAA,OAAO,EAAE,MADA;AAETc,IAAAA,cAAc,EAAE,QAFP;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,IAAI,EAAE,CAJG;AAKTC,IAAAA,UAAU,EAAE,UALH;AAMTC,IAAAA,UAAU,EAAE,MANH;AAOTC,IAAAA,MAAM,EAAE,SAPC;AAQTC,IAAAA,UAAU,EAAE;AARH;AAD8B,CAAR,CAA5B;;AAgBP;;;;;;;AAOA,OAAO,IAAMC,sBAAsB,gBAAG/C,UAAU,CAG9C,SAAS+C,sBAAT,CAAgCjC,KAAhC,EAAuCC,GAAvC,EAA4C;AAAA;;AAC5C,MAAMC,MAAM,GAAGd,SAAS,EAAxB;AACA,MAAM;AAAE8C,IAAAA;AAAF,MAA8BtC,qBAAqB,EAAzD;AACA,MAAMuC,SAAS,GAAGD,uBAAuB,CAAClC,KAAD,EAAQC,GAAR,CAAzC;AAEA,sBACE,oBAAC,aAAD,eAAmBkC,SAAnB;AAA8B,IAAA,KAAK,EAAEjC,MAAM,CAACkC;AAA5C,yBACGpC,KAAK,CAACqC,QADT,2CACqB,oBAAC,gBAAD,OADrB,CADF;AAKD,CAb+C,CAAzC;;AAeP,IAAI7C,OAAJ,EAAa;AACXyC,EAAAA,sBAAsB,CAACvB,WAAvB,GAAqC,wBAArC;AACD;;AAKD;;;;;;;AAOA,OAAO,IAAM4B,sBAAsB,gBAAGpD,UAAU,CAG9C,SAASoD,sBAAT,CAAgCtC,KAAhC,EAAuCC,GAAvC,EAA4C;AAAA;;AAC5C,MAAM;AAAEsC,IAAAA;AAAF,MAA8B3C,qBAAqB,EAAzD;AACA,MAAM4C,SAAS,GAAGD,uBAAuB,CAACvC,KAAD,EAAQC,GAAR,CAAzC;AACA,MAAMC,MAAM,GAAGd,SAAS,EAAxB;AAEA,sBACE,oBAAC,aAAD,eAAmBoD,SAAnB;AAA8B,IAAA,KAAK,EAAEtC,MAAM,CAACkC;AAA5C,0BACGpC,KAAK,CAACqC,QADT,4CACqB,oBAAC,cAAD,OADrB,CADF;AAKD,CAb+C,CAAzC;;AAeP,IAAI7C,OAAJ,EAAa;AACX8C,EAAAA,sBAAsB,CAAC5B,WAAvB,GAAqC,wBAArC;AACD","sourcesContent":["import { TriangleDownIcon, TriangleUpIcon } from \"./icons\"\nimport {\n  chakra,\n  PropsOf,\n  forwardRef,\n  StylesProvider,\n  useStyles,\n  omitThemingProps,\n  useMultiStyleConfig,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  useNumberInput,\n  UseNumberInputProps,\n  UseNumberInputReturn,\n} from \"./use-number-input\"\n\ninterface NumberInputContext extends Omit<UseNumberInputReturn, \"htmlProps\"> {}\n\n/**\n * React context used to communicate between components\n */\nconst [NumberInputProvider, useNumberInputContext] = createContext<\n  NumberInputContext\n>({\n  name: \"NumberInputContext\",\n  errorMessage:\n    \"useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />\",\n})\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the input element will span the full width of it's parent\n   */\n  isFullWidth?: boolean\n}\n\nexport interface NumberInputProps\n  extends UseNumberInputProps,\n    ThemingProps,\n    InputOptions,\n    Omit<\n      PropsOf<typeof chakra.div>,\n      \"onChange\" | \"as\" | \"children\" | \"value\" | \"defaultValue\"\n    > {}\n\n/**\n * NumberInput\n *\n * React component that provides context and logic to all\n * number input sub-components.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\nexport const NumberInput = forwardRef<NumberInputProps, \"div\">(\n  function NumberInput(props, ref) {\n    const styles = useMultiStyleConfig(\"NumberInput\", props)\n    const ownProps = omitThemingProps(props)\n\n    const { htmlProps, ...context } = useNumberInput(ownProps)\n    const ctx = React.useMemo(() => context, [context])\n\n    return (\n      <NumberInputProvider value={ctx}>\n        <StylesProvider value={styles}>\n          <chakra.div\n            ref={ref}\n            {...htmlProps}\n            __css={{\n              position: \"relative\",\n              zIndex: 0,\n            }}\n          />\n        </StylesProvider>\n      </NumberInputProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  NumberInput.displayName = \"NumberInput\"\n}\n\nexport interface NumberInputStepperProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * NumberInputStepper\n *\n * React component used to group the increment and decrement\n * button spinners.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/components/number-input\n */\nexport const NumberInputStepper = forwardRef<NumberInputStepperProps, \"div\">(\n  function NumberInputStepper(props, ref) {\n    const styles = useStyles()\n    return (\n      <chakra.div\n        aria-hidden\n        ref={ref}\n        {...props}\n        __css={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          position: \"absolute\",\n          top: \"0\",\n          right: \"0px\",\n          margin: \"1px\",\n          height: \"calc(100% - 2px)\",\n          zIndex: 1,\n          ...styles.stepperGroup,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  NumberInputStepper.displayName = \"NumberInputStepper\"\n}\n\nexport interface NumberInputFieldProps extends PropsOf<typeof chakra.input> {}\n\n/**\n * NumberInputField\n *\n * React component that represents the actual `input` field\n * where users can type to edit numeric values.\n *\n * It renders an `input` by default and ensures only numeric\n * values can be typed.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\nexport const NumberInputField = forwardRef<NumberInputFieldProps, \"input\">(\n  function NumberInputField(props, ref) {\n    const { getInputProps } = useNumberInputContext()\n\n    const input = getInputProps(props, ref)\n    const styles = useStyles()\n\n    return (\n      <chakra.input\n        {...input}\n        __css={{\n          width: \"100%\",\n          ...styles.field,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  NumberInputField.displayName = \"NumberInputField\"\n}\n\nexport const StyledStepper = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    transition: \"all 0.3s\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    lineHeight: \"normal\",\n  },\n})\n\nexport interface NumberDecrementStepperProps\n  extends PropsOf<typeof StyledStepper> {}\n\n/**\n * NumberDecrementStepper\n *\n * React component used to decrement the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\nexport const NumberDecrementStepper = forwardRef<\n  NumberDecrementStepperProps,\n  \"div\"\n>(function NumberDecrementStepper(props, ref) {\n  const styles = useStyles()\n  const { getDecrementButtonProps } = useNumberInputContext()\n  const decrement = getDecrementButtonProps(props, ref)\n\n  return (\n    <StyledStepper {...decrement} __css={styles.stepper}>\n      {props.children ?? <TriangleDownIcon />}\n    </StyledStepper>\n  )\n})\n\nif (__DEV__) {\n  NumberDecrementStepper.displayName = \"NumberDecrementStepper\"\n}\n\nexport interface NumberIncrementStepperProps\n  extends PropsOf<typeof StyledStepper> {}\n\n/**\n * NumberIncrementStepper\n *\n * React component used to increment the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\nexport const NumberIncrementStepper = forwardRef<\n  NumberIncrementStepperProps,\n  \"div\"\n>(function NumberIncrementStepper(props, ref) {\n  const { getIncrementButtonProps } = useNumberInputContext()\n  const increment = getIncrementButtonProps(props, ref)\n  const styles = useStyles()\n\n  return (\n    <StyledStepper {...increment} __css={styles.stepper}>\n      {props.children ?? <TriangleUpIcon />}\n    </StyledStepper>\n  )\n})\n\nif (__DEV__) {\n  NumberIncrementStepper.displayName = \"NumberIncrementStepper\"\n}\n"],"file":"number-input.js"}