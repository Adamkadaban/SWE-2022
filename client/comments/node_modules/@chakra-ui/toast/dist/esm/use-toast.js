function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { Alert, AlertDescription, AlertIcon, AlertTitle } from "@chakra-ui/alert";
import { CloseButton } from "@chakra-ui/close-button";
import { chakra, ColorModeContext, ThemeProvider, useChakra } from "@chakra-ui/system";
import { isFunction, merge } from "@chakra-ui/utils";
import * as React from "react";
import { toast } from "./toast.class";

var Toast = props => {
  var {
    status,
    variant,
    id,
    title,
    isClosable,
    onClose,
    description
  } = props;
  return /*#__PURE__*/React.createElement(Alert, {
    status: status,
    variant: variant,
    id: id,
    alignItems: "start",
    borderRadius: "md",
    boxShadow: "lg",
    margin: 2,
    paddingRight: 8,
    textAlign: "left",
    width: "auto"
  }, /*#__PURE__*/React.createElement(AlertIcon, null), /*#__PURE__*/React.createElement(chakra.div, {
    flex: "1"
  }, title && /*#__PURE__*/React.createElement(AlertTitle, null, title), description && /*#__PURE__*/React.createElement(AlertDescription, {
    display: "block"
  }, description)), isClosable && /*#__PURE__*/React.createElement(CloseButton, {
    size: "sm",
    onClick: onClose,
    position: "absolute",
    right: 1,
    top: 1
  }));
};

var defaults = {
  duration: 5000,
  position: "bottom",
  variant: "solid"
};
/**
 * React hook used to create a function that can be used
 * to show toasts in an application.
 */

export function useToast() {
  var _useChakra = useChakra(),
      {
    theme
  } = _useChakra,
      colorMode = _objectWithoutPropertiesLoose(_useChakra, ["theme"]);

  return React.useMemo(() => {
    var toastImpl = function toastImpl(options) {
      var {
        render
      } = options;

      var Message = props => /*#__PURE__*/React.createElement(ThemeProvider, {
        theme: theme
      }, /*#__PURE__*/React.createElement(ColorModeContext.Provider, {
        value: colorMode
      }, isFunction(render) ? render(props) : /*#__PURE__*/React.createElement(Toast, _extends({}, props, opts))));

      var opts = merge({}, defaults, options);
      return toast.notify(Message, opts);
    };

    toastImpl.close = toast.close;
    toastImpl.closeAll = toast.closeAll; // toasts can only be updated if they have a valid id

    toastImpl.update = (id, options) => {
      var {
        render
      } = options,
          rest = _objectWithoutPropertiesLoose(options, ["render"]);

      if (!id) return;
      var opts = merge({}, defaults, rest);
      toast.update(id, _extends({}, opts, {
        message: props => /*#__PURE__*/React.createElement(ThemeProvider, {
          theme: theme
        }, isFunction(render) ? render(props) : /*#__PURE__*/React.createElement(Toast, _extends({}, props, opts)))
      }));
    };

    toastImpl.isActive = toast.isActive;
    return toastImpl;
  }, [colorMode, theme]);
}
export default useToast;
//# sourceMappingURL=use-toast.js.map