{"version":3,"sources":["../../src/grid.tsx"],"names":["React","chakra","forwardRef","filterUndefined","mapResponsive","__DEV__","Grid","props","ref","area","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","displayName","GridColumn","span","start","value","gridColumnStart"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,MADF,EAIEC,UAJF,QAMO,mBANP;AAOA,SAASC,eAAT,EAA0BC,aAA1B,EAAyCC,OAAzC,QAAwD,kBAAxD;;AAKA;;;;;;;;AAQA,OAAO,IAAMC,IAAI,gBAAGJ,UAAU,CAAmB,SAASI,IAAT,CAAcC,KAAd,EAAqBC,GAArB,EAA0B;AACzE,MAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,GAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,MANI;AAOJC,IAAAA,GAPI;AAQJC,IAAAA,QARI;AASJC,IAAAA,QATI;AAUJC,IAAAA,YAVI;AAWJC,IAAAA,WAXI;AAYJC,IAAAA;AAZI,MAcFb,KAdJ;AAAA,MAaKc,IAbL,iCAcId,KAdJ;;AAgBA,MAAMe,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE,MADI;AAEbC,IAAAA,QAAQ,EAAEf,IAFG;AAGbgB,IAAAA,iBAAiB,EAAEf,aAHN;AAIbgB,IAAAA,OAAO,EAAEf,GAJI;AAKbgB,IAAAA,UAAU,EAAEf,MALC;AAMbgB,IAAAA,aAAa,EAAEf,SANF;AAObgB,IAAAA,eAAe,EAAEV,WAPJ;AAQbW,IAAAA,UAAU,EAAEhB,MARC;AASbiB,IAAAA,OAAO,EAAEhB,GATI;AAUbiB,IAAAA,YAAY,EAAEhB,QAVD;AAWbiB,IAAAA,YAAY,EAAEhB,QAXD;AAYbiB,IAAAA,gBAAgB,EAAEhB,YAZL;AAabiB,IAAAA,mBAAmB,EAAEf;AAbR,GAAf;AAgBA,sBAAO,oBAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,GAAG,EAAEZ,GAAjB;AAAsB,IAAA,KAAK,EAAEc;AAA7B,KAAyCD,IAAzC,EAAP;AACD,CAlC6B,CAAvB;;AAoCP,IAAIhB,OAAJ,EAAa;AACXC,EAAAA,IAAI,CAAC8B,WAAL,GAAmB,MAAnB;AACD;;AAgED,OAAO,IAAMC,UAAU,gBAAGnC,UAAU,CAClC,SAASmC,UAAT,CAAoB9B,KAApB,EAA2BC,GAA3B,EAAgC;AAC9B,MAAM;AAAE8B,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAA2BhC,KAAjC;AAAA,MAAwBc,IAAxB,iCAAiCd,KAAjC;;AAEA,MAAMuB,UAAU,GAAG1B,aAAa,CAACkC,IAAD,EAAQE,KAAD,IACrCA,KAAK,KAAK,MAAV,GAAmB,MAAnB,aAAoCA,KAApC,cAAkDA,KADpB,CAAhC;AAIA,MAAMlB,MAAM,GAAGnB,eAAe,CAAC;AAC7B2B,IAAAA,UAAU,EAAEA,UADiB;AAE7BW,IAAAA,eAAe,EAAEF;AAFY,GAAD,CAA9B;AAKA,sBAAO,oBAAC,MAAD,CAAQ,GAAR;AAAY,IAAA,GAAG,EAAE/B,GAAjB;AAAsB,IAAA,KAAK,EAAEc;AAA7B,KAAyCD,IAAzC,EAAP;AACD,CAdiC,CAA7B","sourcesContent":["import * as React from \"react\"\nimport {\n  chakra,\n  PropsOf,\n  SystemProps,\n  forwardRef,\n  ResponsiveValue,\n} from \"@chakra-ui/system\"\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport { BoxProps } from \"./box\"\n\nexport interface GridProps extends PropsOf<typeof chakra.div>, GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/components/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    area,\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\"\n}\n\nexport interface GridOptions {\n  /**\n   * Short hand prop for `gridTemplateColumns`\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Short hand prop for `gridGap`\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Short hand prop for `gridRowGap`\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Short hand prop for `gridColumnGap`\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Short hand prop for `gridAutoFlow`\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Short hand prop for `gridAutoRows`\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Short hand prop for `gridAutoColumns`\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Short hand prop for `gridTemplateRows`\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Short hand prop for `gridTemplateAreas`\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Short hand prop for `gridArea`\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * Short hand prop for `gridColumn`\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Short hand prop for `gridRow`\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridColumnProps extends BoxProps {\n  /**\n   * The number of columns the grid item should `span`.\n   */\n  span?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   */\n  start?: ResponsiveValue<number | \"auto\">\n}\n\nexport const GridColumn = forwardRef<GridColumnProps, \"div\">(\n  function GridColumn(props, ref) {\n    const { span, start, ...rest } = props\n\n    const gridColumn = mapResponsive(span, (value) =>\n      value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n    )\n\n    const styles = filterUndefined({\n      gridColumn: gridColumn,\n      gridColumnStart: start,\n    })\n\n    return <chakra.div ref={ref} __css={styles} {...rest} />\n  },\n)\n"],"file":"grid.js"}