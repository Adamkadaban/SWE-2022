{"version":3,"sources":["../../src/grid.tsx"],"names":["Grid","props","ref","area","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","__DEV__","displayName","GridColumn","span","start","value","gridColumnStart"],"mappings":";;;;;AAAA;;AACA;;AAOA;;;;;;;;;;AAKA;;;;;;;;AAQO,IAAMA,IAAI,gBAAG,wBAA6B,SAASA,IAAT,CAAcC,KAAd,EAAqBC,GAArB,EAA0B;AAAA,MAEvEC,IAFuE,GAerEF,KAfqE,CAEvEE,IAFuE;AAAA,MAGvEC,aAHuE,GAerEH,KAfqE,CAGvEG,aAHuE;AAAA,MAIvEC,GAJuE,GAerEJ,KAfqE,CAIvEI,GAJuE;AAAA,MAKvEC,MALuE,GAerEL,KAfqE,CAKvEK,MALuE;AAAA,MAMvEC,SANuE,GAerEN,KAfqE,CAMvEM,SANuE;AAAA,MAOvEC,MAPuE,GAerEP,KAfqE,CAOvEO,MAPuE;AAAA,MAQvEC,GARuE,GAerER,KAfqE,CAQvEQ,GARuE;AAAA,MASvEC,QATuE,GAerET,KAfqE,CASvES,QATuE;AAAA,MAUvEC,QAVuE,GAerEV,KAfqE,CAUvEU,QAVuE;AAAA,MAWvEC,YAXuE,GAerEX,KAfqE,CAWvEW,YAXuE;AAAA,MAYvEC,WAZuE,GAerEZ,KAfqE,CAYvEY,WAZuE;AAAA,MAavEC,eAbuE,GAerEb,KAfqE,CAavEa,eAbuE;AAAA,MAcpEC,IAdoE,iCAerEd,KAfqE;;AAiBzE,MAAMe,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE,MADI;AAEbC,IAAAA,QAAQ,EAAEf,IAFG;AAGbgB,IAAAA,iBAAiB,EAAEf,aAHN;AAIbgB,IAAAA,OAAO,EAAEf,GAJI;AAKbgB,IAAAA,UAAU,EAAEf,MALC;AAMbgB,IAAAA,aAAa,EAAEf,SANF;AAObgB,IAAAA,eAAe,EAAEV,WAPJ;AAQbW,IAAAA,UAAU,EAAEhB,MARC;AASbiB,IAAAA,OAAO,EAAEhB,GATI;AAUbiB,IAAAA,YAAY,EAAEhB,QAVD;AAWbiB,IAAAA,YAAY,EAAEhB,QAXD;AAYbiB,IAAAA,gBAAgB,EAAEhB,YAZL;AAabiB,IAAAA,mBAAmB,EAAEf;AAbR,GAAf;AAgBA,sBAAO,oBAAC,cAAD,CAAQ,GAAR;AAAY,IAAA,GAAG,EAAEZ,GAAjB;AAAsB,IAAA,KAAK,EAAEc;AAA7B,KAAyCD,IAAzC,EAAP;AACD,CAlCmB,CAAb;;;AAoCP,IAAIe,cAAJ,EAAa;AACX9B,EAAAA,IAAI,CAAC+B,WAAL,GAAmB,MAAnB;AACD;;AAgEM,IAAMC,UAAU,gBAAG,wBACxB,SAASA,UAAT,CAAoB/B,KAApB,EAA2BC,GAA3B,EAAgC;AAAA,MACtB+B,IADsB,GACGhC,KADH,CACtBgC,IADsB;AAAA,MAChBC,KADgB,GACGjC,KADH,CAChBiC,KADgB;AAAA,MACNnB,IADM,iCACGd,KADH;;AAG9B,MAAMuB,UAAU,GAAG,0BAAcS,IAAd,EAAoB,UAACE,KAAD;AAAA,WACrCA,KAAK,KAAK,MAAV,GAAmB,MAAnB,aAAoCA,KAApC,cAAkDA,KADb;AAAA,GAApB,CAAnB;AAIA,MAAMnB,MAAM,GAAG,4BAAgB;AAC7BQ,IAAAA,UAAU,EAAEA,UADiB;AAE7BY,IAAAA,eAAe,EAAEF;AAFY,GAAhB,CAAf;AAKA,sBAAO,oBAAC,cAAD,CAAQ,GAAR;AAAY,IAAA,GAAG,EAAEhC,GAAjB;AAAsB,IAAA,KAAK,EAAEc;AAA7B,KAAyCD,IAAzC,EAAP;AACD,CAduB,CAAnB","sourcesContent":["import * as React from \"react\"\nimport {\n  chakra,\n  PropsOf,\n  SystemProps,\n  forwardRef,\n  ResponsiveValue,\n} from \"@chakra-ui/system\"\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport { BoxProps } from \"./box\"\n\nexport interface GridProps extends PropsOf<typeof chakra.div>, GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/components/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    area,\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\"\n}\n\nexport interface GridOptions {\n  /**\n   * Short hand prop for `gridTemplateColumns`\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Short hand prop for `gridGap`\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Short hand prop for `gridRowGap`\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Short hand prop for `gridColumnGap`\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Short hand prop for `gridAutoFlow`\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Short hand prop for `gridAutoRows`\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Short hand prop for `gridAutoColumns`\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Short hand prop for `gridTemplateRows`\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Short hand prop for `gridTemplateAreas`\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Short hand prop for `gridArea`\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * Short hand prop for `gridColumn`\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Short hand prop for `gridRow`\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridColumnProps extends BoxProps {\n  /**\n   * The number of columns the grid item should `span`.\n   */\n  span?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   */\n  start?: ResponsiveValue<number | \"auto\">\n}\n\nexport const GridColumn = forwardRef<GridColumnProps, \"div\">(\n  function GridColumn(props, ref) {\n    const { span, start, ...rest } = props\n\n    const gridColumn = mapResponsive(span, (value) =>\n      value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n    )\n\n    const styles = filterUndefined({\n      gridColumn: gridColumn,\n      gridColumnStart: start,\n    })\n\n    return <chakra.div ref={ref} __css={styles} {...rest} />\n  },\n)\n"],"file":"grid.js"}