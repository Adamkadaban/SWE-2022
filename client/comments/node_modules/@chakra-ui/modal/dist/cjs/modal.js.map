{"version":3,"sources":["../../src/modal.tsx"],"names":["strict","name","errorMessage","ModalContextProvider","useModalContext","Modal","props","getContainer","children","autoFocus","trapFocus","initialFocusRef","finalFocusRef","returnFocusOnClose","blockScrollOnMount","allowPinchZoom","preserveScrollBarGap","styles","modal","context","isOpen","defaultProps","scrollBehavior","__DEV__","displayName","ModalContent","ref","className","otherProps","getContentProps","content","_className","display","flexDirection","position","width","outline","ModalOverlay","rest","getOverlayProps","dialogRef","overlay","height","left","top","ModalHeader","headerId","setHeaderMounted","React","useEffect","flex","header","ModalBody","bodyId","setBodyMounted","body","ModalFooter","alignItems","justifyContent","footer","ModalCloseButton","onClick","onClose","event","stopPropagation"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport { FocusLock } from \"@chakra-ui/focus-lock\"\nimport { Portal, PortalProps } from \"@chakra-ui/portal\"\nimport {\n  chakra,\n  forwardRef,\n  PropsOf,\n  ThemingProps,\n  useMultiStyleConfig,\n  StylesProvider,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { callAllHandlers, cx, __DEV__, createContext } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { RemoveScroll } from \"react-remove-scroll\"\nimport { useModal, UseModalProps, UseModalReturn } from \"./use-modal\"\n\ninterface ModalOptions {\n  /**\n   * If `false`, focus lock will be disabled completely.\n   *\n   * This is useful in situations where you still need to interact with\n   * other surrounding elements.\n   *\n   * ðŸš¨Warning: We don't recommend doing this because it hurts the\n   * accessbility of the modal, based on WAI-ARIA specifications.\n   *\n   * @default true\n   */\n  trapFocus?: boolean\n  /**\n   * If `true`, the modal will autofocus the first enabled and interative\n   * element within the `ModalContent`\n   *\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * The `ref` of element to receive focus when the modal opens.\n   */\n  initialFocusRef?: React.RefObject<HTMLElement>\n  /**\n   * The `ref` of element to receive focus when the modal closes.\n   */\n  finalFocusRef?: React.RefObject<HTMLElement>\n  /**\n   * If `true`, the modal will return focus to the element that triggered it when it closes.\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, scrolling will be disabled on the `body` when the modal opens.\n   *  @default true\n   */\n  blockScrollOnMount?: boolean\n  /**\n   * Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.\n   * Defaults to `false`.\n   */\n  allowPinchZoom?: boolean\n  /**\n   * If `true`, a `padding-right` will be applied to the body element\n   * that's equal to the width of the scrollbar.\n   *\n   * This can help prevent some unpleasant flickering effect\n   * and content adjustment when the modal opens\n   */\n  preserveScrollBarGap?: boolean\n}\nexport interface ModalProps extends UseModalProps, ModalOptions, ThemingProps {\n  children?: React.ReactNode\n  /**\n   *  If `true`, the modal will be centered on screen.\n   * @default false\n   */\n  isCentered?: boolean\n  /**\n   * Where scroll behaviour should originate.\n   * - If set to `inside`, scroll only occurs within the `ModalBody`.\n   * - If set to `outside`, the entire `ModalContent` will scroll within the viewport.\n   *\n   * @default \"outside\"\n   */\n  scrollBehavior?: \"inside\" | \"outside\"\n\n  /**\n   * Function that will be called to get the parent element\n   * that the modal will be attached to.\n   */\n  getContainer?: PortalProps[\"getContainer\"]\n}\n\ninterface ModalContext extends ModalOptions, UseModalReturn {}\n\nconst [ModalContextProvider, useModalContext] = createContext<ModalContext>({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage:\n    \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\",\n})\n\nexport { ModalContextProvider, useModalContext }\n\n/**\n * Modal\n *\n * React component that provides context, theming, and accessbility properties\n * to all other modal components.\n *\n * It doesn't render any DOM node.\n */\nexport const Modal: React.FC<ModalProps> = (props) => {\n  const {\n    getContainer,\n    children,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n  } = props\n\n  const styles = useMultiStyleConfig(\"Modal\", props)\n  const modal = useModal(props)\n\n  const context = {\n    ...modal,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n  }\n\n  if (!context.isOpen) return null\n\n  return (\n    <ModalContextProvider value={context}>\n      <Portal getContainer={getContainer}>\n        <StylesProvider value={styles}>{children}</StylesProvider>\n      </Portal>\n    </ModalContextProvider>\n  )\n}\n\nModal.defaultProps = {\n  returnFocusOnClose: true,\n  scrollBehavior: \"outside\",\n  trapFocus: true,\n  autoFocus: true,\n  blockScrollOnMount: true,\n  allowPinchZoom: false,\n}\n\nif (__DEV__) {\n  Modal.displayName = \"Modal\"\n}\n\nexport interface ModalContentProps extends PropsOf<typeof chakra.section> {}\n\n/**\n * ModalContent\n *\n * React component used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it's a modal modal\n */\nexport const ModalContent = forwardRef<ModalContentProps, \"section\">(\n  function ModalContent(props, ref) {\n    const { className, children, ...otherProps } = props\n\n    const { getContentProps } = useModalContext()\n\n    const content = getContentProps(otherProps, ref)\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useStyles()\n\n    return (\n      <chakra.section\n        className={_className}\n        {...content}\n        __css={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          position: \"relative\",\n          width: \"100%\",\n          outline: 0,\n          ...styles.content,\n        }}\n      >\n        {children}\n      </chakra.section>\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalContent.displayName = \"ModalContent\"\n}\n\nexport interface ModalOverlayProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * ModalOverlay\n *\n * React component that renders a backdrop behind the modal. It's\n * also used as a wrapper for the modal content for better positioning.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalOverlay = forwardRef<ModalOverlayProps, \"div\">(\n  function ModalOverlay(props, ref) {\n    const { className, children, ...rest } = props\n\n    const {\n      getOverlayProps,\n      autoFocus,\n      trapFocus,\n      dialogRef,\n      initialFocusRef,\n      blockScrollOnMount,\n      allowPinchZoom,\n      finalFocusRef,\n      returnFocusOnClose,\n      preserveScrollBarGap,\n    } = useModalContext()\n\n    const overlay = getOverlayProps(rest, ref)\n    const _className = cx(\"chakra-modal__overlay\", className)\n\n    const styles = useStyles()\n\n    return (\n      <FocusLock\n        autoFocus={autoFocus}\n        isDisabled={!trapFocus}\n        initialFocusRef={initialFocusRef}\n        finalFocusRef={finalFocusRef}\n        restoreFocus={returnFocusOnClose}\n        contentRef={dialogRef}\n      >\n        <RemoveScroll\n          removeScrollBar={!preserveScrollBarGap}\n          allowPinchZoom={allowPinchZoom}\n          enabled={blockScrollOnMount}\n        >\n          <chakra.div\n            {...overlay}\n            className={_className}\n            __css={{\n              width: \"100vw\",\n              height: \"100vh\",\n              position: \"fixed\",\n              left: 0,\n              top: 0,\n              ...styles.overlay,\n            }}\n          >\n            {children}\n          </chakra.div>\n        </RemoveScroll>\n      </FocusLock>\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalOverlay.displayName = \"ModalOverlay\"\n}\n\nexport interface ModalHeaderProps extends PropsOf<typeof chakra.header> {}\n\n/**\n * ModalHeader\n *\n * React component that houses the title of the modal.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalHeader = forwardRef<ModalHeaderProps, \"header\">(\n  function ModalHeader(props, ref) {\n    const { className, ...rest } = props\n\n    const { headerId, setHeaderMounted } = useModalContext()\n\n    /**\n     * Notify us if this component was rendered or used\n     * so we can append `aria-labelledby` automatically\n     */\n    React.useEffect(() => {\n      setHeaderMounted(true)\n      return () => setHeaderMounted(false)\n    }, [setHeaderMounted])\n\n    const _className = cx(\"chakra-modal__header\", className)\n    const styles = useStyles()\n\n    return (\n      <chakra.header\n        ref={ref}\n        className={_className}\n        id={headerId}\n        {...rest}\n        __css={{\n          flex: 0,\n          ...styles.header,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalHeader.displayName = \"ModalHeader\"\n}\n\nexport interface ModalBodyProps extends PropsOf<typeof chakra.div> {}\n\n/**\n * ModalBody\n *\n * React component that houses the main content of the modal.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalBody = forwardRef<ModalBodyProps, \"div\">(function ModalBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const { bodyId, setBodyMounted } = useModalContext()\n\n  /**\n   * Notify us if this component was rendered or used\n   * so we can append `aria-describedby` automatically\n   */\n  React.useEffect(() => {\n    setBodyMounted(true)\n    return () => setBodyMounted(false)\n  }, [setBodyMounted])\n\n  const _className = cx(\"chakra-modal__body\", className)\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={_className}\n      id={bodyId}\n      {...rest}\n      __css={styles.body}\n    />\n  )\n})\n\nif (__DEV__) {\n  ModalBody.displayName = \"ModalBody\"\n}\n\nexport interface ModalFooterProps extends PropsOf<typeof chakra.footer> {}\n\n/**\n * ModalFooter\n *\n * React component that houses the action buttons of the modal.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalFooter = forwardRef<ModalFooterProps, \"footer\">(\n  function ModalFooter(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-modal__footer\", className)\n    const styles = useStyles()\n    return (\n      <chakra.footer\n        ref={ref}\n        {...rest}\n        __css={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n          flex: 0,\n          ...styles.footer,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalFooter.displayName = \"ModalFooter\"\n}\n\n/**\n * ModalCloseButton\n *\n * React component used closes the modal. You don't need\n * to pass the `onClick` to it, it's reads the `onClose` action from the\n * modal context.\n */\nexport const ModalCloseButton = forwardRef<CloseButtonProps, \"button\">(\n  function ModalCloseButton(props, ref) {\n    const { onClick, className, ...rest } = props\n    const { onClose } = useModalContext()\n\n    const _className = cx(\"chakra-modal__close-btn\", className)\n\n    return (\n      <CloseButton\n        ref={ref}\n        position=\"absolute\"\n        top=\"8px\"\n        right=\"12px\"\n        className={_className}\n        onClick={callAllHandlers(onClick, (event) => {\n          event.stopPropagation()\n          onClose()\n        })}\n        {...rest}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalCloseButton.displayName = \"ModalCloseButton\"\n}\n"],"file":"modal.js"}