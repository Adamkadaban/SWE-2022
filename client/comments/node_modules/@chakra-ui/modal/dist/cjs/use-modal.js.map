{"version":3,"sources":["../../src/use-modal.ts"],"names":["useModal","props","isOpen","onClose","id","closeOnOverlayClick","closeOnEsc","useInert","onOverlayClickProp","onOverlayClick","onEsc","dialogRef","overlayRef","dialogId","headerId","bodyId","useAriaHidden","mouseDownTarget","onMouseDown","event","current","target","onKeyDown","key","stopPropagation","manager","isTopModal","headerMounted","setHeaderMounted","bodyMounted","setBodyMounted","getContentProps","ref","role","tabIndex","undefined","onClick","getOverlayProps","shouldHide","undo"],"mappings":"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","sourcesContent":["import { useIds } from \"@chakra-ui/hooks\"\nimport { callAllHandlers, mergeRefs, PropGetter } from \"@chakra-ui/utils\"\nimport { hideOthers, Undo } from \"aria-hidden\"\nimport {\n  KeyboardEvent,\n  MouseEvent,\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\nimport { manager, useModalManager } from \"./modal-manager\"\n\nexport interface UseModalProps {\n  /**\n   * If `true`, the modal when be opened.\n   */\n  isOpen: boolean\n  /**\n   * The `id` of the modal\n   */\n  id?: string\n  /**\n   * Callback invoked to close the modal.\n   */\n  onClose(): void\n  /**\n   * If `true`, the modal will close when the overlay is clicked\n   * @default true\n   */\n  closeOnOverlayClick?: boolean\n  /**\n   * If `true`, the modal will close when the `Esc` key is pressed\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?(): void\n  /**\n   * Callback fired when the escape key is pressed and focus is within modal\n   */\n  onEsc?(): void\n  /**\n   * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\n   * set to `true` so that screen readers can only see the `modal`.\n   *\n   * This is commonly known as making the other elements **inert**\n   *\n   *  @default true\n   */\n  useInert?: boolean\n}\n\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\nexport function useModal(props: UseModalProps) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc,\n  } = props\n\n  const dialogRef = useRef<HTMLElement>(null)\n  const overlayRef = useRef<HTMLElement>(null)\n\n  const [dialogId, headerId, bodyId] = useIds(\n    id,\n    `chakra-modal`,\n    `chakra-modal--header`,\n    `chakra-modal--body`,\n  )\n\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n  useAriaHidden(dialogRef, isOpen && useInert)\n  /**\n   * Hook use to manage multiple or nested modals\n   */\n  useModalManager(dialogRef, isOpen)\n\n  const mouseDownTarget = useRef<EventTarget | null>(null)\n\n  const onMouseDown = useCallback((event: MouseEvent) => {\n    mouseDownTarget.current = event.target\n  }, [])\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        event.stopPropagation()\n\n        if (closeOnEsc) {\n          onClose?.()\n        }\n\n        onEsc?.()\n      }\n    },\n    [closeOnEsc, onClose, onEsc],\n  )\n\n  const onOverlayClick = useCallback(\n    (event: MouseEvent) => {\n      event.stopPropagation()\n      /**\n       * Make sure the event starts and ends on the same DOM element.\n       *\n       * This is used to prevent the modal from closing when you\n       * start dragging from the content, and release drag outside the content.\n       *\n       * We prevent this because it's technically not a considered \"click outside\"\n       */\n      if (mouseDownTarget.current !== event.target) return\n\n      /**\n       * When you click on the overlay, we want to remove only the topmost modal\n       */\n      if (manager.isTopModal(dialogRef)) {\n        if (closeOnOverlayClick) {\n          onClose?.()\n        }\n        onOverlayClickProp?.()\n      }\n    },\n    [onClose, closeOnOverlayClick, onOverlayClickProp],\n  )\n\n  const [headerMounted, setHeaderMounted] = useState(false)\n  const [bodyMounted, setBodyMounted] = useState(false)\n\n  const getContentProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      role: \"dialog\",\n      ...props,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, (event: MouseEvent) =>\n        event.stopPropagation(),\n      ),\n    }),\n    [bodyId, bodyMounted, dialogId, headerId, headerMounted],\n  )\n\n  const getOverlayProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n    }),\n    [onKeyDown, onMouseDown, onOverlayClick],\n  )\n\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getContentProps,\n    getOverlayProps,\n  }\n}\n\nexport type UseModalReturn = ReturnType<typeof useModal>\n\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\nexport function useAriaHidden(\n  ref: RefObject<HTMLElement>,\n  shouldHide: boolean,\n) {\n  useEffect(() => {\n    if (!ref.current) return\n\n    let undo: Undo | null = null\n\n    if (shouldHide && ref.current) {\n      undo = hideOthers(ref.current)\n    }\n\n    return () => {\n      if (shouldHide) {\n        undo?.()\n      }\n    }\n  }, [shouldHide, ref])\n}\n"],"file":"use-modal.js"}