{"version":3,"sources":["../../src/hooks.ts"],"names":["useChakra","colorModeResult","theme","useToken","scale","token","fallback","path","useProps","themeKey","props","isMultiPart","colorMode","styleConfig","components","defaultProps","propsWithDefault","stylesRef","mergedProps","memoizedStyles","baseStyles","baseStyle","variants","variant","sizes","size","styles","parts","part","isStyleEqual","current"],"mappings":";;;;;;;AAAA;;AAEA;;AAQA;;AACA;;AACA;;AAEA;;;;;;;;;;;;AAEO,SAASA,SAAT,GAA4C;AACjD,MAAMC,eAAe,GAAG,8BAAxB;AACA,MAAMC,KAAK,GAAG,0BAAd;AACA,sBAAYD,eAAZ;AAA6BC,IAAAA,KAAK,EAALA;AAA7B;AACD;;AAEM,SAASC,QAAT,CACLC,KADK,EAELC,KAFK,EAGLC,QAHK,EAIL;AACA,MAAMJ,KAAK,GAAG,0BAAd;AACA,MAAMK,IAAI,GAAMH,KAAN,SAAeC,KAAzB;AACA,SAAO,wBAAIH,KAAJ,EAAWK,IAAX,EAAiBD,QAAjB,WAAiBA,QAAjB,GAA6BD,KAA7B,CAAP;AACD;;AAoBM,SAASG,QAAT,CAAkBC,QAAlB,EAAoCC,KAApC,EAAiDC,WAAjD,EAAwE;AAAA;;AAAA,mBAChDX,SAAS,EADuC;AAAA,MACrEE,KADqE,cACrEA,KADqE;AAAA,MAC9DU,SAD8D,cAC9DA,SAD8D;;AAG7E,MAAMC,WAAW,GAAIH,KAAK,CAACG,WAAN,0BAAqBX,KAAK,CAACY,UAA3B,qBAAqB,kBAAmBL,QAAnB,CAArB,CAArB;AAIA,MAAMM,YAAY,4BAAGF,WAAH,oBAAGA,WAAW,CAAEE,YAAhB,oCAAgC,EAAlD;;AACA,MAAMC,gBAAgB,gBAAQD,YAAR,EAAyB,4BAAgBL,KAAhB,CAAzB,CAAtB;;AAEA,MAAMO,SAAS,GAAG,mBAAa,EAAb,CAAlB;AAEA,MAAMC,WAAW,GAAG,kBAAM,EAAN,EAAUF,gBAAV,EAA4B;AAAEd,IAAAA,KAAK,EAALA,KAAF;AAASU,IAAAA,SAAS,EAATA;AAAT,GAA5B,CAApB;AAEA,MAAMO,cAAc,GAAG,oBAAQ,YAAM;AACnC,QAAIN,WAAJ,EAAiB;AAAA;;AACf,UAAMO,UAAU,GAAG,6CAAQP,WAAW,CAACQ,SAApB,oCAAiC,EAAjC,EAAqCH,WAArC,CAAnB;AAEA,UAAMI,QAAQ,GAAG,uEACfT,WAAW,CAACS,QADG,qBACf,uBAAuBJ,WAAW,CAACK,OAAnC,CADe,oCAC0C,EAD1C,EAEfL,WAFe,CAAjB;AAKA,UAAMM,KAAK,GAAG,iEACZX,WAAW,CAACW,KADA,qBACZ,oBAAoBN,WAAW,CAACO,IAAhC,CADY,iCACuC,EADvC,EAEZP,WAFY,CAAd;AAKA,UAAMQ,MAAM,GAAG,kBAAMN,UAAN,EAAkBI,KAAlB,EAAyBF,QAAzB,CAAf;;AAEA,UAAIT,WAAW,CAACc,KAAhB,EAAuB;AACrB,6DAAmBd,WAAW,CAACc,KAA/B,wCAAsC;AAAA;;AAAA,cAA3BC,IAA2B;AACpCF,UAAAA,MAAM,CAACE,IAAD,CAAN,mBAAeF,MAAM,CAACE,IAAD,CAArB,2BAA+B,EAA/B;AACD;AACF;;AAED,UAAMC,YAAY,GAAG,kCAAQZ,SAAS,CAACa,OAAlB,EAA2BJ,MAA3B,CAArB;;AAEA,UAAI,CAACG,YAAL,EAAmB;AACjBZ,QAAAA,SAAS,CAACa,OAAV,GAAoBJ,MAApB;AACD;AACF;;AAED,WAAOT,SAAS,CAACa,OAAjB;AACD,GA9BsB,EA8BpB,CAACjB,WAAD,EAAcK,WAAd,CA9BoB,CAAvB;AAgCA,SAAO;AACLQ,IAAAA,MAAM,EAAEP,cADH;AAELT,IAAAA,KAAK,EAAE,8BAAiBM,gBAAjB;AAFF,GAAP;AAID","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  Dict,\n  filterUndefined,\n  memoizedGet as get,\n  merge,\n  runIfFn,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport { useMemo, useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useTheme } from \"./providers\"\nimport { ThemingProps } from \"./system.types\"\nimport { omitThemingProps } from \"./system.utils\"\n\nexport function useChakra<T extends Dict = Dict>() {\n  const colorModeResult = useColorMode()\n  const theme = useTheme() as T\n  return { ...colorModeResult, theme }\n}\n\nexport function useToken(\n  scale: string,\n  token: StringOrNumber,\n  fallback?: StringOrNumber,\n) {\n  const theme = useTheme()\n  const path = `${scale}.${token}`\n  return get(theme, path, fallback ?? token)\n}\n\nexport function useProps<P extends ThemingProps>(\n  themeKey: string,\n  props: P,\n  isMulti: true,\n): {\n  styles: Record<string, SystemStyleObject>\n  props: Omit<P, keyof ThemingProps>\n}\n\nexport function useProps<P extends ThemingProps>(\n  themeKey: string,\n  props?: P,\n  isMulti?: boolean,\n): {\n  styles: SystemStyleObject\n  props: Omit<P, keyof ThemingProps>\n}\n\nexport function useProps(themeKey: string, props: Dict, isMultiPart?: boolean) {\n  const { theme, colorMode } = useChakra()\n\n  const styleConfig = (props.styleConfig || theme.components?.[themeKey]) as\n    | Dict\n    | undefined\n\n  const defaultProps = styleConfig?.defaultProps ?? {}\n  const propsWithDefault = { ...defaultProps, ...filterUndefined(props) }\n\n  const stylesRef = useRef<Dict>({})\n\n  const mergedProps = merge({}, propsWithDefault, { theme, colorMode })\n\n  const memoizedStyles = useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, mergedProps)\n\n      const variants = runIfFn(\n        styleConfig.variants?.[mergedProps.variant as string] ?? {},\n        mergedProps,\n      )\n\n      const sizes = runIfFn(\n        styleConfig.sizes?.[mergedProps.size as string] ?? {},\n        mergedProps,\n      )\n\n      const styles = merge(baseStyles, sizes, variants)\n\n      if (styleConfig.parts) {\n        for (const part of styleConfig.parts) {\n          styles[part] = styles[part] ?? {}\n        }\n      }\n\n      const isStyleEqual = isEqual(stylesRef.current, styles)\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles\n      }\n    }\n\n    return stylesRef.current\n  }, [styleConfig, mergedProps])\n\n  return {\n    styles: memoizedStyles,\n    props: omitThemingProps(propsWithDefault),\n  }\n}\n"],"file":"hooks.js"}