{"version":3,"sources":["../../src/hooks.ts"],"names":["useColorMode","filterUndefined","memoizedGet","get","merge","runIfFn","useMemo","useRef","isEqual","useTheme","omitThemingProps","useChakra","colorModeResult","theme","useToken","scale","token","fallback","path","useProps","themeKey","props","isMultiPart","colorMode","styleConfig","components","defaultProps","propsWithDefault","stylesRef","mergedProps","memoizedStyles","baseStyles","baseStyle","variants","variant","sizes","size","styles","parts","part","isStyleEqual","current"],"mappings":"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","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  Dict,\n  filterUndefined,\n  memoizedGet as get,\n  merge,\n  runIfFn,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport { useMemo, useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useTheme } from \"./providers\"\nimport { ThemingProps } from \"./system.types\"\nimport { omitThemingProps } from \"./system.utils\"\n\nexport function useChakra<T extends Dict = Dict>() {\n  const colorModeResult = useColorMode()\n  const theme = useTheme() as T\n  return { ...colorModeResult, theme }\n}\n\nexport function useToken(\n  scale: string,\n  token: StringOrNumber,\n  fallback?: StringOrNumber,\n) {\n  const theme = useTheme()\n  const path = `${scale}.${token}`\n  return get(theme, path, fallback ?? token)\n}\n\nexport function useProps<P extends ThemingProps>(\n  themeKey: string,\n  props: P,\n  isMulti: true,\n): {\n  styles: Record<string, SystemStyleObject>\n  props: Omit<P, keyof ThemingProps>\n}\n\nexport function useProps<P extends ThemingProps>(\n  themeKey: string,\n  props?: P,\n  isMulti?: boolean,\n): {\n  styles: SystemStyleObject\n  props: Omit<P, keyof ThemingProps>\n}\n\nexport function useProps(themeKey: string, props: Dict, isMultiPart?: boolean) {\n  const { theme, colorMode } = useChakra()\n\n  const styleConfig = (props.styleConfig || theme.components?.[themeKey]) as\n    | Dict\n    | undefined\n\n  const defaultProps = styleConfig?.defaultProps ?? {}\n  const propsWithDefault = { ...defaultProps, ...filterUndefined(props) }\n\n  const stylesRef = useRef<Dict>({})\n\n  const mergedProps = merge({}, propsWithDefault, { theme, colorMode })\n\n  const memoizedStyles = useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, mergedProps)\n\n      const variants = runIfFn(\n        styleConfig.variants?.[mergedProps.variant as string] ?? {},\n        mergedProps,\n      )\n\n      const sizes = runIfFn(\n        styleConfig.sizes?.[mergedProps.size as string] ?? {},\n        mergedProps,\n      )\n\n      const styles = merge(baseStyles, sizes, variants)\n\n      if (styleConfig.parts) {\n        for (const part of styleConfig.parts) {\n          styles[part] = styles[part] ?? {}\n        }\n      }\n\n      const isStyleEqual = isEqual(stylesRef.current, styles)\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles\n      }\n    }\n\n    return stylesRef.current\n  }, [styleConfig, mergedProps])\n\n  return {\n    styles: memoizedStyles,\n    props: omitThemingProps(propsWithDefault),\n  }\n}\n"],"file":"hooks.js"}