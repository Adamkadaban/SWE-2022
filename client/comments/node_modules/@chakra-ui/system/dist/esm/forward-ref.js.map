{"version":3,"sources":["../../src/forward-ref.tsx"],"names":["React","forwardRef","comp"],"mappings":"AAAA;;;;AAIA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AA0BA,OAAO,SAASC,UAAT,CACLC,IADK,EAKL;AACA,sBAAQF,KAAK,CAACC,UAAN,CAAiBC,IAAjB,CAAR;AAID","sourcesContent":["/**\n * All credit goes to Chance (Reach UI), and Haz (Reakit) for creating\n * the base type definitions upon which we improved on\n */\nimport * as React from \"react\"\n\ntype As = string | React.ComponentType<any>\n\nexport type PropsWithAs<T extends As, P> = P &\n  Omit<PropsOf<T>, \"as\" | \"color\" | keyof P> & {\n    as?: T | As\n  }\n\n//@ts-expect-error\ntype PropsOf<T extends As> = React.PropsWithRef<React.ComponentProps<T>>\n\ntype Merge<T, P> = P extends object ? P & Omit<T, keyof P> : T\n\nexport interface ComponentWithAs<T extends As, P> {\n  <TT extends As = T>(\n    props: Merge<PropsWithAs<T, P>, PropsWithAs<TT, P>>,\n  ): React.ReactElement | null\n  (props: Merge<PropsOf<T>, P>): React.ReactElement | null\n  displayName?: string\n  propTypes?: React.WeakValidationMap<Merge<PropsOf<T>, P>>\n  contextTypes?: React.ValidationMap<any>\n  defaultProps?: Partial<Merge<PropsOf<T>, P>>\n  id?: string\n}\n\nexport function forwardRef<P, T extends As>(\n  comp: (\n    props: PropsWithAs<T, Omit<P, \"children\" | \"as\">>,\n    ref: React.RefObject<any>,\n  ) => React.ReactElement | null,\n) {\n  return (React.forwardRef(comp as any) as unknown) as ComponentWithAs<\n    T,\n    Omit<P, \"children\" | \"as\">\n  >\n}\n"],"file":"forward-ref.js"}