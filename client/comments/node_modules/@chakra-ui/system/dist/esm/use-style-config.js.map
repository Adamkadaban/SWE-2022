{"version":3,"sources":["../../src/use-style-config.ts"],"names":["filterUndefined","memoizedGet","get","merge","runIfFn","omit","useMemo","useRef","isEqual","useChakra","useStyleConfig","themeKey","props","opts","styleConfig","styleConfigProp","rest","theme","colorMode","themeStyleConfig","mergedProps","defaultProps","stylesRef","baseStyles","baseStyle","variants","variant","sizes","size","styles","isMultiPart","parts","part","isStyleEqual","current","useMultiStyleConfig"],"mappings":";;AACA,SACEA,eADF,EAEEC,WAAW,IAAIC,GAFjB,EAGEC,KAHF,EAIEC,OAJF,EAKEC,IALF,QAMO,kBANP;AAOA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,SAAT,QAA0B,SAA1B;AAeA,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAAuCC,KAAvC,EAAmDC,IAAnD,EAA8D;AAAA;;AACnE,MAAM;AAAEC,IAAAA,WAAW,EAAEC;AAAf,MAA4CH,KAAlD;AAAA,MAAyCI,IAAzC,iCAAkDJ,KAAlD;;AAEA,MAAM;AAAEK,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAuBT,SAAS,EAAtC;AACA,MAAMU,gBAAgB,GAAGjB,GAAG,CAACe,KAAD,kBAAsBN,QAAtB,CAA5B;AACA,MAAMG,WAAW,GAAGC,eAAe,IAAII,gBAAvC;AAEA,MAAMC,WAAW,GAAGjB,KAAK,CACvB;AAAEc,IAAAA,KAAF;AAASC,IAAAA;AAAT,GADuB,2BAEvBJ,WAFuB,oBAEvBA,WAAW,CAAEO,YAFU,oCAEM,EAFN,EAGvBrB,eAAe,CAACK,IAAI,CAACW,IAAD,EAAO,CAAC,UAAD,CAAP,CAAL,CAHQ,CAAzB;AAMA;;;;AAIA,MAAMM,SAAS,GAAGf,MAAM,CAAY,EAAZ,CAAxB;AAEA,SAAOD,OAAO,CAAC,MAAM;AACnB,QAAIQ,WAAJ,EAAiB;AAAA;;AACf,UAAMS,UAAU,GAAGnB,OAAO,0BAACU,WAAW,CAACU,SAAb,oCAA0B,EAA1B,EAA8BJ,WAA9B,CAA1B;AAEA,UAAMK,QAAQ,GAAGrB,OAAO,oDACtBU,WAAW,CAACW,QADU,qBACtB,uBAAuBL,WAAW,CAACM,OAAnC,CADsB,oCACyB,EADzB,EAEtBN,WAFsB,CAAxB;AAKA,UAAMO,KAAK,GAAGvB,OAAO,gDACnBU,WAAW,CAACa,KADO,qBACnB,mBAAoBP,WAAW,CAACQ,IAAhC,CADmB,oCACsB,EADtB,EAEnBR,WAFmB,CAArB;AAKA,UAAMS,MAAM,GAAG1B,KAAK,CAAC,EAAD,EAAKoB,UAAL,EAAiBI,KAAjB,EAAwBF,QAAxB,CAApB;;AAEA,UAAI,CAAAZ,IAAI,QAAJ,YAAAA,IAAI,CAAEiB,WAAN,KAAqBhB,WAAW,CAACiB,KAArC,EAA4C;AAC1C,aAAK,IAAMC,IAAX,IAAmBlB,WAAW,CAACiB,KAA/B,EAAsC;AAAA;;AACpCF,UAAAA,MAAM,CAACG,IAAD,CAAN,mBAAeH,MAAM,CAACG,IAAD,CAArB,2BAA+B,EAA/B;AACD;AACF;;AAED,UAAMC,YAAY,GAAGzB,OAAO,CAACc,SAAS,CAACY,OAAX,EAAoBL,MAApB,CAA5B;;AAEA,UAAI,CAACI,YAAL,EAAmB;AACjBX,QAAAA,SAAS,CAACY,OAAV,GAAoBL,MAApB;AACD;AACF;;AAED,WAAOP,SAAS,CAACY,OAAjB;AACD,GA9Ba,EA8BX,CAACpB,WAAD,EAAcM,WAAd,EAA2BP,IAA3B,oBAA2BA,IAAI,CAAEiB,WAAjC,CA9BW,CAAd;AA+BD;AAED,OAAO,SAASK,mBAAT,CAA6BxB,QAA7B,EAA+CC,KAA/C,EAA2D;AAChE,SAAOF,cAAc,CAACC,QAAD,EAAWC,KAAX,EAAkB;AAAEkB,IAAAA,WAAW,EAAE;AAAf,GAAlB,CAArB;AACD","sourcesContent":["import { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  filterUndefined,\n  memoizedGet as get,\n  merge,\n  runIfFn,\n  omit,\n} from \"@chakra-ui/utils\"\nimport { useMemo, useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useChakra } from \"./hooks\"\nimport { ThemingProps } from \"./system.types\"\n\nexport function useStyleConfig(\n  themeKey: string,\n  props: ThemingProps,\n  opts: { isMultiPart: true },\n): Record<string, SystemStyleObject>\n\nexport function useStyleConfig(\n  themeKey: string,\n  props?: ThemingProps,\n  opts?: { isMultiPart?: boolean },\n): SystemStyleObject\n\nexport function useStyleConfig(themeKey: any, props: any, opts: any) {\n  const { styleConfig: styleConfigProp, ...rest } = props\n\n  const { theme, colorMode } = useChakra()\n  const themeStyleConfig = get(theme, `components.${themeKey}`)\n  const styleConfig = styleConfigProp || themeStyleConfig\n\n  const mergedProps = merge(\n    { theme, colorMode },\n    styleConfig?.defaultProps ?? {},\n    filterUndefined(omit(rest, [\"children\"])),\n  )\n\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n  type StylesRef = SystemStyleObject | Record<string, SystemStyleObject>\n  const stylesRef = useRef<StylesRef>({})\n\n  return useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, mergedProps)\n\n      const variants = runIfFn(\n        styleConfig.variants?.[mergedProps.variant] ?? {},\n        mergedProps,\n      )\n\n      const sizes = runIfFn(\n        styleConfig.sizes?.[mergedProps.size] ?? {},\n        mergedProps,\n      )\n\n      const styles = merge({}, baseStyles, sizes, variants)\n\n      if (opts?.isMultiPart && styleConfig.parts) {\n        for (const part of styleConfig.parts) {\n          styles[part] = styles[part] ?? {}\n        }\n      }\n\n      const isStyleEqual = isEqual(stylesRef.current, styles)\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles\n      }\n    }\n\n    return stylesRef.current\n  }, [styleConfig, mergedProps, opts?.isMultiPart])\n}\n\nexport function useMultiStyleConfig(themeKey: string, props: any) {\n  return useStyleConfig(themeKey, props, { isMultiPart: true })\n}\n"],"file":"use-style-config.js"}