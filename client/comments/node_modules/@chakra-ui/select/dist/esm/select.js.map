{"version":3,"sources":["../../src/select.tsx"],"names":["useFormControl","chakra","forwardRef","layoutPropNames","omitThemingProps","useMultiStyleConfig","cx","merge","split","__DEV__","React","SelectField","props","ref","children","placeholder","className","rest","ownProps","displayName","Select","styles","rootProps","icon","color","height","h","minH","minHeight","iconColor","iconSize","layoutProps","otherProps","rootStyles","width","position","fieldStyles","field","pr","_focus","zIndex","isDisabled","fontSize","DefaultIcon","IconWrapper","baseStyle","display","alignItems","justifyContent","right","pointerEvents","top","transform","SelectIcon","clone","cloneElement","role","focusable","style","isValidElement"],"mappings":"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","sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  layoutPropNames,\n  omitThemingProps,\n  PropsOf,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, merge, split, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface SelectFieldProps\n  extends Omit<PropsOf<typeof chakra.select>, Omitted> {\n  size?: string\n  isDisabled?: boolean\n}\n\nexport const SelectField = forwardRef<SelectFieldProps, \"select\">(\n  function SelectField(props, ref) {\n    const { children, placeholder, className, ...rest } = props\n    const ownProps = useFormControl<HTMLSelectElement>(rest)\n\n    return (\n      <chakra.select\n        {...ownProps}\n        ref={ref}\n        className={cx(\"chakra-select\", className)}\n      >\n        {placeholder && <option value=\"\">{placeholder}</option>}\n        {children}\n      </chakra.select>\n    )\n  },\n)\n\nif (__DEV__) {\n  SelectField.displayName = \"SelectField\"\n}\n\ninterface RootProps extends Omit<PropsOf<typeof chakra.div>, \"color\"> {}\n\ninterface SelectOptions extends FormControlOptions {\n  /**\n   * The border color when the select is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the select is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the select element will span the full width of it's parent\n   */\n  isFullWidth?: boolean\n  /**\n   * The placeholder for the select. We render an `<option/>` element that has\n   * empty value.\n   *\n   * ```jsx\n   * <option value=\"\">{placeholder}</option>\n   * ```\n   */\n  placeholder?: string\n  /**\n   * The size (width and height) of the icon\n   */\n  iconSize?: string\n  /**\n   * The color of the icon\n   */\n  iconColor?: string\n}\n\nexport interface SelectProps\n  extends SelectFieldProps,\n    ThemingProps,\n    SelectOptions {\n  /**\n   * Props to forward to the root `div` element\n   */\n  rootProps?: RootProps\n  /**\n   * The icon element to use in the select\n   */\n  icon?: React.ReactElement<any>\n}\n\n/**\n * React component used to select one item from a list of options.\n */\nexport const Select = forwardRef<SelectProps, \"select\">(function Select(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Select\", props)\n\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    ...rest\n  } = omitThemingProps(props)\n\n  const [layoutProps, otherProps] = split(rest, layoutPropNames as any[])\n\n  const rootStyles = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color,\n  }\n\n  const fieldStyles = merge({}, styles.field, {\n    pr: \"2rem\",\n    _focus: { zIndex: \"unset\" },\n  })\n\n  return (\n    <chakra.div\n      className=\"chakra-select__wrapper\"\n      __css={rootStyles}\n      {...layoutProps}\n      {...rootProps}\n    >\n      <SelectField\n        ref={ref}\n        height={h ?? height}\n        minH={minH ?? minHeight}\n        placeholder={placeholder}\n        {...otherProps}\n        __css={fieldStyles}\n      >\n        {props.children}\n      </SelectField>\n\n      <SelectIcon\n        data-disabled={props.isDisabled}\n        children={icon}\n        color={iconColor || color}\n        __css={styles.icon}\n        {...(iconSize && { fontSize: iconSize })}\n      />\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Select.displayName = \"Select\"\n}\n\nexport const DefaultIcon: React.FC<PropsOf<\"svg\">> = (props) => (\n  <svg viewBox=\"0 0 24 24\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n    />\n  </svg>\n)\n\nconst IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    width: \"1.5rem\",\n    height: \"100%\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    right: \"0.5rem\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n})\n\ntype SelectIconProps = PropsOf<typeof IconWrapper>\n\nconst SelectIcon: React.FC<SelectIconProps> = (props) => {\n  const { children = <DefaultIcon />, ...rest } = props\n\n  const clone = React.cloneElement(children as any, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    // force icon to adhere to `IconWrapper` styles\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\",\n    },\n  })\n\n  return (\n    <IconWrapper\n      {...rest}\n      className=\"chakra-select__icon-wrapper\"\n      children={React.isValidElement(children) ? clone : null}\n    />\n  )\n}\n\nif (__DEV__) {\n  SelectIcon.displayName = \"SelectIcon\"\n}\n"],"file":"select.js"}