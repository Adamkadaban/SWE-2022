{"version":3,"sources":["../../src/color-mode-provider.tsx"],"names":["ColorModeContext","React","createContext","__DEV__","displayName","useColorMode","context","useContext","undefined","Error","setRootProperty","mode","root","document","documentElement","style","setProperty","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","colorModeManager","localStorageManager","useState","type","get","isBrowser","colorMode","rawSetColorMode","useEffect","getPropertyValue","isDark","setColorMode","useCallback","set","toggleColorMode","noop","DarkMode","LightMode","useColorModeValue","light","dark"],"mappings":"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","sourcesContent":["import { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  addListener,\n  ColorMode,\n  getColorScheme,\n  syncBodyClassName,\n} from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nexport type { ColorMode }\n\nexport interface ColorModeOptions {\n  initialColorMode?: ColorMode\n  useSystemColorMode?: boolean\n}\n\ninterface ColorModeContextType {\n  colorMode: ColorMode\n  toggleColorMode: () => void\n  setColorMode: (value: any) => void\n}\n\nexport const ColorModeContext = React.createContext({} as ColorModeContextType)\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\"\n}\n\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\nexport const useColorMode = () => {\n  const context = React.useContext(ColorModeContext)\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\")\n  }\n  return context\n}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\nconst setRootProperty = (mode: ColorMode) => {\n  const root = document.documentElement\n  root.style.setProperty(\"--chakra-ui-color-mode\", mode)\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: { useSystemColorMode, initialColorMode },\n    colorModeManager = localStorageManager,\n  } = props\n\n  const [colorMode, rawSetColorMode] = React.useState<ColorMode | undefined>(\n    () => {\n      /**\n       * Only attempt to retrieve if we're on the server. Else this will result\n       * in a hydration mismatch warning and partially invalid visuals\n       */\n      if (colorModeManager.type === \"cookie\") {\n        // use `initialColorMode` here to be theme-aware\n        return colorModeManager.get(initialColorMode)\n      }\n\n      if (isBrowser && useSystemColorMode) {\n        return getColorScheme()\n      }\n\n      /**\n       * fallback safely to:\n       * - custom theme.config.initialColorMode\n       * - undefined, will be taken care of in useEffect\n       */\n      return initialColorMode\n    },\n  )\n\n  React.useEffect(() => {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     */\n    if (colorModeManager.type === \"localStorage\") {\n      const root = document.documentElement\n      const mode = root.style.getPropertyValue(\n        \"--chakra-ui-color-mode\",\n      ) as ColorMode\n\n      rawSetColorMode(mode)\n    }\n  }, [colorModeManager.type])\n\n  React.useEffect(() => {\n    const isDark = colorMode === \"dark\"\n\n    syncBodyClassName(isDark)\n    setRootProperty(isDark ? \"dark\" : \"light\")\n  }, [colorMode])\n\n  const setColorMode = React.useCallback(\n    (value: ColorMode) => {\n      setRootProperty(value)\n      colorModeManager.set(value)\n      rawSetColorMode(value)\n    },\n    [colorModeManager],\n  )\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\")\n  }, [colorMode, setColorMode])\n\n  React.useEffect(() => {\n    if (useSystemColorMode) {\n      return addListener(setColorMode)\n    }\n  }, [setColorMode, useSystemColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = {\n    colorMode: (value ?? colorMode) as ColorMode,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode,\n  }\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\"\n}\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport const DarkMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"dark\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\"\n}\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport const LightMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"light\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\"\n}\n\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\nexport function useColorModeValue<TLight = unknown, TDark = unknown>(\n  light: TLight,\n  dark: TDark,\n) {\n  const { colorMode } = useColorMode()\n  return colorMode === \"light\" ? light : dark\n}\n"],"file":"color-mode-provider.js"}