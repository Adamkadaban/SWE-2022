{"version":3,"sources":["../../src/color-mode-provider.tsx"],"names":["isBrowser","noop","__DEV__","React","addListener","ColorMode","getColorScheme","syncBodyClassName","localStorageManager","ColorModeContext","createContext","displayName","useColorMode","context","useContext","undefined","Error","setRootProperty","mode","root","document","documentElement","style","setProperty","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","colorModeManager","colorMode","rawSetColorMode","useState","type","get","useEffect","getPropertyValue","isDark","setColorMode","useCallback","set","toggleColorMode","DarkMode","LightMode","useColorModeValue","light","dark"],"mappings":"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","sourcesContent":["import { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  addListener,\n  ColorMode,\n  getColorScheme,\n  syncBodyClassName,\n} from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nexport type { ColorMode }\n\nexport interface ColorModeOptions {\n  initialColorMode?: ColorMode\n  useSystemColorMode?: boolean\n}\n\ninterface ColorModeContextType {\n  colorMode: ColorMode\n  toggleColorMode: () => void\n  setColorMode: (value: any) => void\n}\n\nexport const ColorModeContext = React.createContext({} as ColorModeContextType)\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\"\n}\n\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\nexport const useColorMode = () => {\n  const context = React.useContext(ColorModeContext)\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\")\n  }\n  return context\n}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\nconst setRootProperty = (mode: ColorMode) => {\n  const root = document.documentElement\n  root.style.setProperty(\"--chakra-ui-color-mode\", mode)\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: { useSystemColorMode, initialColorMode },\n    colorModeManager = localStorageManager,\n  } = props\n\n  const [colorMode, rawSetColorMode] = React.useState<ColorMode | undefined>(\n    () => {\n      /**\n       * Only attempt to retrieve if we're on the server. Else this will result\n       * in a hydration mismatch warning and partially invalid visuals\n       */\n      if (colorModeManager.type === \"cookie\") {\n        // use `initialColorMode` here to be theme-aware\n        return colorModeManager.get(initialColorMode)\n      }\n\n      if (isBrowser && useSystemColorMode) {\n        return getColorScheme()\n      }\n\n      /**\n       * fallback safely to:\n       * - custom theme.config.initialColorMode\n       * - undefined, will be taken care of in useEffect\n       */\n      return initialColorMode\n    },\n  )\n\n  React.useEffect(() => {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     */\n    if (colorModeManager.type === \"localStorage\") {\n      const root = document.documentElement\n      const mode = root.style.getPropertyValue(\n        \"--chakra-ui-color-mode\",\n      ) as ColorMode\n\n      rawSetColorMode(mode)\n    }\n  }, [colorModeManager.type])\n\n  React.useEffect(() => {\n    const isDark = colorMode === \"dark\"\n\n    syncBodyClassName(isDark)\n    setRootProperty(isDark ? \"dark\" : \"light\")\n  }, [colorMode])\n\n  const setColorMode = React.useCallback(\n    (value: ColorMode) => {\n      setRootProperty(value)\n      colorModeManager.set(value)\n      rawSetColorMode(value)\n    },\n    [colorModeManager],\n  )\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\")\n  }, [colorMode, setColorMode])\n\n  React.useEffect(() => {\n    if (useSystemColorMode) {\n      return addListener(setColorMode)\n    }\n  }, [setColorMode, useSystemColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = {\n    colorMode: (value ?? colorMode) as ColorMode,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode,\n  }\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\"\n}\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport const DarkMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"dark\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\"\n}\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport const LightMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"light\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\"\n}\n\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\nexport function useColorModeValue<TLight = unknown, TDark = unknown>(\n  light: TLight,\n  dark: TDark,\n) {\n  const { colorMode } = useColorMode()\n  return colorMode === \"light\" ? light : dark\n}\n"],"file":"color-mode-provider.js"}