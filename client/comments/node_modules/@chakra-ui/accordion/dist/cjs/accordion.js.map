{"version":3,"sources":["../../src/accordion.tsx"],"names":["Accordion","ref","children","props","styles","ownProps","htmlProps","context","ctx","React","useMemo","reduceMotion","className","__DEV__","displayName","name","errorMessage","AccordionItemProvider","useAccordionItemContext","AccordionItem","_context","container","isExpanded","isOpen","isDisabled","useAccordionItemState","onClose","onOpen","AccordionButton","getButtonProps","buttonProps","buttonStyles","display","alignItems","width","transition","outline","button","AccordionPanel","getPanelProps","panelProps","_className","hidden","child","panel","AccordionIcon","iconStyles","fontSize","opacity","transform","undefined","transformOrigin"],"mappings":"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","sourcesContent":["import { Collapse } from \"@chakra-ui/collapse\"\nimport { Icon, IconProps } from \"@chakra-ui/icon\"\nimport {\n  chakra,\n  forwardRef,\n  PropsOf,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport {\n  cx,\n  createContext,\n  Omit,\n  ReactNodeOrRenderProp,\n  runIfFn,\n  __DEV__,\n  Dict,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  AccordionProvider,\n  useAccordion,\n  useAccordionContext,\n  useAccordionItem,\n  UseAccordionItemProps,\n  UseAccordionItemReturn,\n  UseAccordionProps,\n} from \"./use-accordion\"\n\ninterface DivProps extends PropsOf<typeof chakra.div> {}\n\nexport interface AccordionProps\n  extends UseAccordionProps,\n    Omit<DivProps, keyof UseAccordionProps>,\n    ThemingProps {\n  /**\n   * If `true`, height animation and transitions will be disabled.\n   */\n  reduceMotion?: boolean\n}\n\n/**\n * The wrapper that provides context and focus management\n * for all accordion items.\n *\n * It wraps all accordion items in a `div` for better grouping.\n * @see Docs https://chakra-ui.com/components/accordion\n */\nexport const Accordion = forwardRef<AccordionProps, \"div\">(function Accordion(\n  { children, ...props },\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Accordion\", props)\n  const ownProps = omitThemingProps(props)\n\n  const { htmlProps, ...context } = useAccordion(ownProps)\n\n  const ctx = React.useMemo(\n    () => ({ ...context, reduceMotion: !!props.reduceMotion }),\n    [context, props.reduceMotion],\n  )\n\n  return (\n    <AccordionProvider value={ctx}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          ref={ref}\n          {...htmlProps}\n          className={cx(\"chakra-accordion\", props.className)}\n        >\n          {children}\n        </chakra.div>\n      </StylesProvider>\n    </AccordionProvider>\n  )\n})\n\nif (__DEV__) {\n  Accordion.displayName = \"Accordion\"\n}\n\ntype AccordionItemContext = Omit<UseAccordionItemReturn, \"htmlProps\">\n\nconst [AccordionItemProvider, useAccordionItemContext] = createContext<\n  AccordionItemContext\n>({\n  name: \"AccordionItemContext\",\n  errorMessage:\n    \"useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` \",\n})\n\nexport interface AccordionItemProps\n  extends Omit<DivProps, keyof UseAccordionItemProps>,\n    UseAccordionItemProps {\n  children?: ReactNodeOrRenderProp<{\n    isExpanded: boolean\n    isDisabled: boolean\n  }>\n}\n\n/**\n * AccordionItem is a single accordion that provides the open-close\n * behavior when the accordion button is clicked.\n *\n * It also provides context for the accordion button and panel.\n */\nexport const AccordionItem = forwardRef<AccordionItemProps, \"div\">(\n  function AccordionItem(props, ref) {\n    const { children, className } = props\n    const { htmlProps, ...context } = useAccordionItem(props)\n\n    const styles = useStyles()\n    const _context = React.useMemo(() => context, [context])\n\n    return (\n      <AccordionItemProvider value={_context}>\n        <chakra.div\n          ref={ref}\n          {...htmlProps}\n          className={cx(\"chakra-accordion__item\", className)}\n          __css={styles.container}\n        >\n          {runIfFn(children, {\n            isExpanded: !!context.isOpen,\n            isDisabled: !!context.isDisabled,\n          })}\n        </chakra.div>\n      </AccordionItemProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  AccordionItem.displayName = \"AccordionItem\"\n}\n\n/**\n * React hook to get the state and actions of an accordion item\n */\nexport function useAccordionItemState() {\n  const { isOpen, isDisabled, onClose, onOpen } = useAccordionItemContext()\n  return { isOpen, onClose, isDisabled, onOpen }\n}\n\nexport interface AccordionButtonProps extends PropsOf<typeof chakra.button> {}\n\n/**\n * AccordionButton is used expands and collapses an accordion item.\n * It must be a child of `AccordionItem`.\n *\n * Note ðŸš¨: Each accordion button must be wrapped in an heading tag,\n * that is appropriate for the information architecture of the page.\n */\nexport const AccordionButton = forwardRef<AccordionButtonProps, \"button\">(\n  function AccordionButton(props, ref) {\n    const { getButtonProps } = useAccordionItemContext()\n    const buttonProps = getButtonProps(props, ref)\n\n    const styles = useStyles()\n    const buttonStyles = {\n      display: \"flex\",\n      alignItems: \"center\",\n      width: \"100%\",\n      transition: \"all 0.2s\",\n      outline: 0,\n      ...styles.button,\n    }\n\n    return (\n      <chakra.button\n        {...buttonProps}\n        className={cx(\"chakra-accordion__button\", props.className)}\n        __css={buttonStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  AccordionButton.displayName = \"AccordionButton\"\n}\n\nexport interface AccordionPanelProps extends DivProps {}\n\n/**\n * Accordion panel that holds the content for each accordion.\n * It shows and hides based on the state login from the `AccordionItem`.\n *\n * It uses the `Collapse` component to animate it's height.\n */\nexport const AccordionPanel = forwardRef<AccordionPanelProps, \"div\">(\n  function AccordionPanel(props, ref) {\n    const { reduceMotion } = useAccordionContext()\n    const { getPanelProps, isOpen } = useAccordionItemContext()\n\n    // remove `hidden` prop, 'coz we're using height animation\n    const panelProps = getPanelProps(props, ref)\n\n    const _className = cx(\"chakra-accordion__panel\", props.className)\n    const styles = useStyles()\n\n    if (!reduceMotion) {\n      delete panelProps.hidden\n    }\n\n    const child = (\n      <chakra.div\n        {...panelProps}\n        __css={styles.panel}\n        className={_className}\n        transition=\"height 150ms ease-in-out, opacity 150ms ease-in-out, transform 150ms ease-in-out\"\n      />\n    )\n\n    if (!reduceMotion) {\n      return <Collapse isOpen={isOpen}>{child}</Collapse>\n    }\n\n    return child\n  },\n)\n\nif (__DEV__) {\n  AccordionPanel.displayName = \"AccordionPanel\"\n}\n\n/**\n * AccordionIcon that gives a visual cue of the open/close state of the accordion item.\n * It rotates `180deg` based on the open/close state.\n */\nexport const AccordionIcon: React.FC<IconProps> = (props) => {\n  const { isOpen, isDisabled } = useAccordionItemContext()\n  const { reduceMotion } = useAccordionContext()\n\n  const iconStyles = {\n    fontSize: \"1.25em\",\n    opacity: isDisabled ? 0.4 : 1,\n    transform: isOpen ? \"rotate(-180deg)\" : undefined,\n    transition: reduceMotion ? undefined : \"transform 0.2s\",\n    transformOrigin: \"center\",\n  }\n\n  return (\n    <Icon viewBox=\"0 0 24 24\" aria-hidden __css={iconStyles} {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n      />\n    </Icon>\n  )\n}\n\nif (__DEV__) {\n  AccordionIcon.displayName = \"AccordionIcon\"\n}\n"],"file":"accordion.js"}