{"version":3,"sources":["../../src/use-accordion.ts"],"names":["useAccordion","props","onChange","defaultIndex","indexProp","index","allowMultiple","allowToggle","htmlProps","warn","allowMultipleAndAllowToggle","domContext","focusedIndex","setFocusedIndex","value","defaultValue","propsMap","setIndex","getItemProps","idx","isOpen","includes","nextState","name","errorMessage","AccordionProvider","useAccordionContext","useAccordionItem","isDisabled","isFocusable","id","descendants","buttonRef","buttonId","panelId","focusableNotDisabled","element","current","context","disabled","focusable","onOpen","onClose","shouldFocus","onClick","onKeyDown","event","eventKey","keyMap","ArrowDown","nextIndex","length","nextAccordion","focus","ArrowUp","prevIndex","prevAccordion","Home","firstAccordion","End","lastAccordion","action","preventDefault","onFocus","getButtonProps","ref","getPanelProps","role","hidden"],"mappings":"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","sourcesContent":["import { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport { useControllableState, useFocusEffect, useIds } from \"@chakra-ui/hooks\"\nimport {\n  addItem,\n  callAllHandlers,\n  createContext,\n  EventKeyMap,\n  getNextIndex,\n  getPrevIndex,\n  isArray,\n  mergeRefs,\n  normalizeEventKey,\n  PropGetter,\n  removeItem,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useRef, useState } from \"react\"\nimport * as warn from \"./warning\"\n\nexport type ExpandedIndex = number | number[]\n\nexport interface UseAccordionProps {\n  /**\n   * If `true`, multiple accordion items can be expanded at once.\n   */\n  allowMultiple?: boolean\n  /**\n   * If `true`, any expanded accordion item can be collapsed again.\n   */\n  allowToggle?: boolean\n  /**\n   * The index(es) of the expanded accordion item\n   */\n  index?: ExpandedIndex\n  /**\n   * The initial index(es) of the expanded accordion item\n   */\n  defaultIndex?: ExpandedIndex\n  /**\n   * The callback invoked when accordion items are expanded or collapsed.\n   */\n  onChange?: (expandedIndex: ExpandedIndex) => void\n}\n\n/**\n * useAccordion hook provides all the state and focus management logic\n * for accordion items.\n */\nexport function useAccordion(props: UseAccordionProps) {\n  const {\n    onChange,\n    defaultIndex,\n    index: indexProp,\n    allowMultiple,\n    allowToggle,\n    ...htmlProps\n  } = props\n\n  // validate the props and `warn` if used incorrectly\n  warn.allowMultiple(props)\n  warn.allowMultipleAndAllowToggle(props)\n\n  /**\n   * Think of this as the register to each accordion item.\n   * We used to manage focus between accordion item buttons.\n   *\n   * Every accordion item, registers their button refs in this context\n   */\n  const domContext = useDescendants()\n\n  /**\n   * This state is used to track the index focused accordion\n   * button when click on the button, tab on the button, or\n   * use the down/up arrow to navigate.\n   */\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  /**\n   * Hook that manages the controlled and un-controlled state\n   * for the accordion.\n   */\n  const [index, setIndex] = useControllableState({\n    value: indexProp,\n    defaultValue: () => {\n      if (allowMultiple) {\n        return defaultIndex ?? []\n      } else {\n        return defaultIndex ?? -1\n      }\n    },\n    onChange,\n    propsMap: {\n      value: \"index\",\n      defaultValue: \"defaultIndex\",\n    },\n  })\n\n  /**\n   * Gets the `isOpen` and `onChange` props for a child accordion item based on\n   * the child's index.\n   *\n   * @param idx {number} The index of the child accordion item\n   */\n  const getItemProps = (idx: number) => {\n    const isOpen = isArray(index) ? index.includes(idx) : index === idx\n    const onChange = (isOpen: boolean) => {\n      if (allowMultiple && isArray(index)) {\n        const nextState = isOpen ? addItem(index, idx) : removeItem(index, idx)\n        setIndex(nextState)\n      } else {\n        if (isOpen) {\n          setIndex(idx)\n        } else if (allowToggle) {\n          setIndex(-1)\n        }\n      }\n    }\n\n    return { isOpen, onChange }\n  }\n\n  return {\n    htmlProps,\n    getItemProps,\n    focusedIndex,\n    setFocusedIndex,\n    domContext,\n  }\n}\n\nexport type UseAccordionReturn = ReturnType<typeof useAccordion>\n\ninterface AccordionContext extends Omit<UseAccordionReturn, \"htmlProps\"> {\n  reduceMotion: boolean\n}\n\nconst [AccordionProvider, useAccordionContext] = createContext<\n  AccordionContext\n>({\n  name: \"AccordionContext\",\n  errorMessage:\n    \"useAccordionContext: `context` is undefined. Seems you forgot to wrap the accordion components in `<Accordion />`\",\n})\n\nexport { AccordionProvider, useAccordionContext }\n\nexport interface UseAccordionItemProps {\n  /**\n   * If `true`, the accordion item will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the accordion item will be focusable.\n   */\n  isFocusable?: boolean\n  /**\n   * A unique id for the accordion item.\n   */\n  id?: string\n}\n\n/**\n * useAccordionItem\n *\n * React hook that provides the open/close functionality\n * for an accordion item and it's children\n */\nexport function useAccordionItem(props: UseAccordionItemProps) {\n  const { isDisabled, isFocusable, id, ...htmlProps } = props\n\n  const {\n    getItemProps,\n    domContext,\n    focusedIndex,\n    setFocusedIndex,\n  } = useAccordionContext()\n  const { descendants } = domContext\n\n  const buttonRef = useRef<HTMLElement>(null)\n\n  /**\n   * Generate unique ids for all accordion item components (button and panel)\n   */\n  const [buttonId, panelId] = useIds(id, `accordion-button`, `accordion-panel`)\n\n  warn.focusableNotDisabled(props)\n\n  /**\n   * Think of this as a way to register this accordion item\n   * with it's parent `useAccordion`\n   */\n  const index = useDescendant({\n    element: buttonRef.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable,\n  })\n\n  const { isOpen, onChange } = getItemProps(index)\n\n  const onOpen = () => {\n    onChange?.(true)\n  }\n\n  const onClose = () => {\n    onChange?.(false)\n  }\n\n  const shouldFocus = index === focusedIndex\n\n  /**\n   * Autofocus the accordion button when\n   * the active index matched the accordion item's index\n   */\n  useFocusEffect(buttonRef, { shouldFocus })\n\n  /**\n   * Toggle the visibility of the accordion item\n   */\n  const onClick = useCallback(() => {\n    onChange?.(!isOpen)\n    setFocusedIndex(index)\n  }, [index, isOpen, onChange, setFocusedIndex])\n\n  /**\n   * Manage keyboard navigation between accordion items.\n   */\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowDown: () => {\n          const nextIndex = getNextIndex(index, descendants.length)\n          const nextAccordion = descendants[nextIndex]\n          nextAccordion?.element?.focus()\n        },\n        ArrowUp: () => {\n          const prevIndex = getPrevIndex(index, descendants.length)\n          const prevAccordion = descendants[prevIndex]\n          prevAccordion?.element?.focus()\n        },\n        Home: () => {\n          const firstAccordion = descendants[0]\n          firstAccordion?.element?.focus()\n        },\n        End: () => {\n          const lastAccordion = descendants[descendants.length - 1]\n          lastAccordion?.element?.focus()\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [descendants, index],\n  )\n\n  /**\n   * Since each accordion item's button still remains tabbable, let's\n   * update the focusedIndex when it receives focus\n   */\n  const onFocus = useCallback(() => setFocusedIndex(index), [\n    index,\n    setFocusedIndex,\n  ])\n\n  const getButtonProps: PropGetter<HTMLButtonElement> = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(buttonRef, ref),\n      id: buttonId,\n      disabled: !!isDisabled,\n      \"aria-expanded\": !!isOpen,\n      \"aria-controls\": panelId,\n      onClick: callAllHandlers(props.onClick, onClick),\n      onFocus: callAllHandlers(props.onFocus, onFocus),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    }),\n    [buttonId, isDisabled, isOpen, onClick, onFocus, onKeyDown, panelId],\n  )\n\n  const getPanelProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      role: \"region\",\n      id: panelId,\n      \"aria-labelledby\": buttonId,\n      hidden: !isOpen,\n    }),\n    [buttonId, isOpen, panelId],\n  )\n\n  return {\n    isOpen,\n    isDisabled,\n    isFocusable,\n    onOpen,\n    onClose,\n    getButtonProps,\n    getPanelProps,\n    htmlProps,\n  }\n}\n\nexport type UseAccordionItemReturn = ReturnType<typeof useAccordionItem>\n"],"file":"use-accordion.js"}