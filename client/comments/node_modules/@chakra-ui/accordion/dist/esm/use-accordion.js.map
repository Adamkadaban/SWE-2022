{"version":3,"sources":["../../src/use-accordion.ts"],"names":["useDescendant","useDescendants","useControllableState","useFocusEffect","useIds","addItem","callAllHandlers","createContext","getNextIndex","getPrevIndex","isArray","mergeRefs","normalizeEventKey","removeItem","useCallback","useRef","useState","warn","useAccordion","props","onChange","defaultIndex","index","indexProp","allowMultiple","allowToggle","htmlProps","allowMultipleAndAllowToggle","domContext","focusedIndex","setFocusedIndex","setIndex","value","defaultValue","propsMap","getItemProps","idx","isOpen","includes","nextState","AccordionProvider","useAccordionContext","name","errorMessage","useAccordionItem","isDisabled","isFocusable","id","descendants","buttonRef","buttonId","panelId","focusableNotDisabled","element","current","context","disabled","focusable","onOpen","onClose","shouldFocus","onClick","onKeyDown","event","eventKey","keyMap","ArrowDown","nextIndex","length","nextAccordion","focus","ArrowUp","prevIndex","prevAccordion","Home","firstAccordion","End","lastAccordion","action","preventDefault","onFocus","getButtonProps","ref","getPanelProps","role","hidden"],"mappings":"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","sourcesContent":["import { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport { useControllableState, useFocusEffect, useIds } from \"@chakra-ui/hooks\"\nimport {\n  addItem,\n  callAllHandlers,\n  createContext,\n  EventKeyMap,\n  getNextIndex,\n  getPrevIndex,\n  isArray,\n  mergeRefs,\n  normalizeEventKey,\n  PropGetter,\n  removeItem,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useRef, useState } from \"react\"\nimport * as warn from \"./warning\"\n\nexport type ExpandedIndex = number | number[]\n\nexport interface UseAccordionProps {\n  /**\n   * If `true`, multiple accordion items can be expanded at once.\n   */\n  allowMultiple?: boolean\n  /**\n   * If `true`, any expanded accordion item can be collapsed again.\n   */\n  allowToggle?: boolean\n  /**\n   * The index(es) of the expanded accordion item\n   */\n  index?: ExpandedIndex\n  /**\n   * The initial index(es) of the expanded accordion item\n   */\n  defaultIndex?: ExpandedIndex\n  /**\n   * The callback invoked when accordion items are expanded or collapsed.\n   */\n  onChange?: (expandedIndex: ExpandedIndex) => void\n}\n\n/**\n * useAccordion hook provides all the state and focus management logic\n * for accordion items.\n */\nexport function useAccordion(props: UseAccordionProps) {\n  const {\n    onChange,\n    defaultIndex,\n    index: indexProp,\n    allowMultiple,\n    allowToggle,\n    ...htmlProps\n  } = props\n\n  // validate the props and `warn` if used incorrectly\n  warn.allowMultiple(props)\n  warn.allowMultipleAndAllowToggle(props)\n\n  /**\n   * Think of this as the register to each accordion item.\n   * We used to manage focus between accordion item buttons.\n   *\n   * Every accordion item, registers their button refs in this context\n   */\n  const domContext = useDescendants()\n\n  /**\n   * This state is used to track the index focused accordion\n   * button when click on the button, tab on the button, or\n   * use the down/up arrow to navigate.\n   */\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  /**\n   * Hook that manages the controlled and un-controlled state\n   * for the accordion.\n   */\n  const [index, setIndex] = useControllableState({\n    value: indexProp,\n    defaultValue: () => {\n      if (allowMultiple) {\n        return defaultIndex ?? []\n      } else {\n        return defaultIndex ?? -1\n      }\n    },\n    onChange,\n    propsMap: {\n      value: \"index\",\n      defaultValue: \"defaultIndex\",\n    },\n  })\n\n  /**\n   * Gets the `isOpen` and `onChange` props for a child accordion item based on\n   * the child's index.\n   *\n   * @param idx {number} The index of the child accordion item\n   */\n  const getItemProps = (idx: number) => {\n    const isOpen = isArray(index) ? index.includes(idx) : index === idx\n    const onChange = (isOpen: boolean) => {\n      if (allowMultiple && isArray(index)) {\n        const nextState = isOpen ? addItem(index, idx) : removeItem(index, idx)\n        setIndex(nextState)\n      } else {\n        if (isOpen) {\n          setIndex(idx)\n        } else if (allowToggle) {\n          setIndex(-1)\n        }\n      }\n    }\n\n    return { isOpen, onChange }\n  }\n\n  return {\n    htmlProps,\n    getItemProps,\n    focusedIndex,\n    setFocusedIndex,\n    domContext,\n  }\n}\n\nexport type UseAccordionReturn = ReturnType<typeof useAccordion>\n\ninterface AccordionContext extends Omit<UseAccordionReturn, \"htmlProps\"> {\n  reduceMotion: boolean\n}\n\nconst [AccordionProvider, useAccordionContext] = createContext<\n  AccordionContext\n>({\n  name: \"AccordionContext\",\n  errorMessage:\n    \"useAccordionContext: `context` is undefined. Seems you forgot to wrap the accordion components in `<Accordion />`\",\n})\n\nexport { AccordionProvider, useAccordionContext }\n\nexport interface UseAccordionItemProps {\n  /**\n   * If `true`, the accordion item will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the accordion item will be focusable.\n   */\n  isFocusable?: boolean\n  /**\n   * A unique id for the accordion item.\n   */\n  id?: string\n}\n\n/**\n * useAccordionItem\n *\n * React hook that provides the open/close functionality\n * for an accordion item and it's children\n */\nexport function useAccordionItem(props: UseAccordionItemProps) {\n  const { isDisabled, isFocusable, id, ...htmlProps } = props\n\n  const {\n    getItemProps,\n    domContext,\n    focusedIndex,\n    setFocusedIndex,\n  } = useAccordionContext()\n  const { descendants } = domContext\n\n  const buttonRef = useRef<HTMLElement>(null)\n\n  /**\n   * Generate unique ids for all accordion item components (button and panel)\n   */\n  const [buttonId, panelId] = useIds(id, `accordion-button`, `accordion-panel`)\n\n  warn.focusableNotDisabled(props)\n\n  /**\n   * Think of this as a way to register this accordion item\n   * with it's parent `useAccordion`\n   */\n  const index = useDescendant({\n    element: buttonRef.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable,\n  })\n\n  const { isOpen, onChange } = getItemProps(index)\n\n  const onOpen = () => {\n    onChange?.(true)\n  }\n\n  const onClose = () => {\n    onChange?.(false)\n  }\n\n  const shouldFocus = index === focusedIndex\n\n  /**\n   * Autofocus the accordion button when\n   * the active index matched the accordion item's index\n   */\n  useFocusEffect(buttonRef, { shouldFocus })\n\n  /**\n   * Toggle the visibility of the accordion item\n   */\n  const onClick = useCallback(() => {\n    onChange?.(!isOpen)\n    setFocusedIndex(index)\n  }, [index, isOpen, onChange, setFocusedIndex])\n\n  /**\n   * Manage keyboard navigation between accordion items.\n   */\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowDown: () => {\n          const nextIndex = getNextIndex(index, descendants.length)\n          const nextAccordion = descendants[nextIndex]\n          nextAccordion?.element?.focus()\n        },\n        ArrowUp: () => {\n          const prevIndex = getPrevIndex(index, descendants.length)\n          const prevAccordion = descendants[prevIndex]\n          prevAccordion?.element?.focus()\n        },\n        Home: () => {\n          const firstAccordion = descendants[0]\n          firstAccordion?.element?.focus()\n        },\n        End: () => {\n          const lastAccordion = descendants[descendants.length - 1]\n          lastAccordion?.element?.focus()\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [descendants, index],\n  )\n\n  /**\n   * Since each accordion item's button still remains tabbable, let's\n   * update the focusedIndex when it receives focus\n   */\n  const onFocus = useCallback(() => setFocusedIndex(index), [\n    index,\n    setFocusedIndex,\n  ])\n\n  const getButtonProps: PropGetter<HTMLButtonElement> = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(buttonRef, ref),\n      id: buttonId,\n      disabled: !!isDisabled,\n      \"aria-expanded\": !!isOpen,\n      \"aria-controls\": panelId,\n      onClick: callAllHandlers(props.onClick, onClick),\n      onFocus: callAllHandlers(props.onFocus, onFocus),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    }),\n    [buttonId, isDisabled, isOpen, onClick, onFocus, onKeyDown, panelId],\n  )\n\n  const getPanelProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      role: \"region\",\n      id: panelId,\n      \"aria-labelledby\": buttonId,\n      hidden: !isOpen,\n    }),\n    [buttonId, isOpen, panelId],\n  )\n\n  return {\n    isOpen,\n    isDisabled,\n    isFocusable,\n    onOpen,\n    onClose,\n    getButtonProps,\n    getPanelProps,\n    htmlProps,\n  }\n}\n\nexport type UseAccordionItemReturn = ReturnType<typeof useAccordionItem>\n"],"file":"use-accordion.js"}